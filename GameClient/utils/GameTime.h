#ifndef _GAME_TIME_H_
#define _GAME_TIME_H_
#include <OgreSingleton.h>
typedef double FLOAT64;

/*
 =======================================================================================================================
    时间系统,用于系统时间上的计算和祯速控制
 =======================================================================================================================
 */
class CGameTime :
	public Singleton<CGameTime>
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	static CGameTime	&GetSingleton(void);
	static CGameTime	*GetSingletonPtr(void);

	/* 初始化 */
	KHAN_RETURN_RESULT	Initialize(void);

	/*  */
	KHAN_RETURN_RESULT	Update(void);
	void				Release(void);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===================================================================================================================
	    取得最近若干帧的平均时间,单位是毫秒
	 ===================================================================================================================
	 */
	FLOAT GetAverageTime(void) const
	{
		return m_fAverageTime;
	}

	/*
	 ===================================================================================================================
	    取得最近20ms以来每祯平均花费的时间
	 ===================================================================================================================
	 */
	FLOAT GetLoopTime(void) const
	{
		return m_fLoopTime;
	}

	/*
	 ===================================================================================================================
	    取得上一祯花费的时间
	 ===================================================================================================================
	 */
	FLOAT64 GetDeltaTime(void) const
	{
		return m_dwDeltaTime;
	}

	/*
	 ===================================================================================================================
	    取得根据m_fLoopTime累积的系统运行时间 ;
	    FLOAT GetRealTime(void) const { return m_fRealTime;
	    } ;
	    取得当前时间
	 ===================================================================================================================
	 */
	uint64_t GetTimeNow(void) const
	{
		return m_dwTimeNow;
	}

	/*
	 * 取得桢率 ;
	 * FLOAT GetFPS(void) const { return m_fFPS;
	 * } ;
	 * 计算时间差,考虑时间阙(49.71天)
	 */
	UINT64	CalSubTime(UINT64 timeStart, UINT64 timeEnd);

	/*
	 ===================================================================================================================
	 ===================================================================================================================
	 */
	uint32 GetTickCount(void)
	{
		return m_dwTickCount;
	}

	void	SetServerTime(time_t sTime);
	time_t	GetServerTime(void);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	/* 获取当前时间 */
	UINT64	GetCurrentClockTime(void);

	/* 取得最近若干帧的平均时间,单位是毫秒 */
	void	CalAverageTime(void);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	uint64_t	m_dwTimeNow;	/* 当前时间 */
	FLOAT	m_fLoopTime;	/* 最近20ms以来每祯平均花费的时间 */
	FLOAT64 m_dwDeltaTime;	/* 上一桢所花费的时间 */

	/*
	 * FLOAT m_fRealTime;
	 * // 根据m_fLoopTime累积的系统运行时间 ;
	 * FLOAT m_fFPS;
	 * // 当前的桢率
	 */
	uint32	m_dwTickCount;	/* 桢总数 */

	time_t	m_serverTime;	/* 服务器校验时间 */
	time_t	m_localTime;	/* 收到服务器校验时间时本地时间 */

	DWORD	m_localTime_Pre;

	FLOAT64 m_secsPerTick;	/* 时钟频率 */
	BOOL	m_bUsingQuery;	/* 是否使用高精度 */
	uint64_t	m_uTimeOffset;	/* 记录首次启动的计数，作为以后每次计算的偏移 */

	FLOAT	m_fAverageTime; /* 最近若干帧的平均时间 */
};	/* class */
#define GAME_TIME		CGameTime::GetSingleton()
#define GAME_TIME_PTR	CGameTime::GetSingletonPtr()
#endif /* _GAME_TIME_H_ */
