/*$T Common/EncryptAriths/tea.h GC 1.140 10/10/07 10:06:30 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __TEA_H__
#define __TEA_H__

#include "CryptDef.h"

class TEA :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);

	enum { KEYLENGTH = 16, BLOCKSIZE = 8, ROUNDS = 32, LOG_ROUNDS = 5 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	static const uint32	DELTA;
	SecBlock<uint32, 4>	k;
};

class TEAEncryption :
	public TEA
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	void ProcessBlock(byte *inoutBlock) const
	{
		TEAEncryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
};

class TEADecryption :
	public TEA
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	void ProcessBlock(byte *inoutBlock) const
	{
		TEADecryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
};
#endif
