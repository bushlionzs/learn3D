/*$T Common/EncryptAriths/rc6.h GC 1.140 10/10/07 10:06:30 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __RC6_H__
#define __RC6_H__

#include "CryptDef.h"

class RC6Base :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	typedef uint32	RC6_WORD;

	enum { KEYLENGTH = 16, BLOCKSIZE = sizeof (RC6_WORD) *4, ROUNDS = 20 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	RC6Base(uint32 rounds);
	void					SetUserKey(const byte *key);

	const uint32				r;
	SecBlock<RC6_WORD, (2 *ROUNDS) +4>	sTable;
};

class RC6Encryption :
	public RC6Base
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	RC6Encryption(uint32 rounds = ROUNDS) :
	RC6Base(rounds)
	{
	}

	void	SetUserKey(const byte *key);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	void ProcessBlock(byte *inoutBlock) const
	{
		RC6Encryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
};

class RC6Decryption :
	public RC6Base
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	RC6Decryption(uint32 rounds = ROUNDS) :
	RC6Base(rounds)
	{
	}

	void	SetUserKey(const byte *key);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	void ProcessBlock(byte *inoutBlock) const
	{
		RC6Decryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
};
#endif
