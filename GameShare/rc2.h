/*$T Common/EncryptAriths/rc2.h GC 1.140 10/10/07 10:06:29 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __RC2_H__
#define __RC2_H__

#include "CryptDef.h"

class RC2Base :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { KEYLENGTH = 16, BLOCKSIZE = 8, ROUNDS = 18 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

	void	SetUserKey(const byte *key, uint32 keyLen, uint32 effectiveLen);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	SecBlock<uint16, 64>	K;
};

class RC2Encryption :
	public RC2Base
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(byte *inoutBlock) const
	{
		RC2Encryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
	void	SetUserKey(const byte *key);
};

class RC2Decryption :
	public RC2Base
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(byte *inoutBlock) const
	{
		RC2Decryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
	void	SetUserKey(const byte *key);
};
#endif
