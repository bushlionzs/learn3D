/*$T Common/EncryptAriths/DES.cpp GC 1.140 10/10/07 10:06:29 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#include "stdafx.h"
#include "DES.h"

const uint32 DES::	Spbox[8][64] =
{
	{ 0x01010400, 0x00000000, 0x00010000, 0x01010404, 0x01010004, 0x00010404, 0x00000004, 0x00010000, 0x00000400,
			0x01010400, 0x01010404, 0x00000400, 0x01000404, 0x01010004, 0x01000000, 0x00000004, 0x00000404,
				0x01000400, 0x01000400, 0x00010400, 0x00010400, 0x01010000, 0x01010000, 0x01000404,
					0x00010004, 0x01000004, 0x01000004, 0x00010004, 0x00000000, 0x00000404,
						0x00010404, 0x01000000, 0x00010000, 0x01010404, 0x00000004, 0x01010000,
							0x01010400, 0x01000000, 0x01000000, 0x00000400, 0x01010004,
								0x00010000, 0x00010400, 0x01000004, 0x00000400,
									0x00000004, 0x01000404, 0x00010404, 0x01010404,
										0x00010004, 0x01010000, 0x01000404,
											0x01000004, 0x00000404,
												0x00010404, 0x01010400,
													0x00000404,
														0x01000400,
														0x01000400,
														0x00000000,
														0x00010004,
														0x00010400,
														0x00000000,
														0x01010004
														},
	{ 0x80108020, 0x80008000, 0x00008000, 0x00108020, 0x00100000, 0x00000020, 0x80100020, 0x80008020, 0x80000020,
			0x80108020, 0x80108000, 0x80000000, 0x80008000, 0x00100000, 0x00000020, 0x80100020, 0x00108000,
				0x00100020, 0x80008020, 0x00000000, 0x80000000, 0x00008000, 0x00108020, 0x80100000,
					0x00100020, 0x80000020, 0x00000000, 0x00108000, 0x00008020, 0x80108000,
						0x80100000, 0x00008020, 0x00000000, 0x00108020, 0x80100020, 0x00100000,
							0x80008020, 0x80100000, 0x80108000, 0x00008000, 0x80100000,
								0x80008000, 0x00000020, 0x80108020, 0x00108020,
									0x00000020, 0x00008000, 0x80000000, 0x00008020,
										0x80108000, 0x00100000, 0x80000020,
											0x00100020, 0x80008020,
												0x80000020, 0x00100020,
													0x00108000,
														0x00000000,
														0x80008000,
														0x00008020,
														0x80000000,
														0x80100020,
														0x80108020,
														0x00108000
														},
	{ 0x00000208, 0x08020200, 0x00000000, 0x08020008, 0x08000200, 0x00000000, 0x00020208, 0x08000200, 0x00020008,
			0x08000008, 0x08000008, 0x00020000, 0x08020208, 0x00020008, 0x08020000, 0x00000208, 0x08000000,
				0x00000008, 0x08020200, 0x00000200, 0x00020200, 0x08020000, 0x08020008, 0x00020208,
					0x08000208, 0x00020200, 0x00020000, 0x08000208, 0x00000008, 0x08020208,
						0x00000200, 0x08000000, 0x08020200, 0x08000000, 0x00020008, 0x00000208,
							0x00020000, 0x08020200, 0x08000200, 0x00000000, 0x00000200,
								0x00020008, 0x08020208, 0x08000200, 0x08000008,
									0x00000200, 0x00000000, 0x08020008, 0x08000208,
										0x00020000, 0x08000000, 0x08020208,
											0x00000008, 0x00020208,
												0x00020200, 0x08000008,
													0x08020000,
														0x08000208,
														0x00000208,
														0x08020000,
														0x00020208,
														0x00000008,
														0x08020008,
														0x00020200
														},
	{ 0x00802001, 0x00002081, 0x00002081, 0x00000080, 0x00802080, 0x00800081, 0x00800001, 0x00002001, 0x00000000,
			0x00802000, 0x00802000, 0x00802081, 0x00000081, 0x00000000, 0x00800080, 0x00800001, 0x00000001,
				0x00002000, 0x00800000, 0x00802001, 0x00000080, 0x00800000, 0x00002001, 0x00002080,
					0x00800081, 0x00000001, 0x00002080, 0x00800080, 0x00002000, 0x00802080,
						0x00802081, 0x00000081, 0x00800080, 0x00800001, 0x00802000, 0x00802081,
							0x00000081, 0x00000000, 0x00000000, 0x00802000, 0x00002080,
								0x00800080, 0x00800081, 0x00000001, 0x00802001,
									0x00002081, 0x00002081, 0x00000080, 0x00802081,
										0x00000081, 0x00000001, 0x00002000,
											0x00800001, 0x00002001,
												0x00802080, 0x00800081,
													0x00002001,
														0x00002080,
														0x00800000,
														0x00802001,
														0x00000080,
														0x00800000,
														0x00002000,
														0x00802080
														},
	{ 0x00000100, 0x02080100, 0x02080000, 0x42000100, 0x00080000, 0x00000100, 0x40000000, 0x02080000, 0x40080100,
			0x00080000, 0x02000100, 0x40080100, 0x42000100, 0x42080000, 0x00080100, 0x40000000, 0x02000000,
				0x40080000, 0x40080000, 0x00000000, 0x40000100, 0x42080100, 0x42080100, 0x02000100,
					0x42080000, 0x40000100, 0x00000000, 0x42000000, 0x02080100, 0x02000000,
						0x42000000, 0x00080100, 0x00080000, 0x42000100, 0x00000100, 0x02000000,
							0x40000000, 0x02080000, 0x42000100, 0x40080100, 0x02000100,
								0x40000000, 0x42080000, 0x02080100, 0x40080100,
									0x00000100, 0x02000000, 0x42080000, 0x42080100,
										0x00080100, 0x42000000, 0x42080100,
											0x02080000, 0x00000000,
												0x40080000, 0x42000000,
													0x00080100,
														0x02000100,
														0x40000100,
														0x00080000,
														0x00000000,
														0x40080000,
														0x02080100,
														0x40000100
														},
	{ 0x20000010, 0x20400000, 0x00004000, 0x20404010, 0x20400000, 0x00000010, 0x20404010, 0x00400000, 0x20004000,
			0x00404010, 0x00400000, 0x20000010, 0x00400010, 0x20004000, 0x20000000, 0x00004010, 0x00000000,
				0x00400010, 0x20004010, 0x00004000, 0x00404000, 0x20004010, 0x00000010, 0x20400010,
					0x20400010, 0x00000000, 0x00404010, 0x20404000, 0x00004010, 0x00404000,
						0x20404000, 0x20000000, 0x20004000, 0x00000010, 0x20400010, 0x00404000,
							0x20404010, 0x00400000, 0x00004010, 0x20000010, 0x00400000,
								0x20004000, 0x20000000, 0x00004010, 0x20000010,
									0x20404010, 0x00404000, 0x20400000, 0x00404010,
										0x20404000, 0x00000000, 0x20400010,
											0x00000010, 0x00004000,
												0x20400000, 0x00404010,
													0x00004000,
														0x00400010,
														0x20004010,
														0x00000000,
														0x20404000,
														0x20000000,
														0x00400010,
														0x20004010
														},
	{ 0x00200000, 0x04200002, 0x04000802, 0x00000000, 0x00000800, 0x04000802, 0x00200802, 0x04200800, 0x04200802,
			0x00200000, 0x00000000, 0x04000002, 0x00000002, 0x04000000, 0x04200002, 0x00000802, 0x04000800,
				0x00200802, 0x00200002, 0x04000800, 0x04000002, 0x04200000, 0x04200800, 0x00200002,
					0x04200000, 0x00000800, 0x00000802, 0x04200802, 0x00200800, 0x00000002,
						0x04000000, 0x00200800, 0x04000000, 0x00200800, 0x00200000, 0x04000802,
							0x04000802, 0x04200002, 0x04200002, 0x00000002, 0x00200002,
								0x04000000, 0x04000800, 0x00200000, 0x04200800,
									0x00000802, 0x00200802, 0x04200800, 0x00000802,
										0x04000002, 0x04200802, 0x04200000,
											0x00200800, 0x00000000,
												0x00000002, 0x04200802,
													0x00000000,
														0x00200802,
														0x04200000,
														0x00000800,
														0x04000002,
														0x04000800,
														0x00000800,
														0x00200002
														},
	{ 0x10001040, 0x00001000, 0x00040000, 0x10041040, 0x10000000, 0x10001040, 0x00000040, 0x10000000, 0x00040040,
			0x10040000, 0x10041040, 0x00041000, 0x10041000, 0x00041040, 0x00001000, 0x00000040, 0x10040000,
				0x10000040, 0x10001000, 0x00001040, 0x00041000, 0x00040040, 0x10040040, 0x10041000,
					0x00001040, 0x00000000, 0x00000000, 0x10040040, 0x10000040, 0x10001000,
						0x00041040, 0x00040000, 0x00041040, 0x00040000, 0x10041000, 0x00001000,
							0x00000040, 0x10040040, 0x00001000, 0x00041040, 0x10001000,
								0x00000040, 0x10000040, 0x10040000, 0x10040040,
									0x10000000, 0x00040000, 0x10001040, 0x00000000,
										0x10041040, 0x00040040, 0x10000040,
											0x10040000, 0x10001000,
												0x10001040, 0x00000000,
													0x10041040,
														0x00041000,
														0x00041000,
														0x00001040,
														0x00001040,
														0x00040040,
														0x10000000,
														0x10041000
														}
};

static const byte	pc1[] =
{
	57,
	49,
	41,
	33,
	25,
	17,
	9,
	1,
	58,
	50,
	42,
	34,
	26,
	18,
	10,
	2,
	59,
	51,
	43,
	35,
	27,
	19,
	11,
	3,
	60,
	52,
	44,
	36,
	63,
	55,
	47,
	39,
	31,
	23,
	15,
	7,
	62,
	54,
	46,
	38,
	30,
	22,
	14,
	6,
	61,
	53,
	45,
	37,
	29,
	21,
	13,
	5,
	28,
	20,
	12,
	4
};

static const byte	totrot[] = { 1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28 };

static const byte	pc2[] =
{
	14,
	17,
	11,
	24,
	1,
	5,
	3,
	28,
	15,
	6,
	21,
	10,
	23,
	19,
	12,
	4,
	26,
	8,
	16,
	7,
	27,
	20,
	13,
	2,
	41,
	52,
	31,
	37,
	47,
	55,
	30,
	40,
	51,
	45,
	33,
	48,
	44,
	49,
	39,
	56,
	34,
	53,
	46,
	42,
	50,
	36,
	29,
	32
};

static const int	bytebit[] = { 0200, 0100, 040, 020, 010, 04, 02, 01 };

/*
 =======================================================================================================================
 =======================================================================================================================
 */

void DES::SetUserKey(const byte *key, CipherDir dir)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	SecBlock<uchar, 56 +56 +8>	buffer;
	uchar *const			pc1m = buffer;
	uchar *const			pcr = pc1m + 56;
	uchar *const			ks = pcr + 56;
	register int			i, j, l;
	int				m;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	for(j = 0; j < 56; j++)
	{
		l = pc1[j] - 1;
		m = l & 07;
		pc1m[j] = (key[l >> 3] & bytebit[m]) ? 1 : 0;
	}

	for(i = 0; i < 16; i++)
	{
		memset(ks, 0, 8);
		for(j = 0; j < 56; j++) pcr[j] = pc1m[(l = j + totrot[i]) < (j < 28 ? 28 : 56) ? l : l - 28];

		for(j = 0; j < 48; j++)
		{
			if(pcr[pc2[j] - 1])
			{
				l = j % 6;
				ks[j / 6] |= bytebit[l] >> 2;
			}
		}

		k[2 * i] = ((uint32) ks[0] << 24) | ((uint32) ks[2] << 16) | ((uint32) ks[4] << 8) | ((uint32) ks[6]);
		k[2 * i + 1] = ((uint32) ks[1] << 24) | ((uint32) ks[3] << 16) | ((uint32) ks[5] << 8) | ((uint32) ks[7]);
	}

	if(dir == DECRYPTION)
		for(i = 0; i < 16; i += 2)
		{
			std::swap(k[i], k[32 - 2 - i]);
			std::swap(k[i + 1], k[32 - 1 - i]);
		}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
inline void IPERM(uint32 &left, uint32 &right)
{
	/*~~~~~~~~~*/
	uint32	work;
	/*~~~~~~~~~*/

	right = rotl(right, 4U);
	work = (left ^ right) & 0xf0f0f0f0;
	left ^= work;
	right = rotr(right ^ work, 20U);
	work = (left ^ right) & 0xffff0000;
	left ^= work;
	right = rotr(right ^ work, 18U);
	work = (left ^ right) & 0x33333333;
	left ^= work;
	right = rotr(right ^ work, 6U);
	work = (left ^ right) & 0x00ff00ff;
	left ^= work;
	right = rotl(right ^ work, 9U);
	work = (left ^ right) & 0xaaaaaaaa;
	left = rotl(left ^ work, 1U);
	right ^= work;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
inline void FPERM(uint32 &left, uint32 &right)
{
	/*~~~~~~~~~*/
	uint32	work;
	/*~~~~~~~~~*/

	right = rotr(right, 1U);
	work = (left ^ right) & 0xaaaaaaaa;
	right ^= work;
	left = rotr(left ^ work, 9U);
	work = (left ^ right) & 0x00ff00ff;
	right ^= work;
	left = rotl(left ^ work, 6U);
	work = (left ^ right) & 0x33333333;
	right ^= work;
	left = rotl(left ^ work, 18U);
	work = (left ^ right) & 0xffff0000;
	right ^= work;
	left = rotl(left ^ work, 20U);
	work = (left ^ right) & 0xf0f0f0f0;
	right ^= work;
	left = rotr(left ^ work, 4U);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DES::ProcessBlock(const byte *inBlock, byte *outBlock) const
{
	/*~~~~~~~~~~~~~~~*/
	uint32	l, r, work;
	/*~~~~~~~~~~~~~~~*/

#ifdef IS_LITTLE_ENDIAN
	l = byteReverse(*(uint32 *) inBlock);
	r = byteReverse(*(uint32 *) (inBlock + 4));
#else
	l = *(uint32 *) inBlock;
	r = *(uint32 *) (inBlock + 4);
#endif
	IPERM(l, r);

	/*~~~~~~~~~~~~~~~~~~~~~~*/
	const uint32	*kptr = k;
	unsigned	i = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	try
	{
		for(i = 0; i < 8; i++)
		{
			work = rotr(r, 4U) ^ kptr[4 * i + 0];
			l ^= Spbox[6][(work) & 0x3f] ^
				Spbox[4][(work >> 8) & 0x3f] ^
				Spbox[2][(work >> 16) & 0x3f] ^
				Spbox[0][(work >> 24) & 0x3f];
			work = r ^ kptr[4 * i + 1];
			l ^= Spbox[7][(work) & 0x3f] ^
				Spbox[5][(work >> 8) & 0x3f] ^
				Spbox[3][(work >> 16) & 0x3f] ^
				Spbox[1][(work >> 24) & 0x3f];

			work = rotr(l, 4U) ^ kptr[4 * i + 2];
			r ^= Spbox[6][(work) & 0x3f] ^
				Spbox[4][(work >> 8) & 0x3f] ^
				Spbox[2][(work >> 16) & 0x3f] ^
				Spbox[0][(work >> 24) & 0x3f];
			work = l ^ kptr[4 * i + 3];
			r ^= Spbox[7][(work) & 0x3f] ^
				Spbox[5][(work >> 8) & 0x3f] ^
				Spbox[3][(work >> 16) & 0x3f] ^
				Spbox[1][(work >> 24) & 0x3f];
		}

		if(i == 8)
		{
			FPERM(l, r);
		}
		else
		{
			FPERM(r, l);
		}
	}
	catch(...)
	{
		FPERM(l, r);
	}

#ifdef IS_LITTLE_ENDIAN
	* (uint32 *) outBlock = byteReverse(r);
	*(uint32 *) (outBlock + 4) = byteReverse(l);
#else
	* (uint32 *) outBlock = r;
	*(uint32 *) (outBlock + 4) = l;
#endif
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DESEncryption::SetUserKey(const byte *userKey)
{
	DES::SetUserKey(userKey, ENCRYPTION);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DESDecryption::SetUserKey(const byte *userKey)
{
	DES::SetUserKey(userKey, DECRYPTION);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DES_EDE_Encryption::SetUserKey(const byte *userKey)
{
	e.SetUserKey(userKey, ENCRYPTION);
	d.SetUserKey(userKey + DES::KEYLENGTH, DECRYPTION);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DES_EDE_Encryption::ProcessBlock(byte *inoutBlock) const
{
	e.ProcessBlock(inoutBlock);
	d.ProcessBlock(inoutBlock);
	e.ProcessBlock(inoutBlock);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DES_EDE_Encryption::ProcessBlock(const byte *inBlock, byte *outBlock) const
{
	e.ProcessBlock(inBlock, outBlock);
	d.ProcessBlock(outBlock);
	e.ProcessBlock(outBlock);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DES_EDE_Decryption::SetUserKey(const byte *userKey)
{
	d.SetUserKey(userKey, DECRYPTION);
	e.SetUserKey(userKey + DES::KEYLENGTH, ENCRYPTION);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DES_EDE_Decryption::ProcessBlock(byte *inoutBlock) const
{
	d.ProcessBlock(inoutBlock);
	e.ProcessBlock(inoutBlock);
	d.ProcessBlock(inoutBlock);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void DES_EDE_Decryption::ProcessBlock(const byte *inBlock, byte *outBlock) const
{
	d.ProcessBlock(inBlock, outBlock);
	e.ProcessBlock(outBlock);
	d.ProcessBlock(outBlock);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void TripleDES_Encryption::SetUserKey(const byte *userKey)
{
	e1.SetUserKey(userKey, ENCRYPTION);
	d.SetUserKey(userKey + DES::KEYLENGTH, DECRYPTION);
	e2.SetUserKey(userKey + 2 * DES::KEYLENGTH, ENCRYPTION);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void TripleDES_Encryption::ProcessBlock(byte *inoutBlock) const
{
	e1.ProcessBlock(inoutBlock);
	d.ProcessBlock(inoutBlock);
	e2.ProcessBlock(inoutBlock);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void TripleDES_Encryption::ProcessBlock(const byte *inBlock, byte *outBlock) const
{
	e1.ProcessBlock(inBlock, outBlock);
	d.ProcessBlock(outBlock);
	e2.ProcessBlock(outBlock);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void TripleDES_Decryption::SetUserKey(const byte *userKey)
{
	d1.SetUserKey(userKey + 2 * DES::KEYLENGTH, DECRYPTION);
	e.SetUserKey(userKey + DES::KEYLENGTH, ENCRYPTION);
	d2.SetUserKey(userKey, DECRYPTION);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void TripleDES_Decryption::ProcessBlock(byte *inoutBlock) const
{
	d1.ProcessBlock(inoutBlock);
	e.ProcessBlock(inoutBlock);
	d2.ProcessBlock(inoutBlock);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void TripleDES_Decryption::ProcessBlock(const byte *inBlock, byte *outBlock) const
{
	d1.ProcessBlock(inBlock, outBlock);
	e.ProcessBlock(outBlock);
	d2.ProcessBlock(outBlock);
}
