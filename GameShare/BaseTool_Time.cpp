#include "stdafx.h"
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <memory>
#include "Util.h"
#include "BaseTool.h"

/*
=======================================================================================================================
=======================================================================================================================
*/

TimeSystem::TimeSystem()
{
	/*~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	m_Now = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~*/

	Init();
	__UNGUARD__
}

/*
=======================================================================================================================
=======================================================================================================================
*/
TimeSystem::~TimeSystem()
{
	__GUARD__;
	__UNGUARD__;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
BOOL TimeSystem::Init()
{
	__GUARD__
#if defined(__WINDOWS__)
		m_Begin = GetTickCount();
	m_Now = GetTickCount();
#elif defined(__LINUX__)
		m_Begin = 0;
	m_Now = 0;
	gettimeofday(&_tstart, &tz);
#endif
	Update();

	return TRUE;

	__UNGUARD__ return FALSE;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
TimeSystem &TimeSystem::instance(void)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	static TimeSystem	__timesystem;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	return __timesystem;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
uint32 TimeSystem::TickCount()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	_CurrentTime();
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	return(m_Now - m_Begin);

	__UNGUARD__ return 0;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
uint32 TimeSystem::CurrentDate() const
{
	/*~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	Update();
	uint32		Date;
	/*~~~~~~~~~~~~~~~~~~~~~*/

	ConvertTU(&m_TM, Date);

	return Date;

	__UNGUARD__ return 0;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
void TimeSystem::Update() const
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__ time_t	newtime;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(time(&newtime) != (time_t) (-1))
	{
		m_TimeT = newtime;
	}

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#if defined(__WINDOWS__)
	tm	*ptm = localtime(&m_TimeT);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	m_TM = *ptm;

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#elif defined(__LINUX__)
	tm	newtm;
	tm	*ptm = localtime_r(&m_TimeT, &newtm);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(ptm) m_TM = newtm;
#endif
	__UNGUARD__
}

/*
=======================================================================================================================
=======================================================================================================================
*/
//·µ»Øµ¥Î»: Ãë(second)
uint32 TimeSystem::GetCTime() const
{
	/*~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	Update();
	/*~~~~~~~~~~~~~~~~~~~~~*/

	__UNGUARD__ return(uint32) m_TimeT;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
uint32 TimeSystem::RefixANSITimeByTimeZone(uint32 uTime) const
{
#if defined(__WINDOWS__)
	uTime -= _timezone;
#elif defined(__LINUX__)
	uTime -= __timezone;
#endif
	return uTime;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
uint32 TimeSystem::Time2DWORD() const
{
	/*~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	Update();
	uint32		uRet = 0;
	/*~~~~~~~~~~~~~~~~~~~~~*/

	uRet += year();
	uRet -= 2000;
	uRet = uRet * 100;

	uRet += month() + 1;
	uRet = uRet * 100;

	uRet += day();
	uRet = uRet * 100;

	uRet += hour();
	uRet = uRet * 100;

	uRet += minute();

	return uRet;

	__UNGUARD__ return 0;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
uint32 TimeSystem::DiffTime(uint32 Date1, uint32 Date2) const
{
	/*~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__ tm	S_D1, S_D2;
	/*~~~~~~~~~~~~~~~~~~~~~~~*/

	ConvertUT(Date1, &S_D1);
	ConvertUT(Date2, &S_D2);

	/*~~~~~~~~~~~*/
	time_t	t1, t2;
	/*~~~~~~~~~~~*/

	t1 = mktime(&S_D1);
	t2 = mktime(&S_D2);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	uint32	dif = (uint32) (difftime(t2, t1) * 1000);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	return dif;

	__UNGUARD__ return 0;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
void TimeSystem::ConvertUT(uint32 Date, tm *TM) const
{
	/*~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	KCheck(TM);
	/*~~~~~~~~~~~~~~~~~~~~~~~*/

	memset(TM, 0, sizeof(tm));
	TM->tm_year = (Date >> 24) & 0xff;
	TM->tm_mon = (Date >> 20) & 0xf;
	TM->tm_mday = (Date >> 15) & 0x1f;
	TM->tm_hour = (Date >> 10) & 0x1f;
	TM->tm_min = (Date >> 4) & 0x3f;
	TM->tm_sec = (Date) & 0xf;

	__UNGUARD__
}

/*
=======================================================================================================================
=======================================================================================================================
*/
void TimeSystem::ConvertTU(tm *TM, uint32 &Date) const
{
	/*~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	KCheck(TM);
	/*~~~~~~~~~~~~~~~~~~~~~~~*/

	Date = 0;
	Date += ((TM->tm_year) & 0xff) << 24;
	Date += ((TM->tm_mon) & 0xf) << 20;
	Date += ((TM->tm_mday) & 0x1f) << 15;
	Date += ((TM->tm_hour) & 0x1f) << 10;
	Date += ((TM->tm_min) & 0x3f) << 4;
	Date += ((TM->tm_sec) & 0xf);
	__UNGUARD__
}

/*
=======================================================================================================================
=======================================================================================================================
*/
uint32 TimeSystem::GetDayTime()
{
	/*~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	Update();
	/*~~~~~~~~~~~~~~~~~~~~~*/

	return(m_TM.tm_year - 100) * 1000 + m_TM.tm_yday;

	__UNGUARD__ return 0;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
void TimeSystem::_CurrentTime()
{
	__GUARD__;

#if defined(__WINDOWS__)
	m_Now = GetTickCount();

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
#elif defined(__LINUX__)
	int32	ret = gettimeofday(&_tend, &tz);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(ret != -1)
	{
		/*~~~~~~~~~~~*/
		float64 t1, t2;
		/*~~~~~~~~~~~*/

		t1 = (float64) _tstart.tv_sec * 1000 + (float64) _tstart.tv_usec / 1000;
		t2 = (float64) _tend.tv_sec * 1000 + (float64) _tend.tv_usec / 1000;
		m_Now = (uint32) (t2 - t1);
	}
#endif
	__UNGUARD__;
}