// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_base_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_base_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_base_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_base_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_base_2eproto;
namespace base {
class ExtraBagInfo;
struct ExtraBagInfoDefaultTypeInternal;
extern ExtraBagInfoDefaultTypeInternal _ExtraBagInfo_default_instance_;
class Flag64;
struct Flag64DefaultTypeInternal;
extern Flag64DefaultTypeInternal _Flag64_default_instance_;
class GLPos;
struct GLPosDefaultTypeInternal;
extern GLPosDefaultTypeInternal _GLPos_default_instance_;
class HorseSkill;
struct HorseSkillDefaultTypeInternal;
extern HorseSkillDefaultTypeInternal _HorseSkill_default_instance_;
class ImpactStruct;
struct ImpactStructDefaultTypeInternal;
extern ImpactStructDefaultTypeInternal _ImpactStruct_default_instance_;
class PlayerAbility;
struct PlayerAbilityDefaultTypeInternal;
extern PlayerAbilityDefaultTypeInternal _PlayerAbility_default_instance_;
class PlayerSpell;
struct PlayerSpellDefaultTypeInternal;
extern PlayerSpellDefaultTypeInternal _PlayerSpell_default_instance_;
class Player_Setting;
struct Player_SettingDefaultTypeInternal;
extern Player_SettingDefaultTypeInternal _Player_Setting_default_instance_;
class Quest;
struct QuestDefaultTypeInternal;
extern QuestDefaultTypeInternal _Quest_default_instance_;
class SArchiveLoader_Quest;
struct SArchiveLoader_QuestDefaultTypeInternal;
extern SArchiveLoader_QuestDefaultTypeInternal _SArchiveLoader_Quest_default_instance_;
class SCampData;
struct SCampDataDefaultTypeInternal;
extern SCampDataDefaultTypeInternal _SCampData_default_instance_;
class SEquipInfo;
struct SEquipInfoDefaultTypeInternal;
extern SEquipInfoDefaultTypeInternal _SEquipInfo_default_instance_;
class SHorseGuid;
struct SHorseGuidDefaultTypeInternal;
extern SHorseGuidDefaultTypeInternal _SHorseGuid_default_instance_;
class SItem;
struct SItemDefaultTypeInternal;
extern SItemDefaultTypeInternal _SItem_default_instance_;
class SItemConstInfo;
struct SItemConstInfoDefaultTypeInternal;
extern SItemConstInfoDefaultTypeInternal _SItemConstInfo_default_instance_;
class SItemGemInfo;
struct SItemGemInfoDefaultTypeInternal;
extern SItemGemInfoDefaultTypeInternal _SItemGemInfo_default_instance_;
class SItemGuid;
struct SItemGuidDefaultTypeInternal;
extern SItemGuidDefaultTypeInternal _SItemGuid_default_instance_;
class SItemProperty;
struct SItemPropertyDefaultTypeInternal;
extern SItemPropertyDefaultTypeInternal _SItemProperty_default_instance_;
class SItemValue;
struct SItemValueDefaultTypeInternal;
extern SItemValueDefaultTypeInternal _SItemValue_default_instance_;
class SMedicInfo;
struct SMedicInfoDefaultTypeInternal;
extern SMedicInfoDefaultTypeInternal _SMedicInfo_default_instance_;
class SQuestBonus;
struct SQuestBonusDefaultTypeInternal;
extern SQuestBonusDefaultTypeInternal _SQuestBonus_default_instance_;
class SQuestBonusItem;
struct SQuestBonusItemDefaultTypeInternal;
extern SQuestBonusItemDefaultTypeInternal _SQuestBonusItem_default_instance_;
class SXParam;
struct SXParamDefaultTypeInternal;
extern SXParamDefaultTypeInternal _SXParam_default_instance_;
class ScriptParam_QuestInfo;
struct ScriptParam_QuestInfoDefaultTypeInternal;
extern ScriptParam_QuestInfoDefaultTypeInternal _ScriptParam_QuestInfo_default_instance_;
}  // namespace base
PROTOBUF_NAMESPACE_OPEN
template<> ::base::ExtraBagInfo* Arena::CreateMaybeMessage<::base::ExtraBagInfo>(Arena*);
template<> ::base::Flag64* Arena::CreateMaybeMessage<::base::Flag64>(Arena*);
template<> ::base::GLPos* Arena::CreateMaybeMessage<::base::GLPos>(Arena*);
template<> ::base::HorseSkill* Arena::CreateMaybeMessage<::base::HorseSkill>(Arena*);
template<> ::base::ImpactStruct* Arena::CreateMaybeMessage<::base::ImpactStruct>(Arena*);
template<> ::base::PlayerAbility* Arena::CreateMaybeMessage<::base::PlayerAbility>(Arena*);
template<> ::base::PlayerSpell* Arena::CreateMaybeMessage<::base::PlayerSpell>(Arena*);
template<> ::base::Player_Setting* Arena::CreateMaybeMessage<::base::Player_Setting>(Arena*);
template<> ::base::Quest* Arena::CreateMaybeMessage<::base::Quest>(Arena*);
template<> ::base::SArchiveLoader_Quest* Arena::CreateMaybeMessage<::base::SArchiveLoader_Quest>(Arena*);
template<> ::base::SCampData* Arena::CreateMaybeMessage<::base::SCampData>(Arena*);
template<> ::base::SEquipInfo* Arena::CreateMaybeMessage<::base::SEquipInfo>(Arena*);
template<> ::base::SHorseGuid* Arena::CreateMaybeMessage<::base::SHorseGuid>(Arena*);
template<> ::base::SItem* Arena::CreateMaybeMessage<::base::SItem>(Arena*);
template<> ::base::SItemConstInfo* Arena::CreateMaybeMessage<::base::SItemConstInfo>(Arena*);
template<> ::base::SItemGemInfo* Arena::CreateMaybeMessage<::base::SItemGemInfo>(Arena*);
template<> ::base::SItemGuid* Arena::CreateMaybeMessage<::base::SItemGuid>(Arena*);
template<> ::base::SItemProperty* Arena::CreateMaybeMessage<::base::SItemProperty>(Arena*);
template<> ::base::SItemValue* Arena::CreateMaybeMessage<::base::SItemValue>(Arena*);
template<> ::base::SMedicInfo* Arena::CreateMaybeMessage<::base::SMedicInfo>(Arena*);
template<> ::base::SQuestBonus* Arena::CreateMaybeMessage<::base::SQuestBonus>(Arena*);
template<> ::base::SQuestBonusItem* Arena::CreateMaybeMessage<::base::SQuestBonusItem>(Arena*);
template<> ::base::SXParam* Arena::CreateMaybeMessage<::base::SXParam>(Arena*);
template<> ::base::ScriptParam_QuestInfo* Arena::CreateMaybeMessage<::base::ScriptParam_QuestInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace base {

// ===================================================================

class Quest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.Quest) */ {
 public:
  inline Quest() : Quest(nullptr) {}
  ~Quest() override;
  explicit PROTOBUF_CONSTEXPR Quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Quest(const Quest& from);
  Quest(Quest&& from) noexcept
    : Quest() {
    *this = ::std::move(from);
  }

  inline Quest& operator=(const Quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Quest& operator=(Quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Quest* internal_default_instance() {
    return reinterpret_cast<const Quest*>(
               &_Quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Quest& a, Quest& b) {
    a.Swap(&b);
  }
  inline void Swap(Quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Quest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Quest& from) {
    Quest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Quest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.Quest";
  }
  protected:
  explicit Quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAParamFieldNumber = 4,
    kAfParamFieldNumber = 5,
    kAnParamFieldNumber = 6,
    kAbParamFieldNumber = 7,
    kQuestIdFieldNumber = 1,
    kScriptIdFieldNumber = 2,
    kYFlagFieldNumber = 3,
  };
  // repeated uint32 a_param = 4;
  int a_param_size() const;
  private:
  int _internal_a_param_size() const;
  public:
  void clear_a_param();
  private:
  uint32_t _internal_a_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_a_param() const;
  void _internal_add_a_param(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_a_param();
  public:
  uint32_t a_param(int index) const;
  void set_a_param(int index, uint32_t value);
  void add_a_param(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      a_param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_a_param();

  // repeated float af_param = 5;
  int af_param_size() const;
  private:
  int _internal_af_param_size() const;
  public:
  void clear_af_param();
  private:
  float _internal_af_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_af_param() const;
  void _internal_add_af_param(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_af_param();
  public:
  float af_param(int index) const;
  void set_af_param(int index, float value);
  void add_af_param(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      af_param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_af_param();

  // repeated int32 an_param = 6;
  int an_param_size() const;
  private:
  int _internal_an_param_size() const;
  public:
  void clear_an_param();
  private:
  int32_t _internal_an_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_an_param() const;
  void _internal_add_an_param(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_an_param();
  public:
  int32_t an_param(int index) const;
  void set_an_param(int index, int32_t value);
  void add_an_param(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      an_param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_an_param();

  // repeated int32 ab_param = 7;
  int ab_param_size() const;
  private:
  int _internal_ab_param_size() const;
  public:
  void clear_ab_param();
  private:
  int32_t _internal_ab_param(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_ab_param() const;
  void _internal_add_ab_param(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_ab_param();
  public:
  int32_t ab_param(int index) const;
  void set_ab_param(int index, int32_t value);
  void add_ab_param(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      ab_param() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_ab_param();

  // int32 quest_id = 1;
  void clear_quest_id();
  int32_t quest_id() const;
  void set_quest_id(int32_t value);
  private:
  int32_t _internal_quest_id() const;
  void _internal_set_quest_id(int32_t value);
  public:

  // int32 script_id = 2;
  void clear_script_id();
  int32_t script_id() const;
  void set_script_id(int32_t value);
  private:
  int32_t _internal_script_id() const;
  void _internal_set_script_id(int32_t value);
  public:

  // int32 y_flag = 3;
  void clear_y_flag();
  int32_t y_flag() const;
  void set_y_flag(int32_t value);
  private:
  int32_t _internal_y_flag() const;
  void _internal_set_y_flag(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.Quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > a_param_;
    mutable std::atomic<int> _a_param_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > af_param_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > an_param_;
    mutable std::atomic<int> _an_param_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > ab_param_;
    mutable std::atomic<int> _ab_param_cached_byte_size_;
    int32_t quest_id_;
    int32_t script_id_;
    int32_t y_flag_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Flag64 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.Flag64) */ {
 public:
  inline Flag64() : Flag64(nullptr) {}
  ~Flag64() override;
  explicit PROTOBUF_CONSTEXPR Flag64(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Flag64(const Flag64& from);
  Flag64(Flag64&& from) noexcept
    : Flag64() {
    *this = ::std::move(from);
  }

  inline Flag64& operator=(const Flag64& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flag64& operator=(Flag64&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Flag64& default_instance() {
    return *internal_default_instance();
  }
  static inline const Flag64* internal_default_instance() {
    return reinterpret_cast<const Flag64*>(
               &_Flag64_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Flag64& a, Flag64& b) {
    a.Swap(&b);
  }
  inline void Swap(Flag64* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flag64* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Flag64* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Flag64>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Flag64& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Flag64& from) {
    Flag64::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flag64* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.Flag64";
  }
  protected:
  explicit Flag64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLowFlagsFieldNumber = 1,
    kHighFlagsFieldNumber = 2,
  };
  // uint32 low_flags = 1;
  void clear_low_flags();
  uint32_t low_flags() const;
  void set_low_flags(uint32_t value);
  private:
  uint32_t _internal_low_flags() const;
  void _internal_set_low_flags(uint32_t value);
  public:

  // uint32 high_flags = 2;
  void clear_high_flags();
  uint32_t high_flags() const;
  void set_high_flags(uint32_t value);
  private:
  uint32_t _internal_high_flags() const;
  void _internal_set_high_flags(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.Flag64)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t low_flags_;
    uint32_t high_flags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SCampData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SCampData) */ {
 public:
  inline SCampData() : SCampData(nullptr) {}
  ~SCampData() override;
  explicit PROTOBUF_CONSTEXPR SCampData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SCampData(const SCampData& from);
  SCampData(SCampData&& from) noexcept
    : SCampData() {
    *this = ::std::move(from);
  }

  inline SCampData& operator=(const SCampData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SCampData& operator=(SCampData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SCampData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SCampData* internal_default_instance() {
    return reinterpret_cast<const SCampData*>(
               &_SCampData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SCampData& a, SCampData& b) {
    a.Swap(&b);
  }
  inline void Swap(SCampData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SCampData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SCampData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SCampData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SCampData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SCampData& from) {
    SCampData::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SCampData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SCampData";
  }
  protected:
  explicit SCampData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCampIdFieldNumber = 1,
    kPkModeFieldNumber = 2,
    kReserve1FieldNumber = 3,
    kReserve2FieldNumber = 4,
  };
  // int32 camp_id = 1;
  void clear_camp_id();
  int32_t camp_id() const;
  void set_camp_id(int32_t value);
  private:
  int32_t _internal_camp_id() const;
  void _internal_set_camp_id(int32_t value);
  public:

  // int32 pk_mode = 2;
  void clear_pk_mode();
  int32_t pk_mode() const;
  void set_pk_mode(int32_t value);
  private:
  int32_t _internal_pk_mode() const;
  void _internal_set_pk_mode(int32_t value);
  public:

  // int32 reserve1 = 3;
  void clear_reserve1();
  int32_t reserve1() const;
  void set_reserve1(int32_t value);
  private:
  int32_t _internal_reserve1() const;
  void _internal_set_reserve1(int32_t value);
  public:

  // int32 reserve2 = 4;
  void clear_reserve2();
  int32_t reserve2() const;
  void set_reserve2(int32_t value);
  private:
  int32_t _internal_reserve2() const;
  void _internal_set_reserve2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SCampData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t camp_id_;
    int32_t pk_mode_;
    int32_t reserve1_;
    int32_t reserve2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SHorseGuid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SHorseGuid) */ {
 public:
  inline SHorseGuid() : SHorseGuid(nullptr) {}
  ~SHorseGuid() override;
  explicit PROTOBUF_CONSTEXPR SHorseGuid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SHorseGuid(const SHorseGuid& from);
  SHorseGuid(SHorseGuid&& from) noexcept
    : SHorseGuid() {
    *this = ::std::move(from);
  }

  inline SHorseGuid& operator=(const SHorseGuid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SHorseGuid& operator=(SHorseGuid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SHorseGuid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SHorseGuid* internal_default_instance() {
    return reinterpret_cast<const SHorseGuid*>(
               &_SHorseGuid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SHorseGuid& a, SHorseGuid& b) {
    a.Swap(&b);
  }
  inline void Swap(SHorseGuid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SHorseGuid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SHorseGuid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SHorseGuid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SHorseGuid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SHorseGuid& from) {
    SHorseGuid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SHorseGuid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SHorseGuid";
  }
  protected:
  explicit SHorseGuid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHighSectionFieldNumber = 1,
    kLowSectionFieldNumber = 2,
  };
  // uint32 high_section = 1;
  void clear_high_section();
  uint32_t high_section() const;
  void set_high_section(uint32_t value);
  private:
  uint32_t _internal_high_section() const;
  void _internal_set_high_section(uint32_t value);
  public:

  // uint32 low_section = 2;
  void clear_low_section();
  uint32_t low_section() const;
  void set_low_section(uint32_t value);
  private:
  uint32_t _internal_low_section() const;
  void _internal_set_low_section(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SHorseGuid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t high_section_;
    uint32_t low_section_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class ImpactStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ImpactStruct) */ {
 public:
  inline ImpactStruct() : ImpactStruct(nullptr) {}
  ~ImpactStruct() override;
  explicit PROTOBUF_CONSTEXPR ImpactStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ImpactStruct(const ImpactStruct& from);
  ImpactStruct(ImpactStruct&& from) noexcept
    : ImpactStruct() {
    *this = ::std::move(from);
  }

  inline ImpactStruct& operator=(const ImpactStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline ImpactStruct& operator=(ImpactStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ImpactStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const ImpactStruct* internal_default_instance() {
    return reinterpret_cast<const ImpactStruct*>(
               &_ImpactStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ImpactStruct& a, ImpactStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(ImpactStruct* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ImpactStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ImpactStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ImpactStruct>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ImpactStruct& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ImpactStruct& from) {
    ImpactStruct::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImpactStruct* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.ImpactStruct";
  }
  protected:
  explicit ImpactStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
    kSnFieldNumber = 2,
  };
  // int32 buff_id = 1;
  void clear_buff_id();
  int32_t buff_id() const;
  void set_buff_id(int32_t value);
  private:
  int32_t _internal_buff_id() const;
  void _internal_set_buff_id(int32_t value);
  public:

  // uint32 sn = 2;
  void clear_sn();
  uint32_t sn() const;
  void set_sn(uint32_t value);
  private:
  uint32_t _internal_sn() const;
  void _internal_set_sn(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.ImpactStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t buff_id_;
    uint32_t sn_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class GLPos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.GLPos) */ {
 public:
  inline GLPos() : GLPos(nullptr) {}
  ~GLPos() override;
  explicit PROTOBUF_CONSTEXPR GLPos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GLPos(const GLPos& from);
  GLPos(GLPos&& from) noexcept
    : GLPos() {
    *this = ::std::move(from);
  }

  inline GLPos& operator=(const GLPos& from) {
    CopyFrom(from);
    return *this;
  }
  inline GLPos& operator=(GLPos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GLPos& default_instance() {
    return *internal_default_instance();
  }
  static inline const GLPos* internal_default_instance() {
    return reinterpret_cast<const GLPos*>(
               &_GLPos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GLPos& a, GLPos& b) {
    a.Swap(&b);
  }
  inline void Swap(GLPos* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GLPos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GLPos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GLPos>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GLPos& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GLPos& from) {
    GLPos::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GLPos* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.GLPos";
  }
  protected:
  explicit GLPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFxFieldNumber = 1,
    kFzFieldNumber = 2,
  };
  // float fx = 1;
  void clear_fx();
  float fx() const;
  void set_fx(float value);
  private:
  float _internal_fx() const;
  void _internal_set_fx(float value);
  public:

  // float fz = 2;
  void clear_fz();
  float fz() const;
  void set_fz(float value);
  private:
  float _internal_fz() const;
  void _internal_set_fz(float value);
  public:

  // @@protoc_insertion_point(class_scope:base.GLPos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    float fx_;
    float fz_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SXParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SXParam) */ {
 public:
  inline SXParam() : SXParam(nullptr) {}
  ~SXParam() override;
  explicit PROTOBUF_CONSTEXPR SXParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SXParam(const SXParam& from);
  SXParam(SXParam&& from) noexcept
    : SXParam() {
    *this = ::std::move(from);
  }

  inline SXParam& operator=(const SXParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline SXParam& operator=(SXParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SXParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const SXParam* internal_default_instance() {
    return reinterpret_cast<const SXParam*>(
               &_SXParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(SXParam& a, SXParam& b) {
    a.Swap(&b);
  }
  inline void Swap(SXParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SXParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SXParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SXParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SXParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SXParam& from) {
    SXParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SXParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SXParam";
  }
  protected:
  explicit SXParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntValueFieldNumber = 1,
    kStrOffsetFieldNumber = 2,
    kStrValueFieldNumber = 3,
  };
  // repeated int32 int_value = 1;
  int int_value_size() const;
  private:
  int _internal_int_value_size() const;
  public:
  void clear_int_value();
  private:
  int32_t _internal_int_value(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_int_value() const;
  void _internal_add_int_value(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_int_value();
  public:
  int32_t int_value(int index) const;
  void set_int_value(int index, int32_t value);
  void add_int_value(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      int_value() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_int_value();

  // repeated int32 str_offset = 2;
  int str_offset_size() const;
  private:
  int _internal_str_offset_size() const;
  public:
  void clear_str_offset();
  private:
  int32_t _internal_str_offset(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_str_offset() const;
  void _internal_add_str_offset(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_str_offset();
  public:
  int32_t str_offset(int index) const;
  void set_str_offset(int index, int32_t value);
  void add_str_offset(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      str_offset() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_str_offset();

  // string str_value = 3;
  void clear_str_value();
  const std::string& str_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str_value();
  PROTOBUF_NODISCARD std::string* release_str_value();
  void set_allocated_str_value(std::string* str_value);
  private:
  const std::string& _internal_str_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str_value(const std::string& value);
  std::string* _internal_mutable_str_value();
  public:

  // @@protoc_insertion_point(class_scope:base.SXParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > int_value_;
    mutable std::atomic<int> _int_value_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > str_offset_;
    mutable std::atomic<int> _str_offset_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class PlayerAbility final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.PlayerAbility) */ {
 public:
  inline PlayerAbility() : PlayerAbility(nullptr) {}
  ~PlayerAbility() override;
  explicit PROTOBUF_CONSTEXPR PlayerAbility(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerAbility(const PlayerAbility& from);
  PlayerAbility(PlayerAbility&& from) noexcept
    : PlayerAbility() {
    *this = ::std::move(from);
  }

  inline PlayerAbility& operator=(const PlayerAbility& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerAbility& operator=(PlayerAbility&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerAbility& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerAbility* internal_default_instance() {
    return reinterpret_cast<const PlayerAbility*>(
               &_PlayerAbility_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PlayerAbility& a, PlayerAbility& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerAbility* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerAbility* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerAbility* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerAbility>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerAbility& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerAbility& from) {
    PlayerAbility::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerAbility* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.PlayerAbility";
  }
  protected:
  explicit PlayerAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelFieldNumber = 1,
    kExpFieldNumber = 2,
  };
  // uint32 level = 1;
  void clear_level();
  uint32_t level() const;
  void set_level(uint32_t value);
  private:
  uint32_t _internal_level() const;
  void _internal_set_level(uint32_t value);
  public:

  // uint32 exp = 2;
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.PlayerAbility)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t level_;
    uint32_t exp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class HorseSkill final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.HorseSkill) */ {
 public:
  inline HorseSkill() : HorseSkill(nullptr) {}
  ~HorseSkill() override;
  explicit PROTOBUF_CONSTEXPR HorseSkill(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HorseSkill(const HorseSkill& from);
  HorseSkill(HorseSkill&& from) noexcept
    : HorseSkill() {
    *this = ::std::move(from);
  }

  inline HorseSkill& operator=(const HorseSkill& from) {
    CopyFrom(from);
    return *this;
  }
  inline HorseSkill& operator=(HorseSkill&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HorseSkill& default_instance() {
    return *internal_default_instance();
  }
  static inline const HorseSkill* internal_default_instance() {
    return reinterpret_cast<const HorseSkill*>(
               &_HorseSkill_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(HorseSkill& a, HorseSkill& b) {
    a.Swap(&b);
  }
  inline void Swap(HorseSkill* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HorseSkill* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HorseSkill* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HorseSkill>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HorseSkill& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HorseSkill& from) {
    HorseSkill::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorseSkill* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.HorseSkill";
  }
  protected:
  explicit HorseSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kCanUseFieldNumber = 2,
  };
  // int32 skill_id = 1;
  void clear_skill_id();
  int32_t skill_id() const;
  void set_skill_id(int32_t value);
  private:
  int32_t _internal_skill_id() const;
  void _internal_set_skill_id(int32_t value);
  public:

  // bool can_use = 2;
  void clear_can_use();
  bool can_use() const;
  void set_can_use(bool value);
  private:
  bool _internal_can_use() const;
  void _internal_set_can_use(bool value);
  public:

  // @@protoc_insertion_point(class_scope:base.HorseSkill)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t skill_id_;
    bool can_use_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SItemGuid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SItemGuid) */ {
 public:
  inline SItemGuid() : SItemGuid(nullptr) {}
  ~SItemGuid() override;
  explicit PROTOBUF_CONSTEXPR SItemGuid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SItemGuid(const SItemGuid& from);
  SItemGuid(SItemGuid&& from) noexcept
    : SItemGuid() {
    *this = ::std::move(from);
  }

  inline SItemGuid& operator=(const SItemGuid& from) {
    CopyFrom(from);
    return *this;
  }
  inline SItemGuid& operator=(SItemGuid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SItemGuid& default_instance() {
    return *internal_default_instance();
  }
  static inline const SItemGuid* internal_default_instance() {
    return reinterpret_cast<const SItemGuid*>(
               &_SItemGuid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(SItemGuid& a, SItemGuid& b) {
    a.Swap(&b);
  }
  inline void Swap(SItemGuid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SItemGuid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SItemGuid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SItemGuid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SItemGuid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SItemGuid& from) {
    SItemGuid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SItemGuid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SItemGuid";
  }
  protected:
  explicit SItemGuid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWorldFieldNumber = 1,
    kServerFieldNumber = 2,
    kSerialFieldNumber = 3,
  };
  // int32 world = 1;
  void clear_world();
  int32_t world() const;
  void set_world(int32_t value);
  private:
  int32_t _internal_world() const;
  void _internal_set_world(int32_t value);
  public:

  // int32 server = 2;
  void clear_server();
  int32_t server() const;
  void set_server(int32_t value);
  private:
  int32_t _internal_server() const;
  void _internal_set_server(int32_t value);
  public:

  // int32 serial = 3;
  void clear_serial();
  int32_t serial() const;
  void set_serial(int32_t value);
  private:
  int32_t _internal_serial() const;
  void _internal_set_serial(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SItemGuid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t world_;
    int32_t server_;
    int32_t serial_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SItemGemInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SItemGemInfo) */ {
 public:
  inline SItemGemInfo() : SItemGemInfo(nullptr) {}
  ~SItemGemInfo() override;
  explicit PROTOBUF_CONSTEXPR SItemGemInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SItemGemInfo(const SItemGemInfo& from);
  SItemGemInfo(SItemGemInfo&& from) noexcept
    : SItemGemInfo() {
    *this = ::std::move(from);
  }

  inline SItemGemInfo& operator=(const SItemGemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SItemGemInfo& operator=(SItemGemInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SItemGemInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SItemGemInfo* internal_default_instance() {
    return reinterpret_cast<const SItemGemInfo*>(
               &_SItemGemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SItemGemInfo& a, SItemGemInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SItemGemInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SItemGemInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SItemGemInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SItemGemInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SItemGemInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SItemGemInfo& from) {
    SItemGemInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SItemGemInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SItemGemInfo";
  }
  protected:
  explicit SItemGemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGemIndexFieldNumber = 1,
  };
  // uint32 gem_index = 1;
  void clear_gem_index();
  uint32_t gem_index() const;
  void set_gem_index(uint32_t value);
  private:
  uint32_t _internal_gem_index() const;
  void _internal_set_gem_index(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SItemGemInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t gem_index_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SItemValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SItemValue) */ {
 public:
  inline SItemValue() : SItemValue(nullptr) {}
  ~SItemValue() override;
  explicit PROTOBUF_CONSTEXPR SItemValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SItemValue(const SItemValue& from);
  SItemValue(SItemValue&& from) noexcept
    : SItemValue() {
    *this = ::std::move(from);
  }

  inline SItemValue& operator=(const SItemValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline SItemValue& operator=(SItemValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SItemValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const SItemValue* internal_default_instance() {
    return reinterpret_cast<const SItemValue*>(
               &_SItemValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(SItemValue& a, SItemValue& b) {
    a.Swap(&b);
  }
  inline void Swap(SItemValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SItemValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SItemValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SItemValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SItemValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SItemValue& from) {
    SItemValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SItemValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SItemValue";
  }
  protected:
  explicit SItemValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SItemValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SItemProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SItemProperty) */ {
 public:
  inline SItemProperty() : SItemProperty(nullptr) {}
  ~SItemProperty() override;
  explicit PROTOBUF_CONSTEXPR SItemProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SItemProperty(const SItemProperty& from);
  SItemProperty(SItemProperty&& from) noexcept
    : SItemProperty() {
    *this = ::std::move(from);
  }

  inline SItemProperty& operator=(const SItemProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline SItemProperty& operator=(SItemProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SItemProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const SItemProperty* internal_default_instance() {
    return reinterpret_cast<const SItemProperty*>(
               &_SItemProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(SItemProperty& a, SItemProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(SItemProperty* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SItemProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SItemProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SItemProperty>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SItemProperty& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SItemProperty& from) {
    SItemProperty::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SItemProperty* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SItemProperty";
  }
  protected:
  explicit SItemProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemValueFieldNumber = 3,
    kAttrTypeFieldNumber = 1,
    kIntensifyCountFieldNumber = 2,
  };
  // .base.SItemValue item_value = 3;
  bool has_item_value() const;
  private:
  bool _internal_has_item_value() const;
  public:
  void clear_item_value();
  const ::base::SItemValue& item_value() const;
  PROTOBUF_NODISCARD ::base::SItemValue* release_item_value();
  ::base::SItemValue* mutable_item_value();
  void set_allocated_item_value(::base::SItemValue* item_value);
  private:
  const ::base::SItemValue& _internal_item_value() const;
  ::base::SItemValue* _internal_mutable_item_value();
  public:
  void unsafe_arena_set_allocated_item_value(
      ::base::SItemValue* item_value);
  ::base::SItemValue* unsafe_arena_release_item_value();

  // int32 attr_type = 1;
  void clear_attr_type();
  int32_t attr_type() const;
  void set_attr_type(int32_t value);
  private:
  int32_t _internal_attr_type() const;
  void _internal_set_attr_type(int32_t value);
  public:

  // int32 intensify_count = 2;
  void clear_intensify_count();
  int32_t intensify_count() const;
  void set_intensify_count(int32_t value);
  private:
  int32_t _internal_intensify_count() const;
  void _internal_set_intensify_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SItemProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::base::SItemValue* item_value_;
    int32_t attr_type_;
    int32_t intensify_count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SItemConstInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SItemConstInfo) */ {
 public:
  inline SItemConstInfo() : SItemConstInfo(nullptr) {}
  ~SItemConstInfo() override;
  explicit PROTOBUF_CONSTEXPR SItemConstInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SItemConstInfo(const SItemConstInfo& from);
  SItemConstInfo(SItemConstInfo&& from) noexcept
    : SItemConstInfo() {
    *this = ::std::move(from);
  }

  inline SItemConstInfo& operator=(const SItemConstInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SItemConstInfo& operator=(SItemConstInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SItemConstInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SItemConstInfo* internal_default_instance() {
    return reinterpret_cast<const SItemConstInfo*>(
               &_SItemConstInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SItemConstInfo& a, SItemConstInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SItemConstInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SItemConstInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SItemConstInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SItemConstInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SItemConstInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SItemConstInfo& from) {
    SItemConstInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SItemConstInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SItemConstInfo";
  }
  protected:
  explicit SItemConstInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConstAttrsFieldNumber = 2,
    kConstIdFieldNumber = 1,
  };
  // repeated .base.SItemProperty const_attrs = 2;
  int const_attrs_size() const;
  private:
  int _internal_const_attrs_size() const;
  public:
  void clear_const_attrs();
  ::base::SItemProperty* mutable_const_attrs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty >*
      mutable_const_attrs();
  private:
  const ::base::SItemProperty& _internal_const_attrs(int index) const;
  ::base::SItemProperty* _internal_add_const_attrs();
  public:
  const ::base::SItemProperty& const_attrs(int index) const;
  ::base::SItemProperty* add_const_attrs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty >&
      const_attrs() const;

  // int32 const_id = 1;
  void clear_const_id();
  int32_t const_id() const;
  void set_const_id(int32_t value);
  private:
  int32_t _internal_const_id() const;
  void _internal_set_const_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SItemConstInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty > const_attrs_;
    int32_t const_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SEquipInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SEquipInfo) */ {
 public:
  inline SEquipInfo() : SEquipInfo(nullptr) {}
  ~SEquipInfo() override;
  explicit PROTOBUF_CONSTEXPR SEquipInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SEquipInfo(const SEquipInfo& from);
  SEquipInfo(SEquipInfo&& from) noexcept
    : SEquipInfo() {
    *this = ::std::move(from);
  }

  inline SEquipInfo& operator=(const SEquipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SEquipInfo& operator=(SEquipInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SEquipInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SEquipInfo* internal_default_instance() {
    return reinterpret_cast<const SEquipInfo*>(
               &_SEquipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SEquipInfo& a, SEquipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SEquipInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SEquipInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SEquipInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SEquipInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SEquipInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SEquipInfo& from) {
    SEquipInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SEquipInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SEquipInfo";
  }
  protected:
  explicit SEquipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGemsFieldNumber = 11,
    kPropertysFieldNumber = 12,
    kConstsFieldNumber = 15,
    kEquipLevelFieldNumber = 1,
    kBindFieldNumber = 2,
    kPaiTypeFieldNumber = 3,
    kEquipTypeFieldNumber = 4,
    kEquipScoreFieldNumber = 5,
    kLevelFieldNumber = 6,
    kCurrMaxDurFieldNumber = 7,
    kCurrDurPointFieldNumber = 8,
    kCurrDamagePointFieldNumber = 9,
    kCurrGemHoleFieldNumber = 10,
    kLockFieldNumber = 13,
    kLockTimeFieldNumber = 14,
  };
  // repeated .base.SItemGemInfo gems = 11;
  int gems_size() const;
  private:
  int _internal_gems_size() const;
  public:
  void clear_gems();
  ::base::SItemGemInfo* mutable_gems(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemGemInfo >*
      mutable_gems();
  private:
  const ::base::SItemGemInfo& _internal_gems(int index) const;
  ::base::SItemGemInfo* _internal_add_gems();
  public:
  const ::base::SItemGemInfo& gems(int index) const;
  ::base::SItemGemInfo* add_gems();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemGemInfo >&
      gems() const;

  // repeated .base.SItemProperty propertys = 12;
  int propertys_size() const;
  private:
  int _internal_propertys_size() const;
  public:
  void clear_propertys();
  ::base::SItemProperty* mutable_propertys(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty >*
      mutable_propertys();
  private:
  const ::base::SItemProperty& _internal_propertys(int index) const;
  ::base::SItemProperty* _internal_add_propertys();
  public:
  const ::base::SItemProperty& propertys(int index) const;
  ::base::SItemProperty* add_propertys();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty >&
      propertys() const;

  // repeated .base.SItemConstInfo consts = 15;
  int consts_size() const;
  private:
  int _internal_consts_size() const;
  public:
  void clear_consts();
  ::base::SItemConstInfo* mutable_consts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemConstInfo >*
      mutable_consts();
  private:
  const ::base::SItemConstInfo& _internal_consts(int index) const;
  ::base::SItemConstInfo* _internal_add_consts();
  public:
  const ::base::SItemConstInfo& consts(int index) const;
  ::base::SItemConstInfo* add_consts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemConstInfo >&
      consts() const;

  // int32 equip_level = 1;
  void clear_equip_level();
  int32_t equip_level() const;
  void set_equip_level(int32_t value);
  private:
  int32_t _internal_equip_level() const;
  void _internal_set_equip_level(int32_t value);
  public:

  // int32 bind = 2;
  void clear_bind();
  int32_t bind() const;
  void set_bind(int32_t value);
  private:
  int32_t _internal_bind() const;
  void _internal_set_bind(int32_t value);
  public:

  // int32 pai_type = 3;
  void clear_pai_type();
  int32_t pai_type() const;
  void set_pai_type(int32_t value);
  private:
  int32_t _internal_pai_type() const;
  void _internal_set_pai_type(int32_t value);
  public:

  // int32 equip_type = 4;
  void clear_equip_type();
  int32_t equip_type() const;
  void set_equip_type(int32_t value);
  private:
  int32_t _internal_equip_type() const;
  void _internal_set_equip_type(int32_t value);
  public:

  // int32 equip_score = 5;
  void clear_equip_score();
  int32_t equip_score() const;
  void set_equip_score(int32_t value);
  private:
  int32_t _internal_equip_score() const;
  void _internal_set_equip_score(int32_t value);
  public:

  // int32 level = 6;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // int32 curr_max_dur = 7;
  void clear_curr_max_dur();
  int32_t curr_max_dur() const;
  void set_curr_max_dur(int32_t value);
  private:
  int32_t _internal_curr_max_dur() const;
  void _internal_set_curr_max_dur(int32_t value);
  public:

  // int32 curr_dur_point = 8;
  void clear_curr_dur_point();
  int32_t curr_dur_point() const;
  void set_curr_dur_point(int32_t value);
  private:
  int32_t _internal_curr_dur_point() const;
  void _internal_set_curr_dur_point(int32_t value);
  public:

  // int32 curr_damage_point = 9;
  void clear_curr_damage_point();
  int32_t curr_damage_point() const;
  void set_curr_damage_point(int32_t value);
  private:
  int32_t _internal_curr_damage_point() const;
  void _internal_set_curr_damage_point(int32_t value);
  public:

  // int32 curr_gem_hole = 10;
  void clear_curr_gem_hole();
  int32_t curr_gem_hole() const;
  void set_curr_gem_hole(int32_t value);
  private:
  int32_t _internal_curr_gem_hole() const;
  void _internal_set_curr_gem_hole(int32_t value);
  public:

  // int32 lock = 13;
  void clear_lock();
  int32_t lock() const;
  void set_lock(int32_t value);
  private:
  int32_t _internal_lock() const;
  void _internal_set_lock(int32_t value);
  public:

  // int32 lock_time = 14;
  void clear_lock_time();
  int32_t lock_time() const;
  void set_lock_time(int32_t value);
  private:
  int32_t _internal_lock_time() const;
  void _internal_set_lock_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SEquipInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemGemInfo > gems_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty > propertys_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemConstInfo > consts_;
    int32_t equip_level_;
    int32_t bind_;
    int32_t pai_type_;
    int32_t equip_type_;
    int32_t equip_score_;
    int32_t level_;
    int32_t curr_max_dur_;
    int32_t curr_dur_point_;
    int32_t curr_damage_point_;
    int32_t curr_gem_hole_;
    int32_t lock_;
    int32_t lock_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SMedicInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SMedicInfo) */ {
 public:
  inline SMedicInfo() : SMedicInfo(nullptr) {}
  ~SMedicInfo() override;
  explicit PROTOBUF_CONSTEXPR SMedicInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SMedicInfo(const SMedicInfo& from);
  SMedicInfo(SMedicInfo&& from) noexcept
    : SMedicInfo() {
    *this = ::std::move(from);
  }

  inline SMedicInfo& operator=(const SMedicInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SMedicInfo& operator=(SMedicInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SMedicInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SMedicInfo* internal_default_instance() {
    return reinterpret_cast<const SMedicInfo*>(
               &_SMedicInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(SMedicInfo& a, SMedicInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SMedicInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SMedicInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SMedicInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SMedicInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SMedicInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SMedicInfo& from) {
    SMedicInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SMedicInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SMedicInfo";
  }
  protected:
  explicit SMedicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // int32 count = 1;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // int32 level = 2;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SMedicInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t count_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class ExtraBagInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ExtraBagInfo) */ {
 public:
  inline ExtraBagInfo() : ExtraBagInfo(nullptr) {}
  ~ExtraBagInfo() override;
  explicit PROTOBUF_CONSTEXPR ExtraBagInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExtraBagInfo(const ExtraBagInfo& from);
  ExtraBagInfo(ExtraBagInfo&& from) noexcept
    : ExtraBagInfo() {
    *this = ::std::move(from);
  }

  inline ExtraBagInfo& operator=(const ExtraBagInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExtraBagInfo& operator=(ExtraBagInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExtraBagInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExtraBagInfo* internal_default_instance() {
    return reinterpret_cast<const ExtraBagInfo*>(
               &_ExtraBagInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ExtraBagInfo& a, ExtraBagInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ExtraBagInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExtraBagInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ExtraBagInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ExtraBagInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ExtraBagInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ExtraBagInfo& from) {
    ExtraBagInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExtraBagInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.ExtraBagInfo";
  }
  protected:
  explicit ExtraBagInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBeginTimeFieldNumber = 1,
  };
  // uint32 begin_time = 1;
  void clear_begin_time();
  uint32_t begin_time() const;
  void set_begin_time(uint32_t value);
  private:
  uint32_t _internal_begin_time() const;
  void _internal_set_begin_time(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.ExtraBagInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint32_t begin_time_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SItem) */ {
 public:
  inline SItem() : SItem(nullptr) {}
  ~SItem() override;
  explicit PROTOBUF_CONSTEXPR SItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SItem(const SItem& from);
  SItem(SItem&& from) noexcept
    : SItem() {
    *this = ::std::move(from);
  }

  inline SItem& operator=(const SItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SItem& operator=(SItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SItem* internal_default_instance() {
    return reinterpret_cast<const SItem*>(
               &_SItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(SItem& a, SItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SItem& from) {
    SItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SItem";
  }
  protected:
  explicit SItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 6,
    kCreatorFieldNumber = 5,
    kItemGuidFieldNumber = 2,
    kEquipInfoFieldNumber = 8,
    kMedicInfoFieldNumber = 9,
    kExtraBagFieldNumber = 10,
    kItemIdFieldNumber = 1,
    kItemIndexFieldNumber = 3,
    kNsBindFieldNumber = 4,
    kTermEndtimeFieldNumber = 7,
  };
  // repeated int32 params = 6;
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  private:
  int32_t _internal_params(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_params() const;
  void _internal_add_params(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_params();
  public:
  int32_t params(int index) const;
  void set_params(int index, int32_t value);
  void add_params(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      params() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_params();

  // string creator = 5;
  void clear_creator();
  const std::string& creator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_creator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_creator();
  PROTOBUF_NODISCARD std::string* release_creator();
  void set_allocated_creator(std::string* creator);
  private:
  const std::string& _internal_creator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_creator(const std::string& value);
  std::string* _internal_mutable_creator();
  public:

  // .base.SItemGuid item_guid = 2;
  bool has_item_guid() const;
  private:
  bool _internal_has_item_guid() const;
  public:
  void clear_item_guid();
  const ::base::SItemGuid& item_guid() const;
  PROTOBUF_NODISCARD ::base::SItemGuid* release_item_guid();
  ::base::SItemGuid* mutable_item_guid();
  void set_allocated_item_guid(::base::SItemGuid* item_guid);
  private:
  const ::base::SItemGuid& _internal_item_guid() const;
  ::base::SItemGuid* _internal_mutable_item_guid();
  public:
  void unsafe_arena_set_allocated_item_guid(
      ::base::SItemGuid* item_guid);
  ::base::SItemGuid* unsafe_arena_release_item_guid();

  // optional .base.SEquipInfo equip_info = 8;
  bool has_equip_info() const;
  private:
  bool _internal_has_equip_info() const;
  public:
  void clear_equip_info();
  const ::base::SEquipInfo& equip_info() const;
  PROTOBUF_NODISCARD ::base::SEquipInfo* release_equip_info();
  ::base::SEquipInfo* mutable_equip_info();
  void set_allocated_equip_info(::base::SEquipInfo* equip_info);
  private:
  const ::base::SEquipInfo& _internal_equip_info() const;
  ::base::SEquipInfo* _internal_mutable_equip_info();
  public:
  void unsafe_arena_set_allocated_equip_info(
      ::base::SEquipInfo* equip_info);
  ::base::SEquipInfo* unsafe_arena_release_equip_info();

  // optional .base.SMedicInfo medic_info = 9;
  bool has_medic_info() const;
  private:
  bool _internal_has_medic_info() const;
  public:
  void clear_medic_info();
  const ::base::SMedicInfo& medic_info() const;
  PROTOBUF_NODISCARD ::base::SMedicInfo* release_medic_info();
  ::base::SMedicInfo* mutable_medic_info();
  void set_allocated_medic_info(::base::SMedicInfo* medic_info);
  private:
  const ::base::SMedicInfo& _internal_medic_info() const;
  ::base::SMedicInfo* _internal_mutable_medic_info();
  public:
  void unsafe_arena_set_allocated_medic_info(
      ::base::SMedicInfo* medic_info);
  ::base::SMedicInfo* unsafe_arena_release_medic_info();

  // optional .base.ExtraBagInfo extra_bag = 10;
  bool has_extra_bag() const;
  private:
  bool _internal_has_extra_bag() const;
  public:
  void clear_extra_bag();
  const ::base::ExtraBagInfo& extra_bag() const;
  PROTOBUF_NODISCARD ::base::ExtraBagInfo* release_extra_bag();
  ::base::ExtraBagInfo* mutable_extra_bag();
  void set_allocated_extra_bag(::base::ExtraBagInfo* extra_bag);
  private:
  const ::base::ExtraBagInfo& _internal_extra_bag() const;
  ::base::ExtraBagInfo* _internal_mutable_extra_bag();
  public:
  void unsafe_arena_set_allocated_extra_bag(
      ::base::ExtraBagInfo* extra_bag);
  ::base::ExtraBagInfo* unsafe_arena_release_extra_bag();

  // int32 item_id = 1;
  void clear_item_id();
  int32_t item_id() const;
  void set_item_id(int32_t value);
  private:
  int32_t _internal_item_id() const;
  void _internal_set_item_id(int32_t value);
  public:

  // uint32 item_index = 3;
  void clear_item_index();
  uint32_t item_index() const;
  void set_item_index(uint32_t value);
  private:
  uint32_t _internal_item_index() const;
  void _internal_set_item_index(uint32_t value);
  public:

  // int32 ns_bind = 4;
  void clear_ns_bind();
  int32_t ns_bind() const;
  void set_ns_bind(int32_t value);
  private:
  int32_t _internal_ns_bind() const;
  void _internal_set_ns_bind(int32_t value);
  public:

  // uint32 term_endtime = 7;
  void clear_term_endtime();
  uint32_t term_endtime() const;
  void set_term_endtime(uint32_t value);
  private:
  uint32_t _internal_term_endtime() const;
  void _internal_set_term_endtime(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > params_;
    mutable std::atomic<int> _params_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr creator_;
    ::base::SItemGuid* item_guid_;
    ::base::SEquipInfo* equip_info_;
    ::base::SMedicInfo* medic_info_;
    ::base::ExtraBagInfo* extra_bag_;
    int32_t item_id_;
    uint32_t item_index_;
    int32_t ns_bind_;
    uint32_t term_endtime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class PlayerSpell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.PlayerSpell) */ {
 public:
  inline PlayerSpell() : PlayerSpell(nullptr) {}
  ~PlayerSpell() override;
  explicit PROTOBUF_CONSTEXPR PlayerSpell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerSpell(const PlayerSpell& from);
  PlayerSpell(PlayerSpell&& from) noexcept
    : PlayerSpell() {
    *this = ::std::move(from);
  }

  inline PlayerSpell& operator=(const PlayerSpell& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerSpell& operator=(PlayerSpell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerSpell& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerSpell* internal_default_instance() {
    return reinterpret_cast<const PlayerSpell*>(
               &_PlayerSpell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlayerSpell& a, PlayerSpell& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerSpell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerSpell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerSpell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerSpell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerSpell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerSpell& from) {
    PlayerSpell::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSpell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.PlayerSpell";
  }
  protected:
  explicit PlayerSpell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kLevelFieldNumber = 3,
  };
  // int32 skill_id = 1;
  void clear_skill_id();
  int32_t skill_id() const;
  void set_skill_id(int32_t value);
  private:
  int32_t _internal_skill_id() const;
  void _internal_set_skill_id(int32_t value);
  public:

  // int32 state = 2;
  void clear_state();
  int32_t state() const;
  void set_state(int32_t value);
  private:
  int32_t _internal_state() const;
  void _internal_set_state(int32_t value);
  public:

  // int32 level = 3;
  void clear_level();
  int32_t level() const;
  void set_level(int32_t value);
  private:
  int32_t _internal_level() const;
  void _internal_set_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.PlayerSpell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t skill_id_;
    int32_t state_;
    int32_t level_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SArchiveLoader_Quest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SArchiveLoader_Quest) */ {
 public:
  inline SArchiveLoader_Quest() : SArchiveLoader_Quest(nullptr) {}
  ~SArchiveLoader_Quest() override;
  explicit PROTOBUF_CONSTEXPR SArchiveLoader_Quest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SArchiveLoader_Quest(const SArchiveLoader_Quest& from);
  SArchiveLoader_Quest(SArchiveLoader_Quest&& from) noexcept
    : SArchiveLoader_Quest() {
    *this = ::std::move(from);
  }

  inline SArchiveLoader_Quest& operator=(const SArchiveLoader_Quest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SArchiveLoader_Quest& operator=(SArchiveLoader_Quest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SArchiveLoader_Quest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SArchiveLoader_Quest* internal_default_instance() {
    return reinterpret_cast<const SArchiveLoader_Quest*>(
               &_SArchiveLoader_Quest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SArchiveLoader_Quest& a, SArchiveLoader_Quest& b) {
    a.Swap(&b);
  }
  inline void Swap(SArchiveLoader_Quest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SArchiveLoader_Quest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SArchiveLoader_Quest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SArchiveLoader_Quest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SArchiveLoader_Quest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SArchiveLoader_Quest& from) {
    SArchiveLoader_Quest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SArchiveLoader_Quest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SArchiveLoader_Quest";
  }
  protected:
  explicit SArchiveLoader_Quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestsFieldNumber = 2,
    kHaveDonesFieldNumber = 3,
    kQuestDatasFieldNumber = 4,
    kCountFieldNumber = 1,
  };
  // repeated .base.Quest quests = 2;
  int quests_size() const;
  private:
  int _internal_quests_size() const;
  public:
  void clear_quests();
  ::base::Quest* mutable_quests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::Quest >*
      mutable_quests();
  private:
  const ::base::Quest& _internal_quests(int index) const;
  ::base::Quest* _internal_add_quests();
  public:
  const ::base::Quest& quests(int index) const;
  ::base::Quest* add_quests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::Quest >&
      quests() const;

  // repeated uint32 have_dones = 3;
  int have_dones_size() const;
  private:
  int _internal_have_dones_size() const;
  public:
  void clear_have_dones();
  private:
  uint32_t _internal_have_dones(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_have_dones() const;
  void _internal_add_have_dones(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_have_dones();
  public:
  uint32_t have_dones(int index) const;
  void set_have_dones(int index, uint32_t value);
  void add_have_dones(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      have_dones() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_have_dones();

  // repeated int32 quest_datas = 4;
  int quest_datas_size() const;
  private:
  int _internal_quest_datas_size() const;
  public:
  void clear_quest_datas();
  private:
  int32_t _internal_quest_datas(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_quest_datas() const;
  void _internal_add_quest_datas(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_quest_datas();
  public:
  int32_t quest_datas(int index) const;
  void set_quest_datas(int index, int32_t value);
  void add_quest_datas(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      quest_datas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_quest_datas();

  // int32 count = 1;
  void clear_count();
  int32_t count() const;
  void set_count(int32_t value);
  private:
  int32_t _internal_count() const;
  void _internal_set_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SArchiveLoader_Quest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::Quest > quests_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > have_dones_;
    mutable std::atomic<int> _have_dones_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > quest_datas_;
    mutable std::atomic<int> _quest_datas_cached_byte_size_;
    int32_t count_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class Player_Setting final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.Player_Setting) */ {
 public:
  inline Player_Setting() : Player_Setting(nullptr) {}
  ~Player_Setting() override;
  explicit PROTOBUF_CONSTEXPR Player_Setting(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player_Setting(const Player_Setting& from);
  Player_Setting(Player_Setting&& from) noexcept
    : Player_Setting() {
    *this = ::std::move(from);
  }

  inline Player_Setting& operator=(const Player_Setting& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player_Setting& operator=(Player_Setting&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player_Setting& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player_Setting* internal_default_instance() {
    return reinterpret_cast<const Player_Setting*>(
               &_Player_Setting_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(Player_Setting& a, Player_Setting& b) {
    a.Swap(&b);
  }
  inline void Swap(Player_Setting* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player_Setting* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Player_Setting* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Player_Setting>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Player_Setting& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Player_Setting& from) {
    Player_Setting::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player_Setting* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.Player_Setting";
  }
  protected:
  explicit Player_Setting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSettingTypeFieldNumber = 1,
    kSettingDataFieldNumber = 2,
  };
  // int32 setting_type = 1;
  void clear_setting_type();
  int32_t setting_type() const;
  void set_setting_type(int32_t value);
  private:
  int32_t _internal_setting_type() const;
  void _internal_set_setting_type(int32_t value);
  public:

  // int32 setting_data = 2;
  void clear_setting_data();
  int32_t setting_data() const;
  void set_setting_data(int32_t value);
  private:
  int32_t _internal_setting_data() const;
  void _internal_set_setting_data(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.Player_Setting)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t setting_type_;
    int32_t setting_data_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SQuestBonusItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SQuestBonusItem) */ {
 public:
  inline SQuestBonusItem() : SQuestBonusItem(nullptr) {}
  ~SQuestBonusItem() override;
  explicit PROTOBUF_CONSTEXPR SQuestBonusItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SQuestBonusItem(const SQuestBonusItem& from);
  SQuestBonusItem(SQuestBonusItem&& from) noexcept
    : SQuestBonusItem() {
    *this = ::std::move(from);
  }

  inline SQuestBonusItem& operator=(const SQuestBonusItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline SQuestBonusItem& operator=(SQuestBonusItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SQuestBonusItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const SQuestBonusItem* internal_default_instance() {
    return reinterpret_cast<const SQuestBonusItem*>(
               &_SQuestBonusItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(SQuestBonusItem& a, SQuestBonusItem& b) {
    a.Swap(&b);
  }
  inline void Swap(SQuestBonusItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SQuestBonusItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SQuestBonusItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SQuestBonusItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SQuestBonusItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SQuestBonusItem& from) {
    SQuestBonusItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SQuestBonusItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SQuestBonusItem";
  }
  protected:
  explicit SQuestBonusItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYcountFieldNumber = 1,
    kItemIdFieldNumber = 2,
    kYindexFieldNumber = 3,
  };
  // int32 ycount = 1;
  void clear_ycount();
  int32_t ycount() const;
  void set_ycount(int32_t value);
  private:
  int32_t _internal_ycount() const;
  void _internal_set_ycount(int32_t value);
  public:

  // uint32 item_id = 2;
  void clear_item_id();
  uint32_t item_id() const;
  void set_item_id(uint32_t value);
  private:
  uint32_t _internal_item_id() const;
  void _internal_set_item_id(uint32_t value);
  public:

  // int32 yindex = 3;
  void clear_yindex();
  int32_t yindex() const;
  void set_yindex(int32_t value);
  private:
  int32_t _internal_yindex() const;
  void _internal_set_yindex(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SQuestBonusItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t ycount_;
    uint32_t item_id_;
    int32_t yindex_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class SQuestBonus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.SQuestBonus) */ {
 public:
  inline SQuestBonus() : SQuestBonus(nullptr) {}
  ~SQuestBonus() override;
  explicit PROTOBUF_CONSTEXPR SQuestBonus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SQuestBonus(const SQuestBonus& from);
  SQuestBonus(SQuestBonus&& from) noexcept
    : SQuestBonus() {
    *this = ::std::move(from);
  }

  inline SQuestBonus& operator=(const SQuestBonus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SQuestBonus& operator=(SQuestBonus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SQuestBonus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SQuestBonus* internal_default_instance() {
    return reinterpret_cast<const SQuestBonus*>(
               &_SQuestBonus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SQuestBonus& a, SQuestBonus& b) {
    a.Swap(&b);
  }
  inline void Swap(SQuestBonus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SQuestBonus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SQuestBonus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SQuestBonus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SQuestBonus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SQuestBonus& from) {
    SQuestBonus::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SQuestBonus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.SQuestBonus";
  }
  protected:
  explicit SQuestBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonusItemFieldNumber = 4,
    kTypeFieldNumber = 1,
    kMoneyFieldNumber = 2,
    kExpFieldNumber = 3,
  };
  // optional .base.SQuestBonusItem bonus_item = 4;
  bool has_bonus_item() const;
  private:
  bool _internal_has_bonus_item() const;
  public:
  void clear_bonus_item();
  const ::base::SQuestBonusItem& bonus_item() const;
  PROTOBUF_NODISCARD ::base::SQuestBonusItem* release_bonus_item();
  ::base::SQuestBonusItem* mutable_bonus_item();
  void set_allocated_bonus_item(::base::SQuestBonusItem* bonus_item);
  private:
  const ::base::SQuestBonusItem& _internal_bonus_item() const;
  ::base::SQuestBonusItem* _internal_mutable_bonus_item();
  public:
  void unsafe_arena_set_allocated_bonus_item(
      ::base::SQuestBonusItem* bonus_item);
  ::base::SQuestBonusItem* unsafe_arena_release_bonus_item();

  // int32 type = 1;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // optional uint32 money = 2;
  bool has_money() const;
  private:
  bool _internal_has_money() const;
  public:
  void clear_money();
  uint32_t money() const;
  void set_money(uint32_t value);
  private:
  uint32_t _internal_money() const;
  void _internal_set_money(uint32_t value);
  public:

  // optional uint32 exp = 3;
  bool has_exp() const;
  private:
  bool _internal_has_exp() const;
  public:
  void clear_exp();
  uint32_t exp() const;
  void set_exp(uint32_t value);
  private:
  uint32_t _internal_exp() const;
  void _internal_set_exp(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.SQuestBonus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::base::SQuestBonusItem* bonus_item_;
    int32_t type_;
    uint32_t money_;
    uint32_t exp_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// -------------------------------------------------------------------

class ScriptParam_QuestInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:base.ScriptParam_QuestInfo) */ {
 public:
  inline ScriptParam_QuestInfo() : ScriptParam_QuestInfo(nullptr) {}
  ~ScriptParam_QuestInfo() override;
  explicit PROTOBUF_CONSTEXPR ScriptParam_QuestInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScriptParam_QuestInfo(const ScriptParam_QuestInfo& from);
  ScriptParam_QuestInfo(ScriptParam_QuestInfo&& from) noexcept
    : ScriptParam_QuestInfo() {
    *this = ::std::move(from);
  }

  inline ScriptParam_QuestInfo& operator=(const ScriptParam_QuestInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScriptParam_QuestInfo& operator=(ScriptParam_QuestInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScriptParam_QuestInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScriptParam_QuestInfo* internal_default_instance() {
    return reinterpret_cast<const ScriptParam_QuestInfo*>(
               &_ScriptParam_QuestInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ScriptParam_QuestInfo& a, ScriptParam_QuestInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ScriptParam_QuestInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScriptParam_QuestInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScriptParam_QuestInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScriptParam_QuestInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScriptParam_QuestInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScriptParam_QuestInfo& from) {
    ScriptParam_QuestInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScriptParam_QuestInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "base.ScriptParam_QuestInfo";
  }
  protected:
  explicit ScriptParam_QuestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBonusFieldNumber = 6,
    kTextFieldNumber = 5,
    kNpcIdFieldNumber = 1,
    kScriptIdFieldNumber = 2,
    kQuestIdFieldNumber = 3,
    kYflagsFieldNumber = 4,
  };
  // repeated .base.SQuestBonus bonus = 6;
  int bonus_size() const;
  private:
  int _internal_bonus_size() const;
  public:
  void clear_bonus();
  ::base::SQuestBonus* mutable_bonus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SQuestBonus >*
      mutable_bonus();
  private:
  const ::base::SQuestBonus& _internal_bonus(int index) const;
  ::base::SQuestBonus* _internal_add_bonus();
  public:
  const ::base::SQuestBonus& bonus(int index) const;
  ::base::SQuestBonus* add_bonus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SQuestBonus >&
      bonus() const;

  // string text = 5;
  void clear_text();
  const std::string& text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_text();
  PROTOBUF_NODISCARD std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // int32 npc_id = 1;
  void clear_npc_id();
  int32_t npc_id() const;
  void set_npc_id(int32_t value);
  private:
  int32_t _internal_npc_id() const;
  void _internal_set_npc_id(int32_t value);
  public:

  // int32 script_id = 2;
  void clear_script_id();
  int32_t script_id() const;
  void set_script_id(int32_t value);
  private:
  int32_t _internal_script_id() const;
  void _internal_set_script_id(int32_t value);
  public:

  // int32 quest_id = 3;
  void clear_quest_id();
  int32_t quest_id() const;
  void set_quest_id(int32_t value);
  private:
  int32_t _internal_quest_id() const;
  void _internal_set_quest_id(int32_t value);
  public:

  // int32 yflags = 4;
  void clear_yflags();
  int32_t yflags() const;
  void set_yflags(int32_t value);
  private:
  int32_t _internal_yflags() const;
  void _internal_set_yflags(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:base.ScriptParam_QuestInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SQuestBonus > bonus_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
    int32_t npc_id_;
    int32_t script_id_;
    int32_t quest_id_;
    int32_t yflags_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_base_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Quest

// int32 quest_id = 1;
inline void Quest::clear_quest_id() {
  _impl_.quest_id_ = 0;
}
inline int32_t Quest::_internal_quest_id() const {
  return _impl_.quest_id_;
}
inline int32_t Quest::quest_id() const {
  // @@protoc_insertion_point(field_get:base.Quest.quest_id)
  return _internal_quest_id();
}
inline void Quest::_internal_set_quest_id(int32_t value) {
  
  _impl_.quest_id_ = value;
}
inline void Quest::set_quest_id(int32_t value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:base.Quest.quest_id)
}

// int32 script_id = 2;
inline void Quest::clear_script_id() {
  _impl_.script_id_ = 0;
}
inline int32_t Quest::_internal_script_id() const {
  return _impl_.script_id_;
}
inline int32_t Quest::script_id() const {
  // @@protoc_insertion_point(field_get:base.Quest.script_id)
  return _internal_script_id();
}
inline void Quest::_internal_set_script_id(int32_t value) {
  
  _impl_.script_id_ = value;
}
inline void Quest::set_script_id(int32_t value) {
  _internal_set_script_id(value);
  // @@protoc_insertion_point(field_set:base.Quest.script_id)
}

// int32 y_flag = 3;
inline void Quest::clear_y_flag() {
  _impl_.y_flag_ = 0;
}
inline int32_t Quest::_internal_y_flag() const {
  return _impl_.y_flag_;
}
inline int32_t Quest::y_flag() const {
  // @@protoc_insertion_point(field_get:base.Quest.y_flag)
  return _internal_y_flag();
}
inline void Quest::_internal_set_y_flag(int32_t value) {
  
  _impl_.y_flag_ = value;
}
inline void Quest::set_y_flag(int32_t value) {
  _internal_set_y_flag(value);
  // @@protoc_insertion_point(field_set:base.Quest.y_flag)
}

// repeated uint32 a_param = 4;
inline int Quest::_internal_a_param_size() const {
  return _impl_.a_param_.size();
}
inline int Quest::a_param_size() const {
  return _internal_a_param_size();
}
inline void Quest::clear_a_param() {
  _impl_.a_param_.Clear();
}
inline uint32_t Quest::_internal_a_param(int index) const {
  return _impl_.a_param_.Get(index);
}
inline uint32_t Quest::a_param(int index) const {
  // @@protoc_insertion_point(field_get:base.Quest.a_param)
  return _internal_a_param(index);
}
inline void Quest::set_a_param(int index, uint32_t value) {
  _impl_.a_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.Quest.a_param)
}
inline void Quest::_internal_add_a_param(uint32_t value) {
  _impl_.a_param_.Add(value);
}
inline void Quest::add_a_param(uint32_t value) {
  _internal_add_a_param(value);
  // @@protoc_insertion_point(field_add:base.Quest.a_param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Quest::_internal_a_param() const {
  return _impl_.a_param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
Quest::a_param() const {
  // @@protoc_insertion_point(field_list:base.Quest.a_param)
  return _internal_a_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Quest::_internal_mutable_a_param() {
  return &_impl_.a_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
Quest::mutable_a_param() {
  // @@protoc_insertion_point(field_mutable_list:base.Quest.a_param)
  return _internal_mutable_a_param();
}

// repeated float af_param = 5;
inline int Quest::_internal_af_param_size() const {
  return _impl_.af_param_.size();
}
inline int Quest::af_param_size() const {
  return _internal_af_param_size();
}
inline void Quest::clear_af_param() {
  _impl_.af_param_.Clear();
}
inline float Quest::_internal_af_param(int index) const {
  return _impl_.af_param_.Get(index);
}
inline float Quest::af_param(int index) const {
  // @@protoc_insertion_point(field_get:base.Quest.af_param)
  return _internal_af_param(index);
}
inline void Quest::set_af_param(int index, float value) {
  _impl_.af_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.Quest.af_param)
}
inline void Quest::_internal_add_af_param(float value) {
  _impl_.af_param_.Add(value);
}
inline void Quest::add_af_param(float value) {
  _internal_add_af_param(value);
  // @@protoc_insertion_point(field_add:base.Quest.af_param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Quest::_internal_af_param() const {
  return _impl_.af_param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
Quest::af_param() const {
  // @@protoc_insertion_point(field_list:base.Quest.af_param)
  return _internal_af_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Quest::_internal_mutable_af_param() {
  return &_impl_.af_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
Quest::mutable_af_param() {
  // @@protoc_insertion_point(field_mutable_list:base.Quest.af_param)
  return _internal_mutable_af_param();
}

// repeated int32 an_param = 6;
inline int Quest::_internal_an_param_size() const {
  return _impl_.an_param_.size();
}
inline int Quest::an_param_size() const {
  return _internal_an_param_size();
}
inline void Quest::clear_an_param() {
  _impl_.an_param_.Clear();
}
inline int32_t Quest::_internal_an_param(int index) const {
  return _impl_.an_param_.Get(index);
}
inline int32_t Quest::an_param(int index) const {
  // @@protoc_insertion_point(field_get:base.Quest.an_param)
  return _internal_an_param(index);
}
inline void Quest::set_an_param(int index, int32_t value) {
  _impl_.an_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.Quest.an_param)
}
inline void Quest::_internal_add_an_param(int32_t value) {
  _impl_.an_param_.Add(value);
}
inline void Quest::add_an_param(int32_t value) {
  _internal_add_an_param(value);
  // @@protoc_insertion_point(field_add:base.Quest.an_param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Quest::_internal_an_param() const {
  return _impl_.an_param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Quest::an_param() const {
  // @@protoc_insertion_point(field_list:base.Quest.an_param)
  return _internal_an_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Quest::_internal_mutable_an_param() {
  return &_impl_.an_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Quest::mutable_an_param() {
  // @@protoc_insertion_point(field_mutable_list:base.Quest.an_param)
  return _internal_mutable_an_param();
}

// repeated int32 ab_param = 7;
inline int Quest::_internal_ab_param_size() const {
  return _impl_.ab_param_.size();
}
inline int Quest::ab_param_size() const {
  return _internal_ab_param_size();
}
inline void Quest::clear_ab_param() {
  _impl_.ab_param_.Clear();
}
inline int32_t Quest::_internal_ab_param(int index) const {
  return _impl_.ab_param_.Get(index);
}
inline int32_t Quest::ab_param(int index) const {
  // @@protoc_insertion_point(field_get:base.Quest.ab_param)
  return _internal_ab_param(index);
}
inline void Quest::set_ab_param(int index, int32_t value) {
  _impl_.ab_param_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.Quest.ab_param)
}
inline void Quest::_internal_add_ab_param(int32_t value) {
  _impl_.ab_param_.Add(value);
}
inline void Quest::add_ab_param(int32_t value) {
  _internal_add_ab_param(value);
  // @@protoc_insertion_point(field_add:base.Quest.ab_param)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Quest::_internal_ab_param() const {
  return _impl_.ab_param_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
Quest::ab_param() const {
  // @@protoc_insertion_point(field_list:base.Quest.ab_param)
  return _internal_ab_param();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Quest::_internal_mutable_ab_param() {
  return &_impl_.ab_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
Quest::mutable_ab_param() {
  // @@protoc_insertion_point(field_mutable_list:base.Quest.ab_param)
  return _internal_mutable_ab_param();
}

// -------------------------------------------------------------------

// Flag64

// uint32 low_flags = 1;
inline void Flag64::clear_low_flags() {
  _impl_.low_flags_ = 0u;
}
inline uint32_t Flag64::_internal_low_flags() const {
  return _impl_.low_flags_;
}
inline uint32_t Flag64::low_flags() const {
  // @@protoc_insertion_point(field_get:base.Flag64.low_flags)
  return _internal_low_flags();
}
inline void Flag64::_internal_set_low_flags(uint32_t value) {
  
  _impl_.low_flags_ = value;
}
inline void Flag64::set_low_flags(uint32_t value) {
  _internal_set_low_flags(value);
  // @@protoc_insertion_point(field_set:base.Flag64.low_flags)
}

// uint32 high_flags = 2;
inline void Flag64::clear_high_flags() {
  _impl_.high_flags_ = 0u;
}
inline uint32_t Flag64::_internal_high_flags() const {
  return _impl_.high_flags_;
}
inline uint32_t Flag64::high_flags() const {
  // @@protoc_insertion_point(field_get:base.Flag64.high_flags)
  return _internal_high_flags();
}
inline void Flag64::_internal_set_high_flags(uint32_t value) {
  
  _impl_.high_flags_ = value;
}
inline void Flag64::set_high_flags(uint32_t value) {
  _internal_set_high_flags(value);
  // @@protoc_insertion_point(field_set:base.Flag64.high_flags)
}

// -------------------------------------------------------------------

// SCampData

// int32 camp_id = 1;
inline void SCampData::clear_camp_id() {
  _impl_.camp_id_ = 0;
}
inline int32_t SCampData::_internal_camp_id() const {
  return _impl_.camp_id_;
}
inline int32_t SCampData::camp_id() const {
  // @@protoc_insertion_point(field_get:base.SCampData.camp_id)
  return _internal_camp_id();
}
inline void SCampData::_internal_set_camp_id(int32_t value) {
  
  _impl_.camp_id_ = value;
}
inline void SCampData::set_camp_id(int32_t value) {
  _internal_set_camp_id(value);
  // @@protoc_insertion_point(field_set:base.SCampData.camp_id)
}

// int32 pk_mode = 2;
inline void SCampData::clear_pk_mode() {
  _impl_.pk_mode_ = 0;
}
inline int32_t SCampData::_internal_pk_mode() const {
  return _impl_.pk_mode_;
}
inline int32_t SCampData::pk_mode() const {
  // @@protoc_insertion_point(field_get:base.SCampData.pk_mode)
  return _internal_pk_mode();
}
inline void SCampData::_internal_set_pk_mode(int32_t value) {
  
  _impl_.pk_mode_ = value;
}
inline void SCampData::set_pk_mode(int32_t value) {
  _internal_set_pk_mode(value);
  // @@protoc_insertion_point(field_set:base.SCampData.pk_mode)
}

// int32 reserve1 = 3;
inline void SCampData::clear_reserve1() {
  _impl_.reserve1_ = 0;
}
inline int32_t SCampData::_internal_reserve1() const {
  return _impl_.reserve1_;
}
inline int32_t SCampData::reserve1() const {
  // @@protoc_insertion_point(field_get:base.SCampData.reserve1)
  return _internal_reserve1();
}
inline void SCampData::_internal_set_reserve1(int32_t value) {
  
  _impl_.reserve1_ = value;
}
inline void SCampData::set_reserve1(int32_t value) {
  _internal_set_reserve1(value);
  // @@protoc_insertion_point(field_set:base.SCampData.reserve1)
}

// int32 reserve2 = 4;
inline void SCampData::clear_reserve2() {
  _impl_.reserve2_ = 0;
}
inline int32_t SCampData::_internal_reserve2() const {
  return _impl_.reserve2_;
}
inline int32_t SCampData::reserve2() const {
  // @@protoc_insertion_point(field_get:base.SCampData.reserve2)
  return _internal_reserve2();
}
inline void SCampData::_internal_set_reserve2(int32_t value) {
  
  _impl_.reserve2_ = value;
}
inline void SCampData::set_reserve2(int32_t value) {
  _internal_set_reserve2(value);
  // @@protoc_insertion_point(field_set:base.SCampData.reserve2)
}

// -------------------------------------------------------------------

// SHorseGuid

// uint32 high_section = 1;
inline void SHorseGuid::clear_high_section() {
  _impl_.high_section_ = 0u;
}
inline uint32_t SHorseGuid::_internal_high_section() const {
  return _impl_.high_section_;
}
inline uint32_t SHorseGuid::high_section() const {
  // @@protoc_insertion_point(field_get:base.SHorseGuid.high_section)
  return _internal_high_section();
}
inline void SHorseGuid::_internal_set_high_section(uint32_t value) {
  
  _impl_.high_section_ = value;
}
inline void SHorseGuid::set_high_section(uint32_t value) {
  _internal_set_high_section(value);
  // @@protoc_insertion_point(field_set:base.SHorseGuid.high_section)
}

// uint32 low_section = 2;
inline void SHorseGuid::clear_low_section() {
  _impl_.low_section_ = 0u;
}
inline uint32_t SHorseGuid::_internal_low_section() const {
  return _impl_.low_section_;
}
inline uint32_t SHorseGuid::low_section() const {
  // @@protoc_insertion_point(field_get:base.SHorseGuid.low_section)
  return _internal_low_section();
}
inline void SHorseGuid::_internal_set_low_section(uint32_t value) {
  
  _impl_.low_section_ = value;
}
inline void SHorseGuid::set_low_section(uint32_t value) {
  _internal_set_low_section(value);
  // @@protoc_insertion_point(field_set:base.SHorseGuid.low_section)
}

// -------------------------------------------------------------------

// ImpactStruct

// int32 buff_id = 1;
inline void ImpactStruct::clear_buff_id() {
  _impl_.buff_id_ = 0;
}
inline int32_t ImpactStruct::_internal_buff_id() const {
  return _impl_.buff_id_;
}
inline int32_t ImpactStruct::buff_id() const {
  // @@protoc_insertion_point(field_get:base.ImpactStruct.buff_id)
  return _internal_buff_id();
}
inline void ImpactStruct::_internal_set_buff_id(int32_t value) {
  
  _impl_.buff_id_ = value;
}
inline void ImpactStruct::set_buff_id(int32_t value) {
  _internal_set_buff_id(value);
  // @@protoc_insertion_point(field_set:base.ImpactStruct.buff_id)
}

// uint32 sn = 2;
inline void ImpactStruct::clear_sn() {
  _impl_.sn_ = 0u;
}
inline uint32_t ImpactStruct::_internal_sn() const {
  return _impl_.sn_;
}
inline uint32_t ImpactStruct::sn() const {
  // @@protoc_insertion_point(field_get:base.ImpactStruct.sn)
  return _internal_sn();
}
inline void ImpactStruct::_internal_set_sn(uint32_t value) {
  
  _impl_.sn_ = value;
}
inline void ImpactStruct::set_sn(uint32_t value) {
  _internal_set_sn(value);
  // @@protoc_insertion_point(field_set:base.ImpactStruct.sn)
}

// -------------------------------------------------------------------

// GLPos

// float fx = 1;
inline void GLPos::clear_fx() {
  _impl_.fx_ = 0;
}
inline float GLPos::_internal_fx() const {
  return _impl_.fx_;
}
inline float GLPos::fx() const {
  // @@protoc_insertion_point(field_get:base.GLPos.fx)
  return _internal_fx();
}
inline void GLPos::_internal_set_fx(float value) {
  
  _impl_.fx_ = value;
}
inline void GLPos::set_fx(float value) {
  _internal_set_fx(value);
  // @@protoc_insertion_point(field_set:base.GLPos.fx)
}

// float fz = 2;
inline void GLPos::clear_fz() {
  _impl_.fz_ = 0;
}
inline float GLPos::_internal_fz() const {
  return _impl_.fz_;
}
inline float GLPos::fz() const {
  // @@protoc_insertion_point(field_get:base.GLPos.fz)
  return _internal_fz();
}
inline void GLPos::_internal_set_fz(float value) {
  
  _impl_.fz_ = value;
}
inline void GLPos::set_fz(float value) {
  _internal_set_fz(value);
  // @@protoc_insertion_point(field_set:base.GLPos.fz)
}

// -------------------------------------------------------------------

// SXParam

// repeated int32 int_value = 1;
inline int SXParam::_internal_int_value_size() const {
  return _impl_.int_value_.size();
}
inline int SXParam::int_value_size() const {
  return _internal_int_value_size();
}
inline void SXParam::clear_int_value() {
  _impl_.int_value_.Clear();
}
inline int32_t SXParam::_internal_int_value(int index) const {
  return _impl_.int_value_.Get(index);
}
inline int32_t SXParam::int_value(int index) const {
  // @@protoc_insertion_point(field_get:base.SXParam.int_value)
  return _internal_int_value(index);
}
inline void SXParam::set_int_value(int index, int32_t value) {
  _impl_.int_value_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.SXParam.int_value)
}
inline void SXParam::_internal_add_int_value(int32_t value) {
  _impl_.int_value_.Add(value);
}
inline void SXParam::add_int_value(int32_t value) {
  _internal_add_int_value(value);
  // @@protoc_insertion_point(field_add:base.SXParam.int_value)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SXParam::_internal_int_value() const {
  return _impl_.int_value_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SXParam::int_value() const {
  // @@protoc_insertion_point(field_list:base.SXParam.int_value)
  return _internal_int_value();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SXParam::_internal_mutable_int_value() {
  return &_impl_.int_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SXParam::mutable_int_value() {
  // @@protoc_insertion_point(field_mutable_list:base.SXParam.int_value)
  return _internal_mutable_int_value();
}

// repeated int32 str_offset = 2;
inline int SXParam::_internal_str_offset_size() const {
  return _impl_.str_offset_.size();
}
inline int SXParam::str_offset_size() const {
  return _internal_str_offset_size();
}
inline void SXParam::clear_str_offset() {
  _impl_.str_offset_.Clear();
}
inline int32_t SXParam::_internal_str_offset(int index) const {
  return _impl_.str_offset_.Get(index);
}
inline int32_t SXParam::str_offset(int index) const {
  // @@protoc_insertion_point(field_get:base.SXParam.str_offset)
  return _internal_str_offset(index);
}
inline void SXParam::set_str_offset(int index, int32_t value) {
  _impl_.str_offset_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.SXParam.str_offset)
}
inline void SXParam::_internal_add_str_offset(int32_t value) {
  _impl_.str_offset_.Add(value);
}
inline void SXParam::add_str_offset(int32_t value) {
  _internal_add_str_offset(value);
  // @@protoc_insertion_point(field_add:base.SXParam.str_offset)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SXParam::_internal_str_offset() const {
  return _impl_.str_offset_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SXParam::str_offset() const {
  // @@protoc_insertion_point(field_list:base.SXParam.str_offset)
  return _internal_str_offset();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SXParam::_internal_mutable_str_offset() {
  return &_impl_.str_offset_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SXParam::mutable_str_offset() {
  // @@protoc_insertion_point(field_mutable_list:base.SXParam.str_offset)
  return _internal_mutable_str_offset();
}

// string str_value = 3;
inline void SXParam::clear_str_value() {
  _impl_.str_value_.ClearToEmpty();
}
inline const std::string& SXParam::str_value() const {
  // @@protoc_insertion_point(field_get:base.SXParam.str_value)
  return _internal_str_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SXParam::set_str_value(ArgT0&& arg0, ArgT... args) {
 
 _impl_.str_value_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:base.SXParam.str_value)
}
inline std::string* SXParam::mutable_str_value() {
  std::string* _s = _internal_mutable_str_value();
  // @@protoc_insertion_point(field_mutable:base.SXParam.str_value)
  return _s;
}
inline const std::string& SXParam::_internal_str_value() const {
  return _impl_.str_value_.Get();
}
inline void SXParam::_internal_set_str_value(const std::string& value) {
  
  _impl_.str_value_.Set(value, GetArenaForAllocation());
}
inline std::string* SXParam::_internal_mutable_str_value() {
  
  return _impl_.str_value_.Mutable(GetArenaForAllocation());
}
inline std::string* SXParam::release_str_value() {
  // @@protoc_insertion_point(field_release:base.SXParam.str_value)
  return _impl_.str_value_.Release();
}
inline void SXParam::set_allocated_str_value(std::string* str_value) {
  if (str_value != nullptr) {
    
  } else {
    
  }
  _impl_.str_value_.SetAllocated(str_value, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_value_.IsDefault()) {
    _impl_.str_value_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:base.SXParam.str_value)
}

// -------------------------------------------------------------------

// PlayerAbility

// uint32 level = 1;
inline void PlayerAbility::clear_level() {
  _impl_.level_ = 0u;
}
inline uint32_t PlayerAbility::_internal_level() const {
  return _impl_.level_;
}
inline uint32_t PlayerAbility::level() const {
  // @@protoc_insertion_point(field_get:base.PlayerAbility.level)
  return _internal_level();
}
inline void PlayerAbility::_internal_set_level(uint32_t value) {
  
  _impl_.level_ = value;
}
inline void PlayerAbility::set_level(uint32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:base.PlayerAbility.level)
}

// uint32 exp = 2;
inline void PlayerAbility::clear_exp() {
  _impl_.exp_ = 0u;
}
inline uint32_t PlayerAbility::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t PlayerAbility::exp() const {
  // @@protoc_insertion_point(field_get:base.PlayerAbility.exp)
  return _internal_exp();
}
inline void PlayerAbility::_internal_set_exp(uint32_t value) {
  
  _impl_.exp_ = value;
}
inline void PlayerAbility::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:base.PlayerAbility.exp)
}

// -------------------------------------------------------------------

// HorseSkill

// int32 skill_id = 1;
inline void HorseSkill::clear_skill_id() {
  _impl_.skill_id_ = 0;
}
inline int32_t HorseSkill::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline int32_t HorseSkill::skill_id() const {
  // @@protoc_insertion_point(field_get:base.HorseSkill.skill_id)
  return _internal_skill_id();
}
inline void HorseSkill::_internal_set_skill_id(int32_t value) {
  
  _impl_.skill_id_ = value;
}
inline void HorseSkill::set_skill_id(int32_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:base.HorseSkill.skill_id)
}

// bool can_use = 2;
inline void HorseSkill::clear_can_use() {
  _impl_.can_use_ = false;
}
inline bool HorseSkill::_internal_can_use() const {
  return _impl_.can_use_;
}
inline bool HorseSkill::can_use() const {
  // @@protoc_insertion_point(field_get:base.HorseSkill.can_use)
  return _internal_can_use();
}
inline void HorseSkill::_internal_set_can_use(bool value) {
  
  _impl_.can_use_ = value;
}
inline void HorseSkill::set_can_use(bool value) {
  _internal_set_can_use(value);
  // @@protoc_insertion_point(field_set:base.HorseSkill.can_use)
}

// -------------------------------------------------------------------

// SItemGuid

// int32 world = 1;
inline void SItemGuid::clear_world() {
  _impl_.world_ = 0;
}
inline int32_t SItemGuid::_internal_world() const {
  return _impl_.world_;
}
inline int32_t SItemGuid::world() const {
  // @@protoc_insertion_point(field_get:base.SItemGuid.world)
  return _internal_world();
}
inline void SItemGuid::_internal_set_world(int32_t value) {
  
  _impl_.world_ = value;
}
inline void SItemGuid::set_world(int32_t value) {
  _internal_set_world(value);
  // @@protoc_insertion_point(field_set:base.SItemGuid.world)
}

// int32 server = 2;
inline void SItemGuid::clear_server() {
  _impl_.server_ = 0;
}
inline int32_t SItemGuid::_internal_server() const {
  return _impl_.server_;
}
inline int32_t SItemGuid::server() const {
  // @@protoc_insertion_point(field_get:base.SItemGuid.server)
  return _internal_server();
}
inline void SItemGuid::_internal_set_server(int32_t value) {
  
  _impl_.server_ = value;
}
inline void SItemGuid::set_server(int32_t value) {
  _internal_set_server(value);
  // @@protoc_insertion_point(field_set:base.SItemGuid.server)
}

// int32 serial = 3;
inline void SItemGuid::clear_serial() {
  _impl_.serial_ = 0;
}
inline int32_t SItemGuid::_internal_serial() const {
  return _impl_.serial_;
}
inline int32_t SItemGuid::serial() const {
  // @@protoc_insertion_point(field_get:base.SItemGuid.serial)
  return _internal_serial();
}
inline void SItemGuid::_internal_set_serial(int32_t value) {
  
  _impl_.serial_ = value;
}
inline void SItemGuid::set_serial(int32_t value) {
  _internal_set_serial(value);
  // @@protoc_insertion_point(field_set:base.SItemGuid.serial)
}

// -------------------------------------------------------------------

// SItemGemInfo

// uint32 gem_index = 1;
inline void SItemGemInfo::clear_gem_index() {
  _impl_.gem_index_ = 0u;
}
inline uint32_t SItemGemInfo::_internal_gem_index() const {
  return _impl_.gem_index_;
}
inline uint32_t SItemGemInfo::gem_index() const {
  // @@protoc_insertion_point(field_get:base.SItemGemInfo.gem_index)
  return _internal_gem_index();
}
inline void SItemGemInfo::_internal_set_gem_index(uint32_t value) {
  
  _impl_.gem_index_ = value;
}
inline void SItemGemInfo::set_gem_index(uint32_t value) {
  _internal_set_gem_index(value);
  // @@protoc_insertion_point(field_set:base.SItemGemInfo.gem_index)
}

// -------------------------------------------------------------------

// SItemValue

// int32 value = 1;
inline void SItemValue::clear_value() {
  _impl_.value_ = 0;
}
inline int32_t SItemValue::_internal_value() const {
  return _impl_.value_;
}
inline int32_t SItemValue::value() const {
  // @@protoc_insertion_point(field_get:base.SItemValue.value)
  return _internal_value();
}
inline void SItemValue::_internal_set_value(int32_t value) {
  
  _impl_.value_ = value;
}
inline void SItemValue::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:base.SItemValue.value)
}

// -------------------------------------------------------------------

// SItemProperty

// int32 attr_type = 1;
inline void SItemProperty::clear_attr_type() {
  _impl_.attr_type_ = 0;
}
inline int32_t SItemProperty::_internal_attr_type() const {
  return _impl_.attr_type_;
}
inline int32_t SItemProperty::attr_type() const {
  // @@protoc_insertion_point(field_get:base.SItemProperty.attr_type)
  return _internal_attr_type();
}
inline void SItemProperty::_internal_set_attr_type(int32_t value) {
  
  _impl_.attr_type_ = value;
}
inline void SItemProperty::set_attr_type(int32_t value) {
  _internal_set_attr_type(value);
  // @@protoc_insertion_point(field_set:base.SItemProperty.attr_type)
}

// int32 intensify_count = 2;
inline void SItemProperty::clear_intensify_count() {
  _impl_.intensify_count_ = 0;
}
inline int32_t SItemProperty::_internal_intensify_count() const {
  return _impl_.intensify_count_;
}
inline int32_t SItemProperty::intensify_count() const {
  // @@protoc_insertion_point(field_get:base.SItemProperty.intensify_count)
  return _internal_intensify_count();
}
inline void SItemProperty::_internal_set_intensify_count(int32_t value) {
  
  _impl_.intensify_count_ = value;
}
inline void SItemProperty::set_intensify_count(int32_t value) {
  _internal_set_intensify_count(value);
  // @@protoc_insertion_point(field_set:base.SItemProperty.intensify_count)
}

// .base.SItemValue item_value = 3;
inline bool SItemProperty::_internal_has_item_value() const {
  return this != internal_default_instance() && _impl_.item_value_ != nullptr;
}
inline bool SItemProperty::has_item_value() const {
  return _internal_has_item_value();
}
inline void SItemProperty::clear_item_value() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_value_ != nullptr) {
    delete _impl_.item_value_;
  }
  _impl_.item_value_ = nullptr;
}
inline const ::base::SItemValue& SItemProperty::_internal_item_value() const {
  const ::base::SItemValue* p = _impl_.item_value_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::SItemValue&>(
      ::base::_SItemValue_default_instance_);
}
inline const ::base::SItemValue& SItemProperty::item_value() const {
  // @@protoc_insertion_point(field_get:base.SItemProperty.item_value)
  return _internal_item_value();
}
inline void SItemProperty::unsafe_arena_set_allocated_item_value(
    ::base::SItemValue* item_value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_value_);
  }
  _impl_.item_value_ = item_value;
  if (item_value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:base.SItemProperty.item_value)
}
inline ::base::SItemValue* SItemProperty::release_item_value() {
  
  ::base::SItemValue* temp = _impl_.item_value_;
  _impl_.item_value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::SItemValue* SItemProperty::unsafe_arena_release_item_value() {
  // @@protoc_insertion_point(field_release:base.SItemProperty.item_value)
  
  ::base::SItemValue* temp = _impl_.item_value_;
  _impl_.item_value_ = nullptr;
  return temp;
}
inline ::base::SItemValue* SItemProperty::_internal_mutable_item_value() {
  
  if (_impl_.item_value_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::SItemValue>(GetArenaForAllocation());
    _impl_.item_value_ = p;
  }
  return _impl_.item_value_;
}
inline ::base::SItemValue* SItemProperty::mutable_item_value() {
  ::base::SItemValue* _msg = _internal_mutable_item_value();
  // @@protoc_insertion_point(field_mutable:base.SItemProperty.item_value)
  return _msg;
}
inline void SItemProperty::set_allocated_item_value(::base::SItemValue* item_value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_value_;
  }
  if (item_value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_value);
    if (message_arena != submessage_arena) {
      item_value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_value, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_value_ = item_value;
  // @@protoc_insertion_point(field_set_allocated:base.SItemProperty.item_value)
}

// -------------------------------------------------------------------

// SItemConstInfo

// int32 const_id = 1;
inline void SItemConstInfo::clear_const_id() {
  _impl_.const_id_ = 0;
}
inline int32_t SItemConstInfo::_internal_const_id() const {
  return _impl_.const_id_;
}
inline int32_t SItemConstInfo::const_id() const {
  // @@protoc_insertion_point(field_get:base.SItemConstInfo.const_id)
  return _internal_const_id();
}
inline void SItemConstInfo::_internal_set_const_id(int32_t value) {
  
  _impl_.const_id_ = value;
}
inline void SItemConstInfo::set_const_id(int32_t value) {
  _internal_set_const_id(value);
  // @@protoc_insertion_point(field_set:base.SItemConstInfo.const_id)
}

// repeated .base.SItemProperty const_attrs = 2;
inline int SItemConstInfo::_internal_const_attrs_size() const {
  return _impl_.const_attrs_.size();
}
inline int SItemConstInfo::const_attrs_size() const {
  return _internal_const_attrs_size();
}
inline void SItemConstInfo::clear_const_attrs() {
  _impl_.const_attrs_.Clear();
}
inline ::base::SItemProperty* SItemConstInfo::mutable_const_attrs(int index) {
  // @@protoc_insertion_point(field_mutable:base.SItemConstInfo.const_attrs)
  return _impl_.const_attrs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty >*
SItemConstInfo::mutable_const_attrs() {
  // @@protoc_insertion_point(field_mutable_list:base.SItemConstInfo.const_attrs)
  return &_impl_.const_attrs_;
}
inline const ::base::SItemProperty& SItemConstInfo::_internal_const_attrs(int index) const {
  return _impl_.const_attrs_.Get(index);
}
inline const ::base::SItemProperty& SItemConstInfo::const_attrs(int index) const {
  // @@protoc_insertion_point(field_get:base.SItemConstInfo.const_attrs)
  return _internal_const_attrs(index);
}
inline ::base::SItemProperty* SItemConstInfo::_internal_add_const_attrs() {
  return _impl_.const_attrs_.Add();
}
inline ::base::SItemProperty* SItemConstInfo::add_const_attrs() {
  ::base::SItemProperty* _add = _internal_add_const_attrs();
  // @@protoc_insertion_point(field_add:base.SItemConstInfo.const_attrs)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty >&
SItemConstInfo::const_attrs() const {
  // @@protoc_insertion_point(field_list:base.SItemConstInfo.const_attrs)
  return _impl_.const_attrs_;
}

// -------------------------------------------------------------------

// SEquipInfo

// int32 equip_level = 1;
inline void SEquipInfo::clear_equip_level() {
  _impl_.equip_level_ = 0;
}
inline int32_t SEquipInfo::_internal_equip_level() const {
  return _impl_.equip_level_;
}
inline int32_t SEquipInfo::equip_level() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.equip_level)
  return _internal_equip_level();
}
inline void SEquipInfo::_internal_set_equip_level(int32_t value) {
  
  _impl_.equip_level_ = value;
}
inline void SEquipInfo::set_equip_level(int32_t value) {
  _internal_set_equip_level(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.equip_level)
}

// int32 bind = 2;
inline void SEquipInfo::clear_bind() {
  _impl_.bind_ = 0;
}
inline int32_t SEquipInfo::_internal_bind() const {
  return _impl_.bind_;
}
inline int32_t SEquipInfo::bind() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.bind)
  return _internal_bind();
}
inline void SEquipInfo::_internal_set_bind(int32_t value) {
  
  _impl_.bind_ = value;
}
inline void SEquipInfo::set_bind(int32_t value) {
  _internal_set_bind(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.bind)
}

// int32 pai_type = 3;
inline void SEquipInfo::clear_pai_type() {
  _impl_.pai_type_ = 0;
}
inline int32_t SEquipInfo::_internal_pai_type() const {
  return _impl_.pai_type_;
}
inline int32_t SEquipInfo::pai_type() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.pai_type)
  return _internal_pai_type();
}
inline void SEquipInfo::_internal_set_pai_type(int32_t value) {
  
  _impl_.pai_type_ = value;
}
inline void SEquipInfo::set_pai_type(int32_t value) {
  _internal_set_pai_type(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.pai_type)
}

// int32 equip_type = 4;
inline void SEquipInfo::clear_equip_type() {
  _impl_.equip_type_ = 0;
}
inline int32_t SEquipInfo::_internal_equip_type() const {
  return _impl_.equip_type_;
}
inline int32_t SEquipInfo::equip_type() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.equip_type)
  return _internal_equip_type();
}
inline void SEquipInfo::_internal_set_equip_type(int32_t value) {
  
  _impl_.equip_type_ = value;
}
inline void SEquipInfo::set_equip_type(int32_t value) {
  _internal_set_equip_type(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.equip_type)
}

// int32 equip_score = 5;
inline void SEquipInfo::clear_equip_score() {
  _impl_.equip_score_ = 0;
}
inline int32_t SEquipInfo::_internal_equip_score() const {
  return _impl_.equip_score_;
}
inline int32_t SEquipInfo::equip_score() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.equip_score)
  return _internal_equip_score();
}
inline void SEquipInfo::_internal_set_equip_score(int32_t value) {
  
  _impl_.equip_score_ = value;
}
inline void SEquipInfo::set_equip_score(int32_t value) {
  _internal_set_equip_score(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.equip_score)
}

// int32 level = 6;
inline void SEquipInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SEquipInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SEquipInfo::level() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.level)
  return _internal_level();
}
inline void SEquipInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SEquipInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.level)
}

// int32 curr_max_dur = 7;
inline void SEquipInfo::clear_curr_max_dur() {
  _impl_.curr_max_dur_ = 0;
}
inline int32_t SEquipInfo::_internal_curr_max_dur() const {
  return _impl_.curr_max_dur_;
}
inline int32_t SEquipInfo::curr_max_dur() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.curr_max_dur)
  return _internal_curr_max_dur();
}
inline void SEquipInfo::_internal_set_curr_max_dur(int32_t value) {
  
  _impl_.curr_max_dur_ = value;
}
inline void SEquipInfo::set_curr_max_dur(int32_t value) {
  _internal_set_curr_max_dur(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.curr_max_dur)
}

// int32 curr_dur_point = 8;
inline void SEquipInfo::clear_curr_dur_point() {
  _impl_.curr_dur_point_ = 0;
}
inline int32_t SEquipInfo::_internal_curr_dur_point() const {
  return _impl_.curr_dur_point_;
}
inline int32_t SEquipInfo::curr_dur_point() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.curr_dur_point)
  return _internal_curr_dur_point();
}
inline void SEquipInfo::_internal_set_curr_dur_point(int32_t value) {
  
  _impl_.curr_dur_point_ = value;
}
inline void SEquipInfo::set_curr_dur_point(int32_t value) {
  _internal_set_curr_dur_point(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.curr_dur_point)
}

// int32 curr_damage_point = 9;
inline void SEquipInfo::clear_curr_damage_point() {
  _impl_.curr_damage_point_ = 0;
}
inline int32_t SEquipInfo::_internal_curr_damage_point() const {
  return _impl_.curr_damage_point_;
}
inline int32_t SEquipInfo::curr_damage_point() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.curr_damage_point)
  return _internal_curr_damage_point();
}
inline void SEquipInfo::_internal_set_curr_damage_point(int32_t value) {
  
  _impl_.curr_damage_point_ = value;
}
inline void SEquipInfo::set_curr_damage_point(int32_t value) {
  _internal_set_curr_damage_point(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.curr_damage_point)
}

// int32 curr_gem_hole = 10;
inline void SEquipInfo::clear_curr_gem_hole() {
  _impl_.curr_gem_hole_ = 0;
}
inline int32_t SEquipInfo::_internal_curr_gem_hole() const {
  return _impl_.curr_gem_hole_;
}
inline int32_t SEquipInfo::curr_gem_hole() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.curr_gem_hole)
  return _internal_curr_gem_hole();
}
inline void SEquipInfo::_internal_set_curr_gem_hole(int32_t value) {
  
  _impl_.curr_gem_hole_ = value;
}
inline void SEquipInfo::set_curr_gem_hole(int32_t value) {
  _internal_set_curr_gem_hole(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.curr_gem_hole)
}

// repeated .base.SItemGemInfo gems = 11;
inline int SEquipInfo::_internal_gems_size() const {
  return _impl_.gems_.size();
}
inline int SEquipInfo::gems_size() const {
  return _internal_gems_size();
}
inline void SEquipInfo::clear_gems() {
  _impl_.gems_.Clear();
}
inline ::base::SItemGemInfo* SEquipInfo::mutable_gems(int index) {
  // @@protoc_insertion_point(field_mutable:base.SEquipInfo.gems)
  return _impl_.gems_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemGemInfo >*
SEquipInfo::mutable_gems() {
  // @@protoc_insertion_point(field_mutable_list:base.SEquipInfo.gems)
  return &_impl_.gems_;
}
inline const ::base::SItemGemInfo& SEquipInfo::_internal_gems(int index) const {
  return _impl_.gems_.Get(index);
}
inline const ::base::SItemGemInfo& SEquipInfo::gems(int index) const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.gems)
  return _internal_gems(index);
}
inline ::base::SItemGemInfo* SEquipInfo::_internal_add_gems() {
  return _impl_.gems_.Add();
}
inline ::base::SItemGemInfo* SEquipInfo::add_gems() {
  ::base::SItemGemInfo* _add = _internal_add_gems();
  // @@protoc_insertion_point(field_add:base.SEquipInfo.gems)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemGemInfo >&
SEquipInfo::gems() const {
  // @@protoc_insertion_point(field_list:base.SEquipInfo.gems)
  return _impl_.gems_;
}

// repeated .base.SItemProperty propertys = 12;
inline int SEquipInfo::_internal_propertys_size() const {
  return _impl_.propertys_.size();
}
inline int SEquipInfo::propertys_size() const {
  return _internal_propertys_size();
}
inline void SEquipInfo::clear_propertys() {
  _impl_.propertys_.Clear();
}
inline ::base::SItemProperty* SEquipInfo::mutable_propertys(int index) {
  // @@protoc_insertion_point(field_mutable:base.SEquipInfo.propertys)
  return _impl_.propertys_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty >*
SEquipInfo::mutable_propertys() {
  // @@protoc_insertion_point(field_mutable_list:base.SEquipInfo.propertys)
  return &_impl_.propertys_;
}
inline const ::base::SItemProperty& SEquipInfo::_internal_propertys(int index) const {
  return _impl_.propertys_.Get(index);
}
inline const ::base::SItemProperty& SEquipInfo::propertys(int index) const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.propertys)
  return _internal_propertys(index);
}
inline ::base::SItemProperty* SEquipInfo::_internal_add_propertys() {
  return _impl_.propertys_.Add();
}
inline ::base::SItemProperty* SEquipInfo::add_propertys() {
  ::base::SItemProperty* _add = _internal_add_propertys();
  // @@protoc_insertion_point(field_add:base.SEquipInfo.propertys)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemProperty >&
SEquipInfo::propertys() const {
  // @@protoc_insertion_point(field_list:base.SEquipInfo.propertys)
  return _impl_.propertys_;
}

// int32 lock = 13;
inline void SEquipInfo::clear_lock() {
  _impl_.lock_ = 0;
}
inline int32_t SEquipInfo::_internal_lock() const {
  return _impl_.lock_;
}
inline int32_t SEquipInfo::lock() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.lock)
  return _internal_lock();
}
inline void SEquipInfo::_internal_set_lock(int32_t value) {
  
  _impl_.lock_ = value;
}
inline void SEquipInfo::set_lock(int32_t value) {
  _internal_set_lock(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.lock)
}

// int32 lock_time = 14;
inline void SEquipInfo::clear_lock_time() {
  _impl_.lock_time_ = 0;
}
inline int32_t SEquipInfo::_internal_lock_time() const {
  return _impl_.lock_time_;
}
inline int32_t SEquipInfo::lock_time() const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.lock_time)
  return _internal_lock_time();
}
inline void SEquipInfo::_internal_set_lock_time(int32_t value) {
  
  _impl_.lock_time_ = value;
}
inline void SEquipInfo::set_lock_time(int32_t value) {
  _internal_set_lock_time(value);
  // @@protoc_insertion_point(field_set:base.SEquipInfo.lock_time)
}

// repeated .base.SItemConstInfo consts = 15;
inline int SEquipInfo::_internal_consts_size() const {
  return _impl_.consts_.size();
}
inline int SEquipInfo::consts_size() const {
  return _internal_consts_size();
}
inline void SEquipInfo::clear_consts() {
  _impl_.consts_.Clear();
}
inline ::base::SItemConstInfo* SEquipInfo::mutable_consts(int index) {
  // @@protoc_insertion_point(field_mutable:base.SEquipInfo.consts)
  return _impl_.consts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemConstInfo >*
SEquipInfo::mutable_consts() {
  // @@protoc_insertion_point(field_mutable_list:base.SEquipInfo.consts)
  return &_impl_.consts_;
}
inline const ::base::SItemConstInfo& SEquipInfo::_internal_consts(int index) const {
  return _impl_.consts_.Get(index);
}
inline const ::base::SItemConstInfo& SEquipInfo::consts(int index) const {
  // @@protoc_insertion_point(field_get:base.SEquipInfo.consts)
  return _internal_consts(index);
}
inline ::base::SItemConstInfo* SEquipInfo::_internal_add_consts() {
  return _impl_.consts_.Add();
}
inline ::base::SItemConstInfo* SEquipInfo::add_consts() {
  ::base::SItemConstInfo* _add = _internal_add_consts();
  // @@protoc_insertion_point(field_add:base.SEquipInfo.consts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SItemConstInfo >&
SEquipInfo::consts() const {
  // @@protoc_insertion_point(field_list:base.SEquipInfo.consts)
  return _impl_.consts_;
}

// -------------------------------------------------------------------

// SMedicInfo

// int32 count = 1;
inline void SMedicInfo::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t SMedicInfo::_internal_count() const {
  return _impl_.count_;
}
inline int32_t SMedicInfo::count() const {
  // @@protoc_insertion_point(field_get:base.SMedicInfo.count)
  return _internal_count();
}
inline void SMedicInfo::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void SMedicInfo::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:base.SMedicInfo.count)
}

// int32 level = 2;
inline void SMedicInfo::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t SMedicInfo::_internal_level() const {
  return _impl_.level_;
}
inline int32_t SMedicInfo::level() const {
  // @@protoc_insertion_point(field_get:base.SMedicInfo.level)
  return _internal_level();
}
inline void SMedicInfo::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void SMedicInfo::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:base.SMedicInfo.level)
}

// -------------------------------------------------------------------

// ExtraBagInfo

// uint32 begin_time = 1;
inline void ExtraBagInfo::clear_begin_time() {
  _impl_.begin_time_ = 0u;
}
inline uint32_t ExtraBagInfo::_internal_begin_time() const {
  return _impl_.begin_time_;
}
inline uint32_t ExtraBagInfo::begin_time() const {
  // @@protoc_insertion_point(field_get:base.ExtraBagInfo.begin_time)
  return _internal_begin_time();
}
inline void ExtraBagInfo::_internal_set_begin_time(uint32_t value) {
  
  _impl_.begin_time_ = value;
}
inline void ExtraBagInfo::set_begin_time(uint32_t value) {
  _internal_set_begin_time(value);
  // @@protoc_insertion_point(field_set:base.ExtraBagInfo.begin_time)
}

// -------------------------------------------------------------------

// SItem

// int32 item_id = 1;
inline void SItem::clear_item_id() {
  _impl_.item_id_ = 0;
}
inline int32_t SItem::_internal_item_id() const {
  return _impl_.item_id_;
}
inline int32_t SItem::item_id() const {
  // @@protoc_insertion_point(field_get:base.SItem.item_id)
  return _internal_item_id();
}
inline void SItem::_internal_set_item_id(int32_t value) {
  
  _impl_.item_id_ = value;
}
inline void SItem::set_item_id(int32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:base.SItem.item_id)
}

// .base.SItemGuid item_guid = 2;
inline bool SItem::_internal_has_item_guid() const {
  return this != internal_default_instance() && _impl_.item_guid_ != nullptr;
}
inline bool SItem::has_item_guid() const {
  return _internal_has_item_guid();
}
inline void SItem::clear_item_guid() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_guid_ != nullptr) {
    delete _impl_.item_guid_;
  }
  _impl_.item_guid_ = nullptr;
}
inline const ::base::SItemGuid& SItem::_internal_item_guid() const {
  const ::base::SItemGuid* p = _impl_.item_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::SItemGuid&>(
      ::base::_SItemGuid_default_instance_);
}
inline const ::base::SItemGuid& SItem::item_guid() const {
  // @@protoc_insertion_point(field_get:base.SItem.item_guid)
  return _internal_item_guid();
}
inline void SItem::unsafe_arena_set_allocated_item_guid(
    ::base::SItemGuid* item_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.item_guid_);
  }
  _impl_.item_guid_ = item_guid;
  if (item_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:base.SItem.item_guid)
}
inline ::base::SItemGuid* SItem::release_item_guid() {
  
  ::base::SItemGuid* temp = _impl_.item_guid_;
  _impl_.item_guid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::SItemGuid* SItem::unsafe_arena_release_item_guid() {
  // @@protoc_insertion_point(field_release:base.SItem.item_guid)
  
  ::base::SItemGuid* temp = _impl_.item_guid_;
  _impl_.item_guid_ = nullptr;
  return temp;
}
inline ::base::SItemGuid* SItem::_internal_mutable_item_guid() {
  
  if (_impl_.item_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::SItemGuid>(GetArenaForAllocation());
    _impl_.item_guid_ = p;
  }
  return _impl_.item_guid_;
}
inline ::base::SItemGuid* SItem::mutable_item_guid() {
  ::base::SItemGuid* _msg = _internal_mutable_item_guid();
  // @@protoc_insertion_point(field_mutable:base.SItem.item_guid)
  return _msg;
}
inline void SItem::set_allocated_item_guid(::base::SItemGuid* item_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.item_guid_;
  }
  if (item_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(item_guid);
    if (message_arena != submessage_arena) {
      item_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item_guid, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.item_guid_ = item_guid;
  // @@protoc_insertion_point(field_set_allocated:base.SItem.item_guid)
}

// uint32 item_index = 3;
inline void SItem::clear_item_index() {
  _impl_.item_index_ = 0u;
}
inline uint32_t SItem::_internal_item_index() const {
  return _impl_.item_index_;
}
inline uint32_t SItem::item_index() const {
  // @@protoc_insertion_point(field_get:base.SItem.item_index)
  return _internal_item_index();
}
inline void SItem::_internal_set_item_index(uint32_t value) {
  
  _impl_.item_index_ = value;
}
inline void SItem::set_item_index(uint32_t value) {
  _internal_set_item_index(value);
  // @@protoc_insertion_point(field_set:base.SItem.item_index)
}

// int32 ns_bind = 4;
inline void SItem::clear_ns_bind() {
  _impl_.ns_bind_ = 0;
}
inline int32_t SItem::_internal_ns_bind() const {
  return _impl_.ns_bind_;
}
inline int32_t SItem::ns_bind() const {
  // @@protoc_insertion_point(field_get:base.SItem.ns_bind)
  return _internal_ns_bind();
}
inline void SItem::_internal_set_ns_bind(int32_t value) {
  
  _impl_.ns_bind_ = value;
}
inline void SItem::set_ns_bind(int32_t value) {
  _internal_set_ns_bind(value);
  // @@protoc_insertion_point(field_set:base.SItem.ns_bind)
}

// string creator = 5;
inline void SItem::clear_creator() {
  _impl_.creator_.ClearToEmpty();
}
inline const std::string& SItem::creator() const {
  // @@protoc_insertion_point(field_get:base.SItem.creator)
  return _internal_creator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SItem::set_creator(ArgT0&& arg0, ArgT... args) {
 
 _impl_.creator_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:base.SItem.creator)
}
inline std::string* SItem::mutable_creator() {
  std::string* _s = _internal_mutable_creator();
  // @@protoc_insertion_point(field_mutable:base.SItem.creator)
  return _s;
}
inline const std::string& SItem::_internal_creator() const {
  return _impl_.creator_.Get();
}
inline void SItem::_internal_set_creator(const std::string& value) {
  
  _impl_.creator_.Set(value, GetArenaForAllocation());
}
inline std::string* SItem::_internal_mutable_creator() {
  
  return _impl_.creator_.Mutable(GetArenaForAllocation());
}
inline std::string* SItem::release_creator() {
  // @@protoc_insertion_point(field_release:base.SItem.creator)
  return _impl_.creator_.Release();
}
inline void SItem::set_allocated_creator(std::string* creator) {
  if (creator != nullptr) {
    
  } else {
    
  }
  _impl_.creator_.SetAllocated(creator, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.creator_.IsDefault()) {
    _impl_.creator_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:base.SItem.creator)
}

// repeated int32 params = 6;
inline int SItem::_internal_params_size() const {
  return _impl_.params_.size();
}
inline int SItem::params_size() const {
  return _internal_params_size();
}
inline void SItem::clear_params() {
  _impl_.params_.Clear();
}
inline int32_t SItem::_internal_params(int index) const {
  return _impl_.params_.Get(index);
}
inline int32_t SItem::params(int index) const {
  // @@protoc_insertion_point(field_get:base.SItem.params)
  return _internal_params(index);
}
inline void SItem::set_params(int index, int32_t value) {
  _impl_.params_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.SItem.params)
}
inline void SItem::_internal_add_params(int32_t value) {
  _impl_.params_.Add(value);
}
inline void SItem::add_params(int32_t value) {
  _internal_add_params(value);
  // @@protoc_insertion_point(field_add:base.SItem.params)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SItem::_internal_params() const {
  return _impl_.params_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SItem::params() const {
  // @@protoc_insertion_point(field_list:base.SItem.params)
  return _internal_params();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SItem::_internal_mutable_params() {
  return &_impl_.params_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SItem::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:base.SItem.params)
  return _internal_mutable_params();
}

// uint32 term_endtime = 7;
inline void SItem::clear_term_endtime() {
  _impl_.term_endtime_ = 0u;
}
inline uint32_t SItem::_internal_term_endtime() const {
  return _impl_.term_endtime_;
}
inline uint32_t SItem::term_endtime() const {
  // @@protoc_insertion_point(field_get:base.SItem.term_endtime)
  return _internal_term_endtime();
}
inline void SItem::_internal_set_term_endtime(uint32_t value) {
  
  _impl_.term_endtime_ = value;
}
inline void SItem::set_term_endtime(uint32_t value) {
  _internal_set_term_endtime(value);
  // @@protoc_insertion_point(field_set:base.SItem.term_endtime)
}

// optional .base.SEquipInfo equip_info = 8;
inline bool SItem::_internal_has_equip_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.equip_info_ != nullptr);
  return value;
}
inline bool SItem::has_equip_info() const {
  return _internal_has_equip_info();
}
inline void SItem::clear_equip_info() {
  if (_impl_.equip_info_ != nullptr) _impl_.equip_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::base::SEquipInfo& SItem::_internal_equip_info() const {
  const ::base::SEquipInfo* p = _impl_.equip_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::SEquipInfo&>(
      ::base::_SEquipInfo_default_instance_);
}
inline const ::base::SEquipInfo& SItem::equip_info() const {
  // @@protoc_insertion_point(field_get:base.SItem.equip_info)
  return _internal_equip_info();
}
inline void SItem::unsafe_arena_set_allocated_equip_info(
    ::base::SEquipInfo* equip_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.equip_info_);
  }
  _impl_.equip_info_ = equip_info;
  if (equip_info) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:base.SItem.equip_info)
}
inline ::base::SEquipInfo* SItem::release_equip_info() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::base::SEquipInfo* temp = _impl_.equip_info_;
  _impl_.equip_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::SEquipInfo* SItem::unsafe_arena_release_equip_info() {
  // @@protoc_insertion_point(field_release:base.SItem.equip_info)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::base::SEquipInfo* temp = _impl_.equip_info_;
  _impl_.equip_info_ = nullptr;
  return temp;
}
inline ::base::SEquipInfo* SItem::_internal_mutable_equip_info() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.equip_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::SEquipInfo>(GetArenaForAllocation());
    _impl_.equip_info_ = p;
  }
  return _impl_.equip_info_;
}
inline ::base::SEquipInfo* SItem::mutable_equip_info() {
  ::base::SEquipInfo* _msg = _internal_mutable_equip_info();
  // @@protoc_insertion_point(field_mutable:base.SItem.equip_info)
  return _msg;
}
inline void SItem::set_allocated_equip_info(::base::SEquipInfo* equip_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.equip_info_;
  }
  if (equip_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(equip_info);
    if (message_arena != submessage_arena) {
      equip_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, equip_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.equip_info_ = equip_info;
  // @@protoc_insertion_point(field_set_allocated:base.SItem.equip_info)
}

// optional .base.SMedicInfo medic_info = 9;
inline bool SItem::_internal_has_medic_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.medic_info_ != nullptr);
  return value;
}
inline bool SItem::has_medic_info() const {
  return _internal_has_medic_info();
}
inline void SItem::clear_medic_info() {
  if (_impl_.medic_info_ != nullptr) _impl_.medic_info_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::base::SMedicInfo& SItem::_internal_medic_info() const {
  const ::base::SMedicInfo* p = _impl_.medic_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::SMedicInfo&>(
      ::base::_SMedicInfo_default_instance_);
}
inline const ::base::SMedicInfo& SItem::medic_info() const {
  // @@protoc_insertion_point(field_get:base.SItem.medic_info)
  return _internal_medic_info();
}
inline void SItem::unsafe_arena_set_allocated_medic_info(
    ::base::SMedicInfo* medic_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.medic_info_);
  }
  _impl_.medic_info_ = medic_info;
  if (medic_info) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:base.SItem.medic_info)
}
inline ::base::SMedicInfo* SItem::release_medic_info() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::base::SMedicInfo* temp = _impl_.medic_info_;
  _impl_.medic_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::SMedicInfo* SItem::unsafe_arena_release_medic_info() {
  // @@protoc_insertion_point(field_release:base.SItem.medic_info)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::base::SMedicInfo* temp = _impl_.medic_info_;
  _impl_.medic_info_ = nullptr;
  return temp;
}
inline ::base::SMedicInfo* SItem::_internal_mutable_medic_info() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.medic_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::SMedicInfo>(GetArenaForAllocation());
    _impl_.medic_info_ = p;
  }
  return _impl_.medic_info_;
}
inline ::base::SMedicInfo* SItem::mutable_medic_info() {
  ::base::SMedicInfo* _msg = _internal_mutable_medic_info();
  // @@protoc_insertion_point(field_mutable:base.SItem.medic_info)
  return _msg;
}
inline void SItem::set_allocated_medic_info(::base::SMedicInfo* medic_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.medic_info_;
  }
  if (medic_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(medic_info);
    if (message_arena != submessage_arena) {
      medic_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, medic_info, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.medic_info_ = medic_info;
  // @@protoc_insertion_point(field_set_allocated:base.SItem.medic_info)
}

// optional .base.ExtraBagInfo extra_bag = 10;
inline bool SItem::_internal_has_extra_bag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.extra_bag_ != nullptr);
  return value;
}
inline bool SItem::has_extra_bag() const {
  return _internal_has_extra_bag();
}
inline void SItem::clear_extra_bag() {
  if (_impl_.extra_bag_ != nullptr) _impl_.extra_bag_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::base::ExtraBagInfo& SItem::_internal_extra_bag() const {
  const ::base::ExtraBagInfo* p = _impl_.extra_bag_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::ExtraBagInfo&>(
      ::base::_ExtraBagInfo_default_instance_);
}
inline const ::base::ExtraBagInfo& SItem::extra_bag() const {
  // @@protoc_insertion_point(field_get:base.SItem.extra_bag)
  return _internal_extra_bag();
}
inline void SItem::unsafe_arena_set_allocated_extra_bag(
    ::base::ExtraBagInfo* extra_bag) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_bag_);
  }
  _impl_.extra_bag_ = extra_bag;
  if (extra_bag) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:base.SItem.extra_bag)
}
inline ::base::ExtraBagInfo* SItem::release_extra_bag() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::base::ExtraBagInfo* temp = _impl_.extra_bag_;
  _impl_.extra_bag_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::ExtraBagInfo* SItem::unsafe_arena_release_extra_bag() {
  // @@protoc_insertion_point(field_release:base.SItem.extra_bag)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::base::ExtraBagInfo* temp = _impl_.extra_bag_;
  _impl_.extra_bag_ = nullptr;
  return temp;
}
inline ::base::ExtraBagInfo* SItem::_internal_mutable_extra_bag() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.extra_bag_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::ExtraBagInfo>(GetArenaForAllocation());
    _impl_.extra_bag_ = p;
  }
  return _impl_.extra_bag_;
}
inline ::base::ExtraBagInfo* SItem::mutable_extra_bag() {
  ::base::ExtraBagInfo* _msg = _internal_mutable_extra_bag();
  // @@protoc_insertion_point(field_mutable:base.SItem.extra_bag)
  return _msg;
}
inline void SItem::set_allocated_extra_bag(::base::ExtraBagInfo* extra_bag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.extra_bag_;
  }
  if (extra_bag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(extra_bag);
    if (message_arena != submessage_arena) {
      extra_bag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra_bag, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.extra_bag_ = extra_bag;
  // @@protoc_insertion_point(field_set_allocated:base.SItem.extra_bag)
}

// -------------------------------------------------------------------

// PlayerSpell

// int32 skill_id = 1;
inline void PlayerSpell::clear_skill_id() {
  _impl_.skill_id_ = 0;
}
inline int32_t PlayerSpell::_internal_skill_id() const {
  return _impl_.skill_id_;
}
inline int32_t PlayerSpell::skill_id() const {
  // @@protoc_insertion_point(field_get:base.PlayerSpell.skill_id)
  return _internal_skill_id();
}
inline void PlayerSpell::_internal_set_skill_id(int32_t value) {
  
  _impl_.skill_id_ = value;
}
inline void PlayerSpell::set_skill_id(int32_t value) {
  _internal_set_skill_id(value);
  // @@protoc_insertion_point(field_set:base.PlayerSpell.skill_id)
}

// int32 state = 2;
inline void PlayerSpell::clear_state() {
  _impl_.state_ = 0;
}
inline int32_t PlayerSpell::_internal_state() const {
  return _impl_.state_;
}
inline int32_t PlayerSpell::state() const {
  // @@protoc_insertion_point(field_get:base.PlayerSpell.state)
  return _internal_state();
}
inline void PlayerSpell::_internal_set_state(int32_t value) {
  
  _impl_.state_ = value;
}
inline void PlayerSpell::set_state(int32_t value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:base.PlayerSpell.state)
}

// int32 level = 3;
inline void PlayerSpell::clear_level() {
  _impl_.level_ = 0;
}
inline int32_t PlayerSpell::_internal_level() const {
  return _impl_.level_;
}
inline int32_t PlayerSpell::level() const {
  // @@protoc_insertion_point(field_get:base.PlayerSpell.level)
  return _internal_level();
}
inline void PlayerSpell::_internal_set_level(int32_t value) {
  
  _impl_.level_ = value;
}
inline void PlayerSpell::set_level(int32_t value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:base.PlayerSpell.level)
}

// -------------------------------------------------------------------

// SArchiveLoader_Quest

// int32 count = 1;
inline void SArchiveLoader_Quest::clear_count() {
  _impl_.count_ = 0;
}
inline int32_t SArchiveLoader_Quest::_internal_count() const {
  return _impl_.count_;
}
inline int32_t SArchiveLoader_Quest::count() const {
  // @@protoc_insertion_point(field_get:base.SArchiveLoader_Quest.count)
  return _internal_count();
}
inline void SArchiveLoader_Quest::_internal_set_count(int32_t value) {
  
  _impl_.count_ = value;
}
inline void SArchiveLoader_Quest::set_count(int32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:base.SArchiveLoader_Quest.count)
}

// repeated .base.Quest quests = 2;
inline int SArchiveLoader_Quest::_internal_quests_size() const {
  return _impl_.quests_.size();
}
inline int SArchiveLoader_Quest::quests_size() const {
  return _internal_quests_size();
}
inline void SArchiveLoader_Quest::clear_quests() {
  _impl_.quests_.Clear();
}
inline ::base::Quest* SArchiveLoader_Quest::mutable_quests(int index) {
  // @@protoc_insertion_point(field_mutable:base.SArchiveLoader_Quest.quests)
  return _impl_.quests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::Quest >*
SArchiveLoader_Quest::mutable_quests() {
  // @@protoc_insertion_point(field_mutable_list:base.SArchiveLoader_Quest.quests)
  return &_impl_.quests_;
}
inline const ::base::Quest& SArchiveLoader_Quest::_internal_quests(int index) const {
  return _impl_.quests_.Get(index);
}
inline const ::base::Quest& SArchiveLoader_Quest::quests(int index) const {
  // @@protoc_insertion_point(field_get:base.SArchiveLoader_Quest.quests)
  return _internal_quests(index);
}
inline ::base::Quest* SArchiveLoader_Quest::_internal_add_quests() {
  return _impl_.quests_.Add();
}
inline ::base::Quest* SArchiveLoader_Quest::add_quests() {
  ::base::Quest* _add = _internal_add_quests();
  // @@protoc_insertion_point(field_add:base.SArchiveLoader_Quest.quests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::Quest >&
SArchiveLoader_Quest::quests() const {
  // @@protoc_insertion_point(field_list:base.SArchiveLoader_Quest.quests)
  return _impl_.quests_;
}

// repeated uint32 have_dones = 3;
inline int SArchiveLoader_Quest::_internal_have_dones_size() const {
  return _impl_.have_dones_.size();
}
inline int SArchiveLoader_Quest::have_dones_size() const {
  return _internal_have_dones_size();
}
inline void SArchiveLoader_Quest::clear_have_dones() {
  _impl_.have_dones_.Clear();
}
inline uint32_t SArchiveLoader_Quest::_internal_have_dones(int index) const {
  return _impl_.have_dones_.Get(index);
}
inline uint32_t SArchiveLoader_Quest::have_dones(int index) const {
  // @@protoc_insertion_point(field_get:base.SArchiveLoader_Quest.have_dones)
  return _internal_have_dones(index);
}
inline void SArchiveLoader_Quest::set_have_dones(int index, uint32_t value) {
  _impl_.have_dones_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.SArchiveLoader_Quest.have_dones)
}
inline void SArchiveLoader_Quest::_internal_add_have_dones(uint32_t value) {
  _impl_.have_dones_.Add(value);
}
inline void SArchiveLoader_Quest::add_have_dones(uint32_t value) {
  _internal_add_have_dones(value);
  // @@protoc_insertion_point(field_add:base.SArchiveLoader_Quest.have_dones)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SArchiveLoader_Quest::_internal_have_dones() const {
  return _impl_.have_dones_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
SArchiveLoader_Quest::have_dones() const {
  // @@protoc_insertion_point(field_list:base.SArchiveLoader_Quest.have_dones)
  return _internal_have_dones();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SArchiveLoader_Quest::_internal_mutable_have_dones() {
  return &_impl_.have_dones_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
SArchiveLoader_Quest::mutable_have_dones() {
  // @@protoc_insertion_point(field_mutable_list:base.SArchiveLoader_Quest.have_dones)
  return _internal_mutable_have_dones();
}

// repeated int32 quest_datas = 4;
inline int SArchiveLoader_Quest::_internal_quest_datas_size() const {
  return _impl_.quest_datas_.size();
}
inline int SArchiveLoader_Quest::quest_datas_size() const {
  return _internal_quest_datas_size();
}
inline void SArchiveLoader_Quest::clear_quest_datas() {
  _impl_.quest_datas_.Clear();
}
inline int32_t SArchiveLoader_Quest::_internal_quest_datas(int index) const {
  return _impl_.quest_datas_.Get(index);
}
inline int32_t SArchiveLoader_Quest::quest_datas(int index) const {
  // @@protoc_insertion_point(field_get:base.SArchiveLoader_Quest.quest_datas)
  return _internal_quest_datas(index);
}
inline void SArchiveLoader_Quest::set_quest_datas(int index, int32_t value) {
  _impl_.quest_datas_.Set(index, value);
  // @@protoc_insertion_point(field_set:base.SArchiveLoader_Quest.quest_datas)
}
inline void SArchiveLoader_Quest::_internal_add_quest_datas(int32_t value) {
  _impl_.quest_datas_.Add(value);
}
inline void SArchiveLoader_Quest::add_quest_datas(int32_t value) {
  _internal_add_quest_datas(value);
  // @@protoc_insertion_point(field_add:base.SArchiveLoader_Quest.quest_datas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SArchiveLoader_Quest::_internal_quest_datas() const {
  return _impl_.quest_datas_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
SArchiveLoader_Quest::quest_datas() const {
  // @@protoc_insertion_point(field_list:base.SArchiveLoader_Quest.quest_datas)
  return _internal_quest_datas();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SArchiveLoader_Quest::_internal_mutable_quest_datas() {
  return &_impl_.quest_datas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
SArchiveLoader_Quest::mutable_quest_datas() {
  // @@protoc_insertion_point(field_mutable_list:base.SArchiveLoader_Quest.quest_datas)
  return _internal_mutable_quest_datas();
}

// -------------------------------------------------------------------

// Player_Setting

// int32 setting_type = 1;
inline void Player_Setting::clear_setting_type() {
  _impl_.setting_type_ = 0;
}
inline int32_t Player_Setting::_internal_setting_type() const {
  return _impl_.setting_type_;
}
inline int32_t Player_Setting::setting_type() const {
  // @@protoc_insertion_point(field_get:base.Player_Setting.setting_type)
  return _internal_setting_type();
}
inline void Player_Setting::_internal_set_setting_type(int32_t value) {
  
  _impl_.setting_type_ = value;
}
inline void Player_Setting::set_setting_type(int32_t value) {
  _internal_set_setting_type(value);
  // @@protoc_insertion_point(field_set:base.Player_Setting.setting_type)
}

// int32 setting_data = 2;
inline void Player_Setting::clear_setting_data() {
  _impl_.setting_data_ = 0;
}
inline int32_t Player_Setting::_internal_setting_data() const {
  return _impl_.setting_data_;
}
inline int32_t Player_Setting::setting_data() const {
  // @@protoc_insertion_point(field_get:base.Player_Setting.setting_data)
  return _internal_setting_data();
}
inline void Player_Setting::_internal_set_setting_data(int32_t value) {
  
  _impl_.setting_data_ = value;
}
inline void Player_Setting::set_setting_data(int32_t value) {
  _internal_set_setting_data(value);
  // @@protoc_insertion_point(field_set:base.Player_Setting.setting_data)
}

// -------------------------------------------------------------------

// SQuestBonusItem

// int32 ycount = 1;
inline void SQuestBonusItem::clear_ycount() {
  _impl_.ycount_ = 0;
}
inline int32_t SQuestBonusItem::_internal_ycount() const {
  return _impl_.ycount_;
}
inline int32_t SQuestBonusItem::ycount() const {
  // @@protoc_insertion_point(field_get:base.SQuestBonusItem.ycount)
  return _internal_ycount();
}
inline void SQuestBonusItem::_internal_set_ycount(int32_t value) {
  
  _impl_.ycount_ = value;
}
inline void SQuestBonusItem::set_ycount(int32_t value) {
  _internal_set_ycount(value);
  // @@protoc_insertion_point(field_set:base.SQuestBonusItem.ycount)
}

// uint32 item_id = 2;
inline void SQuestBonusItem::clear_item_id() {
  _impl_.item_id_ = 0u;
}
inline uint32_t SQuestBonusItem::_internal_item_id() const {
  return _impl_.item_id_;
}
inline uint32_t SQuestBonusItem::item_id() const {
  // @@protoc_insertion_point(field_get:base.SQuestBonusItem.item_id)
  return _internal_item_id();
}
inline void SQuestBonusItem::_internal_set_item_id(uint32_t value) {
  
  _impl_.item_id_ = value;
}
inline void SQuestBonusItem::set_item_id(uint32_t value) {
  _internal_set_item_id(value);
  // @@protoc_insertion_point(field_set:base.SQuestBonusItem.item_id)
}

// int32 yindex = 3;
inline void SQuestBonusItem::clear_yindex() {
  _impl_.yindex_ = 0;
}
inline int32_t SQuestBonusItem::_internal_yindex() const {
  return _impl_.yindex_;
}
inline int32_t SQuestBonusItem::yindex() const {
  // @@protoc_insertion_point(field_get:base.SQuestBonusItem.yindex)
  return _internal_yindex();
}
inline void SQuestBonusItem::_internal_set_yindex(int32_t value) {
  
  _impl_.yindex_ = value;
}
inline void SQuestBonusItem::set_yindex(int32_t value) {
  _internal_set_yindex(value);
  // @@protoc_insertion_point(field_set:base.SQuestBonusItem.yindex)
}

// -------------------------------------------------------------------

// SQuestBonus

// int32 type = 1;
inline void SQuestBonus::clear_type() {
  _impl_.type_ = 0;
}
inline int32_t SQuestBonus::_internal_type() const {
  return _impl_.type_;
}
inline int32_t SQuestBonus::type() const {
  // @@protoc_insertion_point(field_get:base.SQuestBonus.type)
  return _internal_type();
}
inline void SQuestBonus::_internal_set_type(int32_t value) {
  
  _impl_.type_ = value;
}
inline void SQuestBonus::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:base.SQuestBonus.type)
}

// optional uint32 money = 2;
inline bool SQuestBonus::_internal_has_money() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool SQuestBonus::has_money() const {
  return _internal_has_money();
}
inline void SQuestBonus::clear_money() {
  _impl_.money_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t SQuestBonus::_internal_money() const {
  return _impl_.money_;
}
inline uint32_t SQuestBonus::money() const {
  // @@protoc_insertion_point(field_get:base.SQuestBonus.money)
  return _internal_money();
}
inline void SQuestBonus::_internal_set_money(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.money_ = value;
}
inline void SQuestBonus::set_money(uint32_t value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:base.SQuestBonus.money)
}

// optional uint32 exp = 3;
inline bool SQuestBonus::_internal_has_exp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool SQuestBonus::has_exp() const {
  return _internal_has_exp();
}
inline void SQuestBonus::clear_exp() {
  _impl_.exp_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t SQuestBonus::_internal_exp() const {
  return _impl_.exp_;
}
inline uint32_t SQuestBonus::exp() const {
  // @@protoc_insertion_point(field_get:base.SQuestBonus.exp)
  return _internal_exp();
}
inline void SQuestBonus::_internal_set_exp(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.exp_ = value;
}
inline void SQuestBonus::set_exp(uint32_t value) {
  _internal_set_exp(value);
  // @@protoc_insertion_point(field_set:base.SQuestBonus.exp)
}

// optional .base.SQuestBonusItem bonus_item = 4;
inline bool SQuestBonus::_internal_has_bonus_item() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bonus_item_ != nullptr);
  return value;
}
inline bool SQuestBonus::has_bonus_item() const {
  return _internal_has_bonus_item();
}
inline void SQuestBonus::clear_bonus_item() {
  if (_impl_.bonus_item_ != nullptr) _impl_.bonus_item_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::base::SQuestBonusItem& SQuestBonus::_internal_bonus_item() const {
  const ::base::SQuestBonusItem* p = _impl_.bonus_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::base::SQuestBonusItem&>(
      ::base::_SQuestBonusItem_default_instance_);
}
inline const ::base::SQuestBonusItem& SQuestBonus::bonus_item() const {
  // @@protoc_insertion_point(field_get:base.SQuestBonus.bonus_item)
  return _internal_bonus_item();
}
inline void SQuestBonus::unsafe_arena_set_allocated_bonus_item(
    ::base::SQuestBonusItem* bonus_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bonus_item_);
  }
  _impl_.bonus_item_ = bonus_item;
  if (bonus_item) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:base.SQuestBonus.bonus_item)
}
inline ::base::SQuestBonusItem* SQuestBonus::release_bonus_item() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::base::SQuestBonusItem* temp = _impl_.bonus_item_;
  _impl_.bonus_item_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::base::SQuestBonusItem* SQuestBonus::unsafe_arena_release_bonus_item() {
  // @@protoc_insertion_point(field_release:base.SQuestBonus.bonus_item)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::base::SQuestBonusItem* temp = _impl_.bonus_item_;
  _impl_.bonus_item_ = nullptr;
  return temp;
}
inline ::base::SQuestBonusItem* SQuestBonus::_internal_mutable_bonus_item() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.bonus_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::base::SQuestBonusItem>(GetArenaForAllocation());
    _impl_.bonus_item_ = p;
  }
  return _impl_.bonus_item_;
}
inline ::base::SQuestBonusItem* SQuestBonus::mutable_bonus_item() {
  ::base::SQuestBonusItem* _msg = _internal_mutable_bonus_item();
  // @@protoc_insertion_point(field_mutable:base.SQuestBonus.bonus_item)
  return _msg;
}
inline void SQuestBonus::set_allocated_bonus_item(::base::SQuestBonusItem* bonus_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.bonus_item_;
  }
  if (bonus_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(bonus_item);
    if (message_arena != submessage_arena) {
      bonus_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bonus_item, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.bonus_item_ = bonus_item;
  // @@protoc_insertion_point(field_set_allocated:base.SQuestBonus.bonus_item)
}

// -------------------------------------------------------------------

// ScriptParam_QuestInfo

// int32 npc_id = 1;
inline void ScriptParam_QuestInfo::clear_npc_id() {
  _impl_.npc_id_ = 0;
}
inline int32_t ScriptParam_QuestInfo::_internal_npc_id() const {
  return _impl_.npc_id_;
}
inline int32_t ScriptParam_QuestInfo::npc_id() const {
  // @@protoc_insertion_point(field_get:base.ScriptParam_QuestInfo.npc_id)
  return _internal_npc_id();
}
inline void ScriptParam_QuestInfo::_internal_set_npc_id(int32_t value) {
  
  _impl_.npc_id_ = value;
}
inline void ScriptParam_QuestInfo::set_npc_id(int32_t value) {
  _internal_set_npc_id(value);
  // @@protoc_insertion_point(field_set:base.ScriptParam_QuestInfo.npc_id)
}

// int32 script_id = 2;
inline void ScriptParam_QuestInfo::clear_script_id() {
  _impl_.script_id_ = 0;
}
inline int32_t ScriptParam_QuestInfo::_internal_script_id() const {
  return _impl_.script_id_;
}
inline int32_t ScriptParam_QuestInfo::script_id() const {
  // @@protoc_insertion_point(field_get:base.ScriptParam_QuestInfo.script_id)
  return _internal_script_id();
}
inline void ScriptParam_QuestInfo::_internal_set_script_id(int32_t value) {
  
  _impl_.script_id_ = value;
}
inline void ScriptParam_QuestInfo::set_script_id(int32_t value) {
  _internal_set_script_id(value);
  // @@protoc_insertion_point(field_set:base.ScriptParam_QuestInfo.script_id)
}

// int32 quest_id = 3;
inline void ScriptParam_QuestInfo::clear_quest_id() {
  _impl_.quest_id_ = 0;
}
inline int32_t ScriptParam_QuestInfo::_internal_quest_id() const {
  return _impl_.quest_id_;
}
inline int32_t ScriptParam_QuestInfo::quest_id() const {
  // @@protoc_insertion_point(field_get:base.ScriptParam_QuestInfo.quest_id)
  return _internal_quest_id();
}
inline void ScriptParam_QuestInfo::_internal_set_quest_id(int32_t value) {
  
  _impl_.quest_id_ = value;
}
inline void ScriptParam_QuestInfo::set_quest_id(int32_t value) {
  _internal_set_quest_id(value);
  // @@protoc_insertion_point(field_set:base.ScriptParam_QuestInfo.quest_id)
}

// int32 yflags = 4;
inline void ScriptParam_QuestInfo::clear_yflags() {
  _impl_.yflags_ = 0;
}
inline int32_t ScriptParam_QuestInfo::_internal_yflags() const {
  return _impl_.yflags_;
}
inline int32_t ScriptParam_QuestInfo::yflags() const {
  // @@protoc_insertion_point(field_get:base.ScriptParam_QuestInfo.yflags)
  return _internal_yflags();
}
inline void ScriptParam_QuestInfo::_internal_set_yflags(int32_t value) {
  
  _impl_.yflags_ = value;
}
inline void ScriptParam_QuestInfo::set_yflags(int32_t value) {
  _internal_set_yflags(value);
  // @@protoc_insertion_point(field_set:base.ScriptParam_QuestInfo.yflags)
}

// string text = 5;
inline void ScriptParam_QuestInfo::clear_text() {
  _impl_.text_.ClearToEmpty();
}
inline const std::string& ScriptParam_QuestInfo::text() const {
  // @@protoc_insertion_point(field_get:base.ScriptParam_QuestInfo.text)
  return _internal_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScriptParam_QuestInfo::set_text(ArgT0&& arg0, ArgT... args) {
 
 _impl_.text_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:base.ScriptParam_QuestInfo.text)
}
inline std::string* ScriptParam_QuestInfo::mutable_text() {
  std::string* _s = _internal_mutable_text();
  // @@protoc_insertion_point(field_mutable:base.ScriptParam_QuestInfo.text)
  return _s;
}
inline const std::string& ScriptParam_QuestInfo::_internal_text() const {
  return _impl_.text_.Get();
}
inline void ScriptParam_QuestInfo::_internal_set_text(const std::string& value) {
  
  _impl_.text_.Set(value, GetArenaForAllocation());
}
inline std::string* ScriptParam_QuestInfo::_internal_mutable_text() {
  
  return _impl_.text_.Mutable(GetArenaForAllocation());
}
inline std::string* ScriptParam_QuestInfo::release_text() {
  // @@protoc_insertion_point(field_release:base.ScriptParam_QuestInfo.text)
  return _impl_.text_.Release();
}
inline void ScriptParam_QuestInfo::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  _impl_.text_.SetAllocated(text, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.text_.IsDefault()) {
    _impl_.text_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:base.ScriptParam_QuestInfo.text)
}

// repeated .base.SQuestBonus bonus = 6;
inline int ScriptParam_QuestInfo::_internal_bonus_size() const {
  return _impl_.bonus_.size();
}
inline int ScriptParam_QuestInfo::bonus_size() const {
  return _internal_bonus_size();
}
inline void ScriptParam_QuestInfo::clear_bonus() {
  _impl_.bonus_.Clear();
}
inline ::base::SQuestBonus* ScriptParam_QuestInfo::mutable_bonus(int index) {
  // @@protoc_insertion_point(field_mutable:base.ScriptParam_QuestInfo.bonus)
  return _impl_.bonus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SQuestBonus >*
ScriptParam_QuestInfo::mutable_bonus() {
  // @@protoc_insertion_point(field_mutable_list:base.ScriptParam_QuestInfo.bonus)
  return &_impl_.bonus_;
}
inline const ::base::SQuestBonus& ScriptParam_QuestInfo::_internal_bonus(int index) const {
  return _impl_.bonus_.Get(index);
}
inline const ::base::SQuestBonus& ScriptParam_QuestInfo::bonus(int index) const {
  // @@protoc_insertion_point(field_get:base.ScriptParam_QuestInfo.bonus)
  return _internal_bonus(index);
}
inline ::base::SQuestBonus* ScriptParam_QuestInfo::_internal_add_bonus() {
  return _impl_.bonus_.Add();
}
inline ::base::SQuestBonus* ScriptParam_QuestInfo::add_bonus() {
  ::base::SQuestBonus* _add = _internal_add_bonus();
  // @@protoc_insertion_point(field_add:base.ScriptParam_QuestInfo.bonus)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::base::SQuestBonus >&
ScriptParam_QuestInfo::bonus() const {
  // @@protoc_insertion_point(field_list:base.ScriptParam_QuestInfo.bonus)
  return _impl_.bonus_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace base

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_base_2eproto
