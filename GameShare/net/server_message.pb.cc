// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: server_message.proto

#include "server_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace servermessage {
PROTOBUF_CONSTEXPR ServerMsgAbilityAction::ServerMsgAbilityAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.logic_count_)*/0
  , /*decltype(_impl_.ability_id_)*/0
  , /*decltype(_impl_.prescription_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.begin_end_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgAbilityActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgAbilityActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgAbilityActionDefaultTypeInternal() {}
  union {
    ServerMsgAbilityAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgAbilityActionDefaultTypeInternal _ServerMsgAbilityAction_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgAbilityResult::ServerMsgAbilityResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.ability_id_)*/0
  , /*decltype(_impl_.prescription_id_)*/0
  , /*decltype(_impl_.result_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgAbilityResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgAbilityResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgAbilityResultDefaultTypeInternal() {}
  union {
    ServerMsgAbilityResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgAbilityResultDefaultTypeInternal _ServerMsgAbilityResult_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgAbilitySuccess::ServerMsgAbilitySuccess(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.ability_id_)*/0
  , /*decltype(_impl_.prescription_id_)*/0
  , /*decltype(_impl_.result_code_)*/0
  , /*decltype(_impl_.item_serial_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgAbilitySuccessDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgAbilitySuccessDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgAbilitySuccessDefaultTypeInternal() {}
  union {
    ServerMsgAbilitySuccess _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgAbilitySuccessDefaultTypeInternal _ServerMsgAbilitySuccess_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgAddQuest::ServerMsgAddQuest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quest_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgAddQuestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgAddQuestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgAddQuestDefaultTypeInternal() {}
  union {
    ServerMsgAddQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgAddQuestDefaultTypeInternal _ServerMsgAddQuest_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgAddSkillToSkillList::ServerMsgAddSkillToSkillList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.skill_id_)*/0
  , /*decltype(_impl_.skill_state_)*/0
  , /*decltype(_impl_.skill_level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgAddSkillToSkillListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgAddSkillToSkillListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgAddSkillToSkillListDefaultTypeInternal() {}
  union {
    ServerMsgAddSkillToSkillList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgAddSkillToSkillListDefaultTypeInternal _ServerMsgAddSkillToSkillList_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgCharEquipment::ServerMsgCharEquipment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgCharEquipmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgCharEquipmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgCharEquipmentDefaultTypeInternal() {}
  union {
    ServerMsgCharEquipment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgCharEquipmentDefaultTypeInternal _ServerMsgCharEquipment_default_instance_;
PROTOBUF_CONSTEXPR ServerHumanBaseAttrib::ServerHumanBaseAttrib(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.normal_title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flags_)*/nullptr
  , /*decltype(_impl_.camp_data_)*/nullptr
  , /*decltype(_impl_.current_horse_guid_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.job_)*/0
  , /*decltype(_impl_.country_)*/0
  , /*decltype(_impl_.data_id_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.hair_mesh_id_)*/0
  , /*decltype(_impl_.face_mesh_id_)*/0
  , /*decltype(_impl_.hp_percent_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.hp_max_)*/0
  , /*decltype(_impl_.rage_)*/0
  , /*decltype(_impl_.max_rage_)*/0
  , /*decltype(_impl_.steal_level_)*/0
  , /*decltype(_impl_.mood_state_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.attack_speed_)*/0
  , /*decltype(_impl_.portrait_id_)*/0
  , /*decltype(_impl_.model_id_)*/0
  , /*decltype(_impl_.mount_id_)*/0
  , /*decltype(_impl_.country_title_type_)*/0
  , /*decltype(_impl_.guild_title_type_)*/0
  , /*decltype(_impl_.stall_is_open_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.pk_value_)*/0
  , /*decltype(_impl_.generation_)*/0
  , /*decltype(_impl_.world_id_)*/0
  , /*decltype(_impl_.inherence_exp_)*/0u
  , /*decltype(_impl_.inherence_level_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerHumanBaseAttribDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerHumanBaseAttribDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerHumanBaseAttribDefaultTypeInternal() {}
  union {
    ServerHumanBaseAttrib _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerHumanBaseAttribDefaultTypeInternal _ServerHumanBaseAttrib_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgCharImpactListUpdate::ServerMsgCharImpactListUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a_impact_)*/{}
  , /*decltype(_impl_.owner_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_.impact_count_)*/0
  , /*decltype(_impl_.last_sn_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgCharImpactListUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgCharImpactListUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgCharImpactListUpdateDefaultTypeInternal() {}
  union {
    ServerMsgCharImpactListUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgCharImpactListUpdateDefaultTypeInternal _ServerMsgCharImpactListUpdate_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgCharMove::ServerMsgCharMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.a_impact_)*/{}
  , /*decltype(_impl_.target_pos_)*/nullptr
  , /*decltype(_impl_.stop_pos_)*/nullptr
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.handle_id_)*/0
  , /*decltype(_impl_.impact_count_)*/0
  , /*decltype(_impl_.last_sn_)*/0u} {}
struct ServerMsgCharMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgCharMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgCharMoveDefaultTypeInternal() {}
  union {
    ServerMsgCharMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgCharMoveDefaultTypeInternal _ServerMsgCharMove_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgCharSkillGather::ServerMsgCharSkillGather(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.user_position_)*/nullptr
  , /*decltype(_impl_.target_pos_)*/nullptr
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.logic_count_)*/0
  , /*decltype(_impl_.skill_data_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.total_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgCharSkillGatherDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgCharSkillGatherDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgCharSkillGatherDefaultTypeInternal() {}
  union {
    ServerMsgCharSkillGather _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgCharSkillGatherDefaultTypeInternal _ServerMsgCharSkillGather_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgCharStopAction::ServerMsgCharStopAction(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.logic_count_)*/0
  , /*decltype(_impl_.stop_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgCharStopActionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgCharStopActionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgCharStopActionDefaultTypeInternal() {}
  union {
    ServerMsgCharStopAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgCharStopActionDefaultTypeInternal _ServerMsgCharStopAction_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgChat::ServerMsgChat(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.chat_content_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.chat_type_)*/0
  , /*decltype(_impl_.show_position_)*/0
  , /*decltype(_impl_.cycle_count_)*/0
  , /*decltype(_impl_.animate_image_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgChatDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgChatDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgChatDefaultTypeInternal() {}
  union {
    ServerMsgChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgChatDefaultTypeInternal _ServerMsgChat_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgCommand::ServerMsgCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sx_param_)*/nullptr
  , /*decltype(_impl_.ui_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgCommandDefaultTypeInternal() {}
  union {
    ServerMsgCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgCommandDefaultTypeInternal _ServerMsgCommand_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgCooldownUpdate::ServerMsgCooldownUpdate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgCooldownUpdateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgCooldownUpdateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgCooldownUpdateDefaultTypeInternal() {}
  union {
    ServerMsgCooldownUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgCooldownUpdateDefaultTypeInternal _ServerMsgCooldownUpdate_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDelObject::ServerMsgDelObject(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDelObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDelObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDelObjectDefaultTypeInternal() {}
  union {
    ServerMsgDelObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDelObjectDefaultTypeInternal _ServerMsgDelObject_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDelQuest::ServerMsgDelQuest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.quest_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDelQuestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDelQuestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDelQuestDefaultTypeInternal() {}
  union {
    ServerMsgDelQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDelQuestDefaultTypeInternal _ServerMsgDelQuest_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDeltailOfHealsAndDamage::ServerMsgDeltailOfHealsAndDamage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.hp_modify_)*/0
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.sender_logic_count_)*/0
  , /*decltype(_impl_.critical_hit_)*/false
  , /*decltype(_impl_.death_blow_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDeltailOfHealsAndDamageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDeltailOfHealsAndDamageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDeltailOfHealsAndDamageDefaultTypeInternal() {}
  union {
    ServerMsgDeltailOfHealsAndDamage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDeltailOfHealsAndDamageDefaultTypeInternal _ServerMsgDeltailOfHealsAndDamage_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDetailAbilityInfo::ServerMsgDetailAbilityInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ability_list_)*/{}
  , /*decltype(_impl_._ability_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.abilitys_)*/{}
  , /*decltype(_impl_.next_need_level_)*/{}
  , /*decltype(_impl_._next_need_level_cached_byte_size_)*/{0}
  , /*decltype(_impl_.next_need_money_)*/{}
  , /*decltype(_impl_._next_need_money_cached_byte_size_)*/{0}
  , /*decltype(_impl_.next_need_exp_)*/{}
  , /*decltype(_impl_._next_need_exp_cached_byte_size_)*/{0}
  , /*decltype(_impl_.prescr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_.ability_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDetailAbilityInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDetailAbilityInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDetailAbilityInfoDefaultTypeInternal() {}
  union {
    ServerMsgDetailAbilityInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDetailAbilityInfoDefaultTypeInternal _ServerMsgDetailAbilityInfo_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDetailAttrib::ServerMsgDetailAttrib(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.extra_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flags_)*/nullptr
  , /*decltype(_impl_.horse_guid_)*/nullptr
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.trade_index_)*/0
  , /*decltype(_impl_.data_id_)*/0
  , /*decltype(_impl_.ai_type_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.hp_max_)*/0
  , /*decltype(_impl_.horse_state_)*/0
  , /*decltype(_impl_.generation_)*/0
  , /*decltype(_impl_.happiness_)*/0
  , /*decltype(_impl_.attr_near_)*/0
  , /*decltype(_impl_.attr_far_)*/0
  , /*decltype(_impl_.attr_magic_)*/0
  , /*decltype(_impl_.def_near_)*/0
  , /*decltype(_impl_.def_far_)*/0
  , /*decltype(_impl_.def_magic_)*/0
  , /*decltype(_impl_.hit_)*/0
  , /*decltype(_impl_.miss_)*/0
  , /*decltype(_impl_.critical_)*/0
  , /*decltype(_impl_.model_id_)*/0
  , /*decltype(_impl_.mount_id_)*/0
  , /*decltype(_impl_.str_perception_)*/0
  , /*decltype(_impl_.con_perception_)*/0
  , /*decltype(_impl_.dex_perception_)*/0
  , /*decltype(_impl_.int_perception_)*/0
  , /*decltype(_impl_.str_perception_limit_)*/0
  , /*decltype(_impl_.con_perception_limit_)*/0
  , /*decltype(_impl_.dex_perception_limit_)*/0
  , /*decltype(_impl_.int_perception_limit_)*/0
  , /*decltype(_impl_.strength_)*/0
  , /*decltype(_impl_.con_)*/0
  , /*decltype(_impl_.dex_)*/0
  , /*decltype(_impl_.intelligence_)*/0
  , /*decltype(_impl_.grow_rate_)*/0
  , /*decltype(_impl_.remain_point_)*/0
  , /*decltype(_impl_.strength_point_)*/0
  , /*decltype(_impl_.smartness_point_)*/0
  , /*decltype(_impl_.mind_point_)*/0
  , /*decltype(_impl_.constitution_point_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.stall_order_)*/0
  , /*decltype(_impl_.pet_lock_)*/0
  , /*decltype(_impl_.unlock_time_)*/0
  , /*decltype(_impl_.current_horse_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDetailAttribDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDetailAttribDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDetailAttribDefaultTypeInternal() {}
  union {
    ServerMsgDetailAttrib _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDetailAttribDefaultTypeInternal _ServerMsgDetailAttrib_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDetailAttribPet::ServerMsgDetailAttribPet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.extra_data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.nickname_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flags_)*/nullptr
  , /*decltype(_impl_.horse_guid_)*/nullptr
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.trade_index_)*/0
  , /*decltype(_impl_.data_id_)*/0
  , /*decltype(_impl_.ai_type_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.exp_)*/0
  , /*decltype(_impl_.hp_)*/0
  , /*decltype(_impl_.hp_max_)*/0
  , /*decltype(_impl_.horse_state_)*/0
  , /*decltype(_impl_.generation_)*/0
  , /*decltype(_impl_.happiness_)*/0
  , /*decltype(_impl_.attr_near_)*/0
  , /*decltype(_impl_.attr_far_)*/0
  , /*decltype(_impl_.attr_magic_)*/0
  , /*decltype(_impl_.def_near_)*/0
  , /*decltype(_impl_.def_far_)*/0
  , /*decltype(_impl_.def_magic_)*/0
  , /*decltype(_impl_.hit_)*/0
  , /*decltype(_impl_.miss_)*/0
  , /*decltype(_impl_.critical_)*/0
  , /*decltype(_impl_.model_id_)*/0
  , /*decltype(_impl_.mount_id_)*/0
  , /*decltype(_impl_.str_perception_)*/0
  , /*decltype(_impl_.con_perception_)*/0
  , /*decltype(_impl_.dex_perception_)*/0
  , /*decltype(_impl_.int_perception_)*/0
  , /*decltype(_impl_.str_perception_limit_)*/0
  , /*decltype(_impl_.con_perception_limit_)*/0
  , /*decltype(_impl_.dex_perception_limit_)*/0
  , /*decltype(_impl_.int_perception_limit_)*/0
  , /*decltype(_impl_.strength_)*/0
  , /*decltype(_impl_.con_)*/0
  , /*decltype(_impl_.dex_)*/0
  , /*decltype(_impl_.intelligence_)*/0
  , /*decltype(_impl_.grow_rate_)*/0
  , /*decltype(_impl_.remain_point_)*/0
  , /*decltype(_impl_.strength_point_)*/0
  , /*decltype(_impl_.smartness_point_)*/0
  , /*decltype(_impl_.mind_point_)*/0
  , /*decltype(_impl_.constitution_point_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_.stall_order_)*/0
  , /*decltype(_impl_.pet_lock_)*/0
  , /*decltype(_impl_.unlock_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDetailAttribPetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDetailAttribPetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDetailAttribPetDefaultTypeInternal() {}
  union {
    ServerMsgDetailAttribPet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDetailAttribPetDefaultTypeInternal _ServerMsgDetailAttribPet_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDetailBuff::ServerMsgDetailBuff(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.receiver_id_)*/0
  , /*decltype(_impl_.sender_id_)*/0
  , /*decltype(_impl_.enable_)*/false
  , /*decltype(_impl_.skill_id_)*/0
  , /*decltype(_impl_.sn_)*/0
  , /*decltype(_impl_.buff_id_)*/0
  , /*decltype(_impl_.continuance_)*/0
  , /*decltype(_impl_.delay_time_)*/0
  , /*decltype(_impl_.sender_logic_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDetailBuffDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDetailBuffDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDetailBuffDefaultTypeInternal() {}
  union {
    ServerMsgDetailBuff _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDetailBuffDefaultTypeInternal _ServerMsgDetailBuff_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDetailEquipList::ServerMsgDetailEquipList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDetailEquipListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDetailEquipListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDetailEquipListDefaultTypeInternal() {}
  union {
    ServerMsgDetailEquipList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDetailEquipListDefaultTypeInternal _ServerMsgDetailEquipList_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDetailDetailItemList::ServerMsgDetailDetailItemList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.items_)*/{}
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDetailDetailItemListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDetailDetailItemListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDetailDetailItemListDefaultTypeInternal() {}
  union {
    ServerMsgDetailDetailItemList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDetailDetailItemListDefaultTypeInternal _ServerMsgDetailDetailItemList_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgDetailSkillList::ServerMsgDetailSkillList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skills_)*/{}
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgDetailSkillListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgDetailSkillListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgDetailSkillListDefaultTypeInternal() {}
  union {
    ServerMsgDetailSkillList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgDetailSkillListDefaultTypeInternal _ServerMsgDetailSkillList_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgEnterMap::ServerMsgEnterMap(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.scene_id_)*/0u
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_y_)*/0
  , /*decltype(_impl_.guid_)*/0
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgEnterMapDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgEnterMapDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgEnterMapDefaultTypeInternal() {}
  union {
    ServerMsgEnterMap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgEnterMapDefaultTypeInternal _ServerMsgEnterMap_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgItemInfo::ServerMsgItemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.bag_index_)*/0
  , /*decltype(_impl_.null_)*/false
  , /*decltype(_impl_.tips_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgItemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgItemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgItemInfoDefaultTypeInternal() {}
  union {
    ServerMsgItemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgItemInfoDefaultTypeInternal _ServerMsgItemInfo_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgManipulatePetResult::ServerMsgManipulatePetResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgManipulatePetResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgManipulatePetResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgManipulatePetResultDefaultTypeInternal() {}
  union {
    ServerMsgManipulatePetResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgManipulatePetResultDefaultTypeInternal _ServerMsgManipulatePetResult_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgModifyQuest::ServerMsgModifyQuest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quest_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.quest_id_)*/0
  , /*decltype(_impl_.flag_)*/0
  , /*decltype(_impl_.flag32_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgModifyQuestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgModifyQuestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgModifyQuestDefaultTypeInternal() {}
  union {
    ServerMsgModifyQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgModifyQuestDefaultTypeInternal _ServerMsgModifyQuest_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgMonsterAttribute::ServerMsgMonsterAttribute(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.country_title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.guild_title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.normal_title_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.flags_)*/nullptr
  , /*decltype(_impl_.camp_data_)*/nullptr
  , /*decltype(_impl_.refresh_)*/0
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.data_id_)*/0u
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.hp_percent_)*/0
  , /*decltype(_impl_.steal_level_)*/0
  , /*decltype(_impl_.mood_state_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.attack_speed_)*/0
  , /*decltype(_impl_.portrait_id_)*/0
  , /*decltype(_impl_.model_id_)*/0
  , /*decltype(_impl_.mount_id_)*/0
  , /*decltype(_impl_.ai_type_)*/0
  , /*decltype(_impl_.country_title_type_)*/0
  , /*decltype(_impl_.guild_title_type_)*/0
  , /*decltype(_impl_.normal_title_type_)*/0
  , /*decltype(_impl_.occupant_guid_)*/0u
  , /*decltype(_impl_.owner_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.ctrl_state_)*/0
  , /*decltype(_impl_.scale_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgMonsterAttributeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgMonsterAttributeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgMonsterAttributeDefaultTypeInternal() {}
  union {
    ServerMsgMonsterAttribute _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgMonsterAttributeDefaultTypeInternal _ServerMsgMonsterAttribute_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgNewBeastie::ServerMsgNewBeastie(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_id_)*/0u
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_z_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.moving_)*/false
  , /*decltype(_impl_.handle_id_)*/0
  , /*decltype(_impl_.target_x_)*/0
  , /*decltype(_impl_.target_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgNewBeastieDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgNewBeastieDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgNewBeastieDefaultTypeInternal() {}
  union {
    ServerMsgNewBeastie _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgNewBeastieDefaultTypeInternal _ServerMsgNewBeastie_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgNewItem::ServerMsgNewItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_.item_index_)*/0
  , /*decltype(_impl_.item_count_)*/0
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgNewItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgNewItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgNewItemDefaultTypeInternal() {}
  union {
    ServerMsgNewItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgNewItemDefaultTypeInternal _ServerMsgNewItem_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgNewItemBox::ServerMsgNewItemBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pos_)*/nullptr
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.owner_id_)*/0u
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_.drop_monster_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgNewItemBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgNewItemBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgNewItemBoxDefaultTypeInternal() {}
  union {
    ServerMsgNewItemBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgNewItemBoxDefaultTypeInternal _ServerMsgNewItemBox_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgNewMonster::ServerMsgNewMonster(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.object_id_)*/0u
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.positiion_y_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.move_speed_)*/0
  , /*decltype(_impl_.horse_id_)*/0
  , /*decltype(_impl_.weapon_id_)*/0
  , /*decltype(_impl_.monster_type_)*/0
  , /*decltype(_impl_.guid_)*/0u
  , /*decltype(_impl_.race_id_)*/0
  , /*decltype(_impl_.camp_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgNewMonsterDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgNewMonsterDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgNewMonsterDefaultTypeInternal() {}
  union {
    ServerMsgNewMonster _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgNewMonsterDefaultTypeInternal _ServerMsgNewMonster_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgNotifyEquip::ServerMsgNotifyEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_)*/nullptr
  , /*decltype(_impl_.bag_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgNotifyEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgNotifyEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgNotifyEquipDefaultTypeInternal() {}
  union {
    ServerMsgNotifyEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgNotifyEquipDefaultTypeInternal _ServerMsgNotifyEquip_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgOperateResult::ServerMsgOperateResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.res_type_)*/0
  , /*decltype(_impl_.result_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgOperateResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgOperateResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgOperateResultDefaultTypeInternal() {}
  union {
    ServerMsgOperateResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgOperateResultDefaultTypeInternal _ServerMsgOperateResult_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgPickItemResult::ServerMsgPickItemResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.result_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgPickItemResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgPickItemResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgPickItemResultDefaultTypeInternal() {}
  union {
    ServerMsgPickItemResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgPickItemResultDefaultTypeInternal _ServerMsgPickItemResult_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgQueryEventResult::ServerMsgQueryEventResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgQueryEventResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgQueryEventResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgQueryEventResultDefaultTypeInternal() {}
  union {
    ServerMsgQueryEventResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgQueryEventResultDefaultTypeInternal _ServerMsgQueryEventResult_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgQuestList::ServerMsgQuestList(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quest_list_)*/nullptr
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgQuestListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgQuestListDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgQuestListDefaultTypeInternal() {}
  union {
    ServerMsgQuestList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgQuestListDefaultTypeInternal _ServerMsgQuestList_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgQuestListRefresh::ServerMsgQuestListRefresh(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.scene_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgQuestListRefreshDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgQuestListRefreshDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgQuestListRefreshDefaultTypeInternal() {}
  union {
    ServerMsgQuestListRefresh _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgQuestListRefreshDefaultTypeInternal _ServerMsgQuestListRefresh_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgSkillSettingResult::ServerMsgSkillSettingResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.setting_)*/nullptr
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgSkillSettingResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgSkillSettingResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgSkillSettingResultDefaultTypeInternal() {}
  union {
    ServerMsgSkillSettingResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgSkillSettingResultDefaultTypeInternal _ServerMsgSkillSettingResult_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgScriptCommand::ServerMsgScriptCommand(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quest_tips_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.setting_)*/nullptr
  , /*decltype(_impl_.continue_param_)*/nullptr
  , /*decltype(_impl_.quest_info_)*/nullptr
  , /*decltype(_impl_.cmd_id_)*/0
  , /*decltype(_impl_.index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgScriptCommandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgScriptCommandDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgScriptCommandDefaultTypeInternal() {}
  union {
    ServerMsgScriptCommand _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgScriptCommandDefaultTypeInternal _ServerMsgScriptCommand_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgSkillUpgrade::ServerMsgSkillUpgrade(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.skill_id_)*/0
  , /*decltype(_impl_.skill_level_)*/0
  , /*decltype(_impl_.sucess_)*/false
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgSkillUpgradeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgSkillUpgradeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgSkillUpgradeDefaultTypeInternal() {}
  union {
    ServerMsgSkillUpgrade _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgSkillUpgradeDefaultTypeInternal _ServerMsgSkillUpgrade_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgSwapItem::ServerMsgSwapItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.source_pos_)*/0
  , /*decltype(_impl_.dest_pos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgSwapItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgSwapItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgSwapItemDefaultTypeInternal() {}
  union {
    ServerMsgSwapItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgSwapItemDefaultTypeInternal _ServerMsgSwapItem_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgTargetListAndHitFlags::ServerMsgTargetListAndHitFlags(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_list_)*/{}
  , /*decltype(_impl_._target_list_cached_byte_size_)*/{0}
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.logic_count_)*/0
  , /*decltype(_impl_.skill_id_)*/0
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_z_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgTargetListAndHitFlagsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgTargetListAndHitFlagsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgTargetListAndHitFlagsDefaultTypeInternal() {}
  union {
    ServerMsgTargetListAndHitFlags _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgTargetListAndHitFlagsDefaultTypeInternal _ServerMsgTargetListAndHitFlags_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgTaskDownEquipResult::ServerMsgTaskDownEquipResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.equip_point_)*/0
  , /*decltype(_impl_.bag_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgTaskDownEquipResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgTaskDownEquipResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgTaskDownEquipResultDefaultTypeInternal() {}
  union {
    ServerMsgTaskDownEquipResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgTaskDownEquipResultDefaultTypeInternal _ServerMsgTaskDownEquipResult_default_instance_;
PROTOBUF_CONSTEXPR ServerMsgUseEquipResult::ServerMsgUseEquipResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.result_)*/0
  , /*decltype(_impl_.equip_point_)*/0
  , /*decltype(_impl_.bag_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ServerMsgUseEquipResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ServerMsgUseEquipResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ServerMsgUseEquipResultDefaultTypeInternal() {}
  union {
    ServerMsgUseEquipResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ServerMsgUseEquipResultDefaultTypeInternal _ServerMsgUseEquipResult_default_instance_;
}  // namespace servermessage
static ::_pb::Metadata file_level_metadata_server_5fmessage_2eproto[46];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_server_5fmessage_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_server_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_server_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityAction, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityAction, _impl_.logic_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityAction, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityAction, _impl_.prescription_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityAction, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityAction, _impl_.begin_end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityResult, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityResult, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityResult, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityResult, _impl_.prescription_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilityResult, _impl_.result_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilitySuccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilitySuccess, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilitySuccess, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilitySuccess, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilitySuccess, _impl_.prescription_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilitySuccess, _impl_.result_code_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAbilitySuccess, _impl_.item_serial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAddQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAddQuest, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAddQuest, _impl_.quest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAddSkillToSkillList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAddSkillToSkillList, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAddSkillToSkillList, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAddSkillToSkillList, _impl_.skill_state_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgAddSkillToSkillList, _impl_.skill_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharEquipment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharEquipment, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharEquipment, _impl_.scene_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.job_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.country_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.data_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.hair_mesh_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.face_mesh_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.hp_percent_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.hp_max_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.rage_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.max_rage_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.steal_level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.mood_state_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.attack_speed_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.camp_data_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.portrait_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.mount_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.country_title_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.guild_title_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.normal_title_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.country_title_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.guild_title_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.stall_is_open_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.pk_value_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.generation_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.world_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.inherence_exp_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.inherence_level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerHumanBaseAttrib, _impl_.current_horse_guid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharImpactListUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharImpactListUpdate, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharImpactListUpdate, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharImpactListUpdate, _impl_.impact_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharImpactListUpdate, _impl_.last_sn_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharImpactListUpdate, _impl_.a_impact_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _impl_.handle_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _impl_.impact_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _impl_.last_sn_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _impl_.a_impact_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _impl_.target_pos_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharMove, _impl_.stop_pos_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _impl_.logic_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _impl_.skill_data_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _impl_.user_position_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _impl_.target_pos_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharSkillGather, _impl_.total_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharStopAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharStopAction, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharStopAction, _impl_.logic_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCharStopAction, _impl_.stop_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgChat, _impl_.chat_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgChat, _impl_.chat_content_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgChat, _impl_.show_position_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgChat, _impl_.cycle_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgChat, _impl_.animate_image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCommand, _impl_.ui_index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCommand, _impl_.sx_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCooldownUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCooldownUpdate, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgCooldownUpdate, _impl_.scene_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDelObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDelObject, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDelObject, _impl_.scene_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDelQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDelQuest, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDelQuest, _impl_.quest_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDeltailOfHealsAndDamage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDeltailOfHealsAndDamage, _impl_.hp_modify_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDeltailOfHealsAndDamage, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDeltailOfHealsAndDamage, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDeltailOfHealsAndDamage, _impl_.sender_logic_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDeltailOfHealsAndDamage, _impl_.critical_hit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDeltailOfHealsAndDamage, _impl_.death_blow_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.ability_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.ability_list_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.abilitys_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.prescr_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.next_need_level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.next_need_money_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAbilityInfo, _impl_.next_need_exp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.skills_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.extra_data_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.horse_guid_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.trade_index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.data_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.ai_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.hp_max_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.horse_state_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.generation_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.happiness_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.attr_near_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.attr_far_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.attr_magic_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.def_near_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.def_far_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.def_magic_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.hit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.miss_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.critical_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.mount_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.str_perception_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.con_perception_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.dex_perception_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.int_perception_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.str_perception_limit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.con_perception_limit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.dex_perception_limit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.int_perception_limit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.strength_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.con_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.dex_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.intelligence_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.grow_rate_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.remain_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.strength_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.smartness_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.mind_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.constitution_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.stall_order_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.pet_lock_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.unlock_time_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttrib, _impl_.current_horse_flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.skills_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.extra_data_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.horse_guid_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.trade_index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.data_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.nickname_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.ai_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.hp_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.hp_max_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.horse_state_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.generation_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.happiness_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.attr_near_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.attr_far_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.attr_magic_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.def_near_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.def_far_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.def_magic_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.hit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.miss_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.critical_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.mount_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.str_perception_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.con_perception_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.dex_perception_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.int_perception_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.str_perception_limit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.con_perception_limit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.dex_perception_limit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.int_perception_limit_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.strength_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.con_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.dex_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.intelligence_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.grow_rate_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.remain_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.strength_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.smartness_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.mind_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.constitution_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.stall_order_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.pet_lock_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailAttribPet, _impl_.unlock_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.receiver_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.sender_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.enable_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.sn_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.buff_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.continuance_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.delay_time_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailBuff, _impl_.sender_logic_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailEquipList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailEquipList, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailEquipList, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailDetailItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailDetailItemList, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailDetailItemList, _impl_.items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailSkillList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailSkillList, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgDetailSkillList, _impl_.skills_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgEnterMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgEnterMap, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgEnterMap, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgEnterMap, _impl_.position_y_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgEnterMap, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgEnterMap, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgItemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgItemInfo, _impl_.bag_index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgItemInfo, _impl_.item_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgItemInfo, _impl_.null_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgItemInfo, _impl_.tips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgManipulatePetResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgManipulatePetResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgManipulatePetResult, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgManipulatePetResult, _impl_.scene_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgModifyQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgModifyQuest, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgModifyQuest, _impl_.quest_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgModifyQuest, _impl_.flag_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgModifyQuest, _impl_.flag32_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgModifyQuest, _impl_.quest_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.refresh_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.flags_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.data_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.hp_percent_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.steal_level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.mood_state_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.attack_speed_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.camp_data_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.portrait_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.model_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.mount_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.ai_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.country_title_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.guild_title_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.normal_title_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.country_title_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.guild_title_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.normal_title_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.occupant_guid_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.ctrl_state_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgMonsterAttribute, _impl_.scale_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.position_z_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.moving_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.handle_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.target_x_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewBeastie, _impl_.target_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItem, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItem, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItem, _impl_.item_index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItem, _impl_.item_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItem, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItem, _impl_.position_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItemBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItemBox, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItemBox, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItemBox, _impl_.owner_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItemBox, _impl_.scene_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItemBox, _impl_.pos_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewItemBox, _impl_.drop_monster_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.positiion_y_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.move_speed_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.horse_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.weapon_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.monster_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.race_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNewMonster, _impl_.camp_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNotifyEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNotifyEquip, _impl_.bag_index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgNotifyEquip, _impl_.item_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgOperateResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgOperateResult, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgOperateResult, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgOperateResult, _impl_.res_type_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgOperateResult, _impl_.result_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgPickItemResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgPickItemResult, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgPickItemResult, _impl_.result_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgQueryEventResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgQueryEventResult, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgQuestList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgQuestList, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgQuestList, _impl_.quest_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgQuestListRefresh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgQuestListRefresh, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgQuestListRefresh, _impl_.scene_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillSettingResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillSettingResult, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillSettingResult, _impl_.setting_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillSettingResult, _impl_.index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgScriptCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgScriptCommand, _impl_.cmd_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgScriptCommand, _impl_.setting_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgScriptCommand, _impl_.index_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgScriptCommand, _impl_.continue_param_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgScriptCommand, _impl_.quest_info_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgScriptCommand, _impl_.quest_tips_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillUpgrade, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillUpgrade, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillUpgrade, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillUpgrade, _impl_.skill_level_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillUpgrade, _impl_.sucess_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSkillUpgrade, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSwapItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSwapItem, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSwapItem, _impl_.source_pos_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgSwapItem, _impl_.dest_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTargetListAndHitFlags, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTargetListAndHitFlags, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTargetListAndHitFlags, _impl_.logic_count_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTargetListAndHitFlags, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTargetListAndHitFlags, _impl_.target_list_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTargetListAndHitFlags, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTargetListAndHitFlags, _impl_.position_z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTaskDownEquipResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTaskDownEquipResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTaskDownEquipResult, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTaskDownEquipResult, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTaskDownEquipResult, _impl_.equip_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgTaskDownEquipResult, _impl_.bag_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgUseEquipResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgUseEquipResult, _impl_.result_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgUseEquipResult, _impl_.equip_point_),
  PROTOBUF_FIELD_OFFSET(::servermessage::ServerMsgUseEquipResult, _impl_.bag_index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::servermessage::ServerMsgAbilityAction)},
  { 12, -1, -1, sizeof(::servermessage::ServerMsgAbilityResult)},
  { 23, -1, -1, sizeof(::servermessage::ServerMsgAbilitySuccess)},
  { 35, -1, -1, sizeof(::servermessage::ServerMsgAddQuest)},
  { 43, -1, -1, sizeof(::servermessage::ServerMsgAddSkillToSkillList)},
  { 53, -1, -1, sizeof(::servermessage::ServerMsgCharEquipment)},
  { 61, -1, -1, sizeof(::servermessage::ServerHumanBaseAttrib)},
  { 102, -1, -1, sizeof(::servermessage::ServerMsgCharImpactListUpdate)},
  { 113, 126, -1, sizeof(::servermessage::ServerMsgCharMove)},
  { 133, -1, -1, sizeof(::servermessage::ServerMsgCharSkillGather)},
  { 147, -1, -1, sizeof(::servermessage::ServerMsgCharStopAction)},
  { 156, -1, -1, sizeof(::servermessage::ServerMsgChat)},
  { 167, -1, -1, sizeof(::servermessage::ServerMsgCommand)},
  { 175, -1, -1, sizeof(::servermessage::ServerMsgCooldownUpdate)},
  { 183, -1, -1, sizeof(::servermessage::ServerMsgDelObject)},
  { 191, -1, -1, sizeof(::servermessage::ServerMsgDelQuest)},
  { 199, -1, -1, sizeof(::servermessage::ServerMsgDeltailOfHealsAndDamage)},
  { 211, -1, -1, sizeof(::servermessage::ServerMsgDetailAbilityInfo)},
  { 226, -1, -1, sizeof(::servermessage::ServerMsgDetailAttrib)},
  { 283, -1, -1, sizeof(::servermessage::ServerMsgDetailAttribPet)},
  { 339, -1, -1, sizeof(::servermessage::ServerMsgDetailBuff)},
  { 355, -1, -1, sizeof(::servermessage::ServerMsgDetailEquipList)},
  { 363, -1, -1, sizeof(::servermessage::ServerMsgDetailDetailItemList)},
  { 371, -1, -1, sizeof(::servermessage::ServerMsgDetailSkillList)},
  { 379, -1, -1, sizeof(::servermessage::ServerMsgEnterMap)},
  { 390, -1, -1, sizeof(::servermessage::ServerMsgItemInfo)},
  { 400, -1, -1, sizeof(::servermessage::ServerMsgManipulatePetResult)},
  { 409, -1, -1, sizeof(::servermessage::ServerMsgModifyQuest)},
  { 420, -1, -1, sizeof(::servermessage::ServerMsgMonsterAttribute)},
  { 454, -1, -1, sizeof(::servermessage::ServerMsgNewBeastie)},
  { 470, -1, -1, sizeof(::servermessage::ServerMsgNewItem)},
  { 482, -1, -1, sizeof(::servermessage::ServerMsgNewItemBox)},
  { 494, -1, -1, sizeof(::servermessage::ServerMsgNewMonster)},
  { 512, -1, -1, sizeof(::servermessage::ServerMsgNotifyEquip)},
  { 520, -1, -1, sizeof(::servermessage::ServerMsgOperateResult)},
  { 530, -1, -1, sizeof(::servermessage::ServerMsgPickItemResult)},
  { 538, -1, -1, sizeof(::servermessage::ServerMsgQueryEventResult)},
  { 545, -1, -1, sizeof(::servermessage::ServerMsgQuestList)},
  { 553, -1, -1, sizeof(::servermessage::ServerMsgQuestListRefresh)},
  { 561, -1, -1, sizeof(::servermessage::ServerMsgSkillSettingResult)},
  { 570, -1, -1, sizeof(::servermessage::ServerMsgScriptCommand)},
  { 582, -1, -1, sizeof(::servermessage::ServerMsgSkillUpgrade)},
  { 593, -1, -1, sizeof(::servermessage::ServerMsgSwapItem)},
  { 602, -1, -1, sizeof(::servermessage::ServerMsgTargetListAndHitFlags)},
  { 614, -1, -1, sizeof(::servermessage::ServerMsgTaskDownEquipResult)},
  { 625, -1, -1, sizeof(::servermessage::ServerMsgUseEquipResult)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::servermessage::_ServerMsgAbilityAction_default_instance_._instance,
  &::servermessage::_ServerMsgAbilityResult_default_instance_._instance,
  &::servermessage::_ServerMsgAbilitySuccess_default_instance_._instance,
  &::servermessage::_ServerMsgAddQuest_default_instance_._instance,
  &::servermessage::_ServerMsgAddSkillToSkillList_default_instance_._instance,
  &::servermessage::_ServerMsgCharEquipment_default_instance_._instance,
  &::servermessage::_ServerHumanBaseAttrib_default_instance_._instance,
  &::servermessage::_ServerMsgCharImpactListUpdate_default_instance_._instance,
  &::servermessage::_ServerMsgCharMove_default_instance_._instance,
  &::servermessage::_ServerMsgCharSkillGather_default_instance_._instance,
  &::servermessage::_ServerMsgCharStopAction_default_instance_._instance,
  &::servermessage::_ServerMsgChat_default_instance_._instance,
  &::servermessage::_ServerMsgCommand_default_instance_._instance,
  &::servermessage::_ServerMsgCooldownUpdate_default_instance_._instance,
  &::servermessage::_ServerMsgDelObject_default_instance_._instance,
  &::servermessage::_ServerMsgDelQuest_default_instance_._instance,
  &::servermessage::_ServerMsgDeltailOfHealsAndDamage_default_instance_._instance,
  &::servermessage::_ServerMsgDetailAbilityInfo_default_instance_._instance,
  &::servermessage::_ServerMsgDetailAttrib_default_instance_._instance,
  &::servermessage::_ServerMsgDetailAttribPet_default_instance_._instance,
  &::servermessage::_ServerMsgDetailBuff_default_instance_._instance,
  &::servermessage::_ServerMsgDetailEquipList_default_instance_._instance,
  &::servermessage::_ServerMsgDetailDetailItemList_default_instance_._instance,
  &::servermessage::_ServerMsgDetailSkillList_default_instance_._instance,
  &::servermessage::_ServerMsgEnterMap_default_instance_._instance,
  &::servermessage::_ServerMsgItemInfo_default_instance_._instance,
  &::servermessage::_ServerMsgManipulatePetResult_default_instance_._instance,
  &::servermessage::_ServerMsgModifyQuest_default_instance_._instance,
  &::servermessage::_ServerMsgMonsterAttribute_default_instance_._instance,
  &::servermessage::_ServerMsgNewBeastie_default_instance_._instance,
  &::servermessage::_ServerMsgNewItem_default_instance_._instance,
  &::servermessage::_ServerMsgNewItemBox_default_instance_._instance,
  &::servermessage::_ServerMsgNewMonster_default_instance_._instance,
  &::servermessage::_ServerMsgNotifyEquip_default_instance_._instance,
  &::servermessage::_ServerMsgOperateResult_default_instance_._instance,
  &::servermessage::_ServerMsgPickItemResult_default_instance_._instance,
  &::servermessage::_ServerMsgQueryEventResult_default_instance_._instance,
  &::servermessage::_ServerMsgQuestList_default_instance_._instance,
  &::servermessage::_ServerMsgQuestListRefresh_default_instance_._instance,
  &::servermessage::_ServerMsgSkillSettingResult_default_instance_._instance,
  &::servermessage::_ServerMsgScriptCommand_default_instance_._instance,
  &::servermessage::_ServerMsgSkillUpgrade_default_instance_._instance,
  &::servermessage::_ServerMsgSwapItem_default_instance_._instance,
  &::servermessage::_ServerMsgTargetListAndHitFlags_default_instance_._instance,
  &::servermessage::_ServerMsgTaskDownEquipResult_default_instance_._instance,
  &::servermessage::_ServerMsgUseEquipResult_default_instance_._instance,
};

const char descriptor_table_protodef_server_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024server_message.proto\022\rservermessage\032\nb"
  "ase.proto\"\223\001\n\026ServerMsgAbilityAction\022\021\n\t"
  "object_id\030\001 \001(\005\022\023\n\013logic_count\030\002 \001(\005\022\022\n\n"
  "ability_id\030\003 \001(\005\022\027\n\017prescription_id\030\004 \001("
  "\005\022\021\n\ttarget_id\030\005 \001(\005\022\021\n\tbegin_end\030\006 \001(\005\""
  "}\n\026ServerMsgAbilityResult\022\021\n\tplayer_id\030\001"
  " \001(\005\022\016\n\006map_id\030\002 \001(\005\022\022\n\nability_id\030\003 \001(\005"
  "\022\027\n\017prescription_id\030\004 \001(\005\022\023\n\013result_code"
  "\030\005 \001(\005\"\223\001\n\027ServerMsgAbilitySuccess\022\021\n\tpl"
  "ayer_id\030\001 \001(\005\022\016\n\006map_id\030\002 \001(\005\022\022\n\nability"
  "_id\030\003 \001(\005\022\027\n\017prescription_id\030\004 \001(\005\022\023\n\013re"
  "sult_code\030\005 \001(\005\022\023\n\013item_serial\030\006 \001(\005\"B\n\021"
  "ServerMsgAddQuest\022\021\n\tplayer_id\030\001 \001(\005\022\032\n\005"
  "quest\030\002 \001(\0132\013.base.Quest\"m\n\034ServerMsgAdd"
  "SkillToSkillList\022\021\n\tobject_id\030\001 \001(\005\022\020\n\010s"
  "kill_id\030\002 \001(\005\022\023\n\013skill_state\030\003 \001(\005\022\023\n\013sk"
  "ill_level\030\004 \001(\005\"=\n\026ServerMsgCharEquipmen"
  "t\022\021\n\tobject_id\030\001 \001(\005\022\020\n\010scene_id\030\002 \001(\005\"\367"
  "\005\n\025ServerHumanBaseAttrib\022\021\n\tplayer_id\030\001 "
  "\001(\005\022\033\n\005flags\030\002 \001(\0132\014.base.Flag64\022\013\n\003job\030"
  "\003 \001(\005\022\017\n\007country\030\004 \001(\005\022\017\n\007data_id\030\005 \001(\005\022"
  "\r\n\005level\030\006 \001(\005\022\024\n\014hair_mesh_id\030\007 \001(\005\022\024\n\014"
  "face_mesh_id\030\010 \001(\005\022\022\n\nhp_percent\030\t \001(\005\022\n"
  "\n\002hp\030\n \001(\005\022\016\n\006hp_max\030\013 \001(\005\022\014\n\004rage\030\014 \001(\005"
  "\022\020\n\010max_rage\030\r \001(\005\022\023\n\013steal_level\030\016 \001(\005\022"
  "\022\n\nmood_state\030\017 \001(\005\022\022\n\nmove_speed\030\020 \001(\002\022"
  "\024\n\014attack_speed\030\021 \001(\002\022\"\n\tcamp_data\030\022 \001(\013"
  "2\017.base.SCampData\022\023\n\013portrait_id\030\023 \001(\005\022\020"
  "\n\010model_id\030\024 \001(\005\022\020\n\010mount_id\030\025 \001(\005\022\014\n\004na"
  "me\030\026 \001(\t\022\025\n\rcountry_title\030\027 \001(\t\022\023\n\013guild"
  "_title\030\030 \001(\t\022\024\n\014normal_title\030\031 \001(\t\022\032\n\022co"
  "untry_title_type\030\032 \001(\005\022\030\n\020guild_title_ty"
  "pe\030\033 \001(\005\022\025\n\rstall_is_open\030\034 \001(\005\022\021\n\ttarge"
  "t_id\030\035 \001(\005\022\020\n\010pk_value\030\036 \001(\005\022\022\n\ngenerati"
  "on\030\037 \001(\005\022\020\n\010world_id\030  \001(\005\022\025\n\rinherence_"
  "exp\030! \001(\r\022\027\n\017inherence_level\030\" \001(\r\022,\n\022cu"
  "rrent_horse_guid\030# \001(\0132\020.base.SHorseGuid"
  "\"\220\001\n\035ServerMsgCharImpactListUpdate\022\020\n\010ow"
  "ner_id\030\001 \001(\005\022\020\n\010scene_id\030\002 \001(\005\022\024\n\014impact"
  "_count\030\003 \001(\005\022\017\n\007last_sn\030\004 \001(\r\022$\n\010a_impac"
  "t\030\005 \003(\0132\022.base.ImpactStruct\"\354\001\n\021ServerMs"
  "gCharMove\022\021\n\tobject_id\030\001 \001(\005\022\021\n\thandle_i"
  "d\030\002 \001(\005\022\024\n\014impact_count\030\003 \001(\005\022\017\n\007last_sn"
  "\030\004 \001(\r\022$\n\010a_impact\030\005 \003(\0132\022.base.ImpactSt"
  "ruct\022$\n\ntarget_pos\030\006 \001(\0132\013.base.GLPosH\000\210"
  "\001\001\022\"\n\010stop_pos\030\007 \001(\0132\013.base.GLPosH\001\210\001\001B\r"
  "\n\013_target_posB\013\n\t_stop_pos\"\322\001\n\030ServerMsg"
  "CharSkillGather\022\021\n\tobject_id\030\001 \001(\005\022\023\n\013lo"
  "gic_count\030\002 \001(\005\022\025\n\rskill_data_id\030\003 \001(\005\022\""
  "\n\ruser_position\030\004 \001(\0132\013.base.GLPos\022\021\n\tta"
  "rget_id\030\005 \001(\005\022\037\n\ntarget_pos\030\006 \001(\0132\013.base"
  ".GLPos\022\013\n\003dir\030\007 \001(\002\022\022\n\ntotal_time\030\010 \001(\005\""
  "T\n\027ServerMsgCharStopAction\022\021\n\tobject_id\030"
  "\001 \001(\005\022\023\n\013logic_count\030\002 \001(\005\022\021\n\tstop_time\030"
  "\003 \001(\005\"{\n\rServerMsgChat\022\021\n\tchat_type\030\001 \001("
  "\005\022\024\n\014chat_content\030\002 \001(\t\022\025\n\rshow_position"
  "\030\003 \001(\005\022\023\n\013cycle_count\030\004 \001(\005\022\025\n\ranimate_i"
  "mage\030\005 \001(\005\"E\n\020ServerMsgCommand\022\020\n\010ui_ind"
  "ex\030\001 \001(\005\022\037\n\010sx_param\030\002 \001(\0132\r.base.SXPara"
  "m\">\n\027ServerMsgCooldownUpdate\022\021\n\tobject_i"
  "d\030\001 \001(\005\022\020\n\010scene_id\030\002 \001(\005\"9\n\022ServerMsgDe"
  "lObject\022\021\n\tobject_id\030\001 \001(\005\022\020\n\010scene_id\030\002"
  " \001(\005\"8\n\021ServerMsgDelQuest\022\021\n\tplayer_id\030\001"
  " \001(\005\022\020\n\010quest_id\030\002 \001(\005\"\241\001\n ServerMsgDelt"
  "ailOfHealsAndDamage\022\021\n\thp_modify\030\001 \001(\005\022\021"
  "\n\tobject_id\030\002 \001(\005\022\021\n\tsender_id\030\003 \001(\005\022\032\n\022"
  "sender_logic_count\030\004 \001(\005\022\024\n\014critical_hit"
  "\030\005 \001(\010\022\022\n\ndeath_blow\030\006 \001(\010\"\356\001\n\032ServerMsg"
  "DetailAbilityInfo\022\021\n\tobject_id\030\001 \001(\005\022\020\n\010"
  "scene_id\030\002 \001(\005\022\025\n\rability_count\030\003 \001(\005\022\024\n"
  "\014ability_list\030\004 \003(\005\022%\n\010abilitys\030\005 \003(\0132\023."
  "base.PlayerAbility\022\016\n\006prescr\030\006 \001(\t\022\027\n\017ne"
  "xt_need_level\030\007 \003(\005\022\027\n\017next_need_money\030\010"
  " \003(\005\022\025\n\rnext_need_exp\030\t \003(\005\"\266\010\n\025ServerMs"
  "gDetailAttrib\022 \n\006skills\030\001 \003(\0132\020.base.Hor"
  "seSkill\022\022\n\nextra_data\030\002 \001(\t\022\033\n\005flags\030\003 \001"
  "(\0132\014.base.Flag64\022\016\n\006map_id\030\004 \001(\005\022$\n\nhors"
  "e_guid\030\005 \001(\0132\020.base.SHorseGuid\022\023\n\013trade_"
  "index\030\006 \001(\005\022\017\n\007data_id\030\007 \001(\005\022\014\n\004name\030\010 \001"
  "(\t\022\020\n\010nickname\030\t \001(\t\022\017\n\007ai_type\030\n \001(\005\022\r\n"
  "\005level\030\013 \001(\005\022\013\n\003exp\030\014 \001(\005\022\n\n\002hp\030\r \001(\005\022\016\n"
  "\006hp_max\030\016 \001(\005\022\023\n\013horse_state\030\017 \001(\005\022\022\n\nge"
  "neration\030\020 \001(\005\022\021\n\thappiness\030\021 \001(\005\022\021\n\tatt"
  "r_near\030\022 \001(\005\022\020\n\010attr_far\030\023 \001(\005\022\022\n\nattr_m"
  "agic\030\024 \001(\005\022\020\n\010def_near\030\025 \001(\005\022\017\n\007def_far\030"
  "\026 \001(\005\022\021\n\tdef_magic\030\027 \001(\005\022\013\n\003hit\030\030 \001(\005\022\014\n"
  "\004miss\030\031 \001(\005\022\020\n\010critical\030\032 \001(\005\022\020\n\010model_i"
  "d\030\033 \001(\005\022\020\n\010mount_id\030\034 \001(\005\022\026\n\016str_percept"
  "ion\030\035 \001(\005\022\026\n\016con_perception\030\036 \001(\005\022\026\n\016dex"
  "_perception\030\037 \001(\005\022\026\n\016int_perception\030  \001("
  "\005\022\034\n\024str_perception_limit\030! \001(\005\022\034\n\024con_p"
  "erception_limit\030\" \001(\005\022\034\n\024dex_perception_"
  "limit\030# \001(\005\022\034\n\024int_perception_limit\030$ \001("
  "\005\022\020\n\010strength\030% \001(\005\022\013\n\003con\030& \001(\005\022\013\n\003dex\030"
  "\' \001(\005\022\024\n\014intelligence\030( \001(\005\022\021\n\tgrow_rate"
  "\030) \001(\005\022\024\n\014remain_point\030* \001(\005\022\026\n\016strength"
  "_point\030+ \001(\005\022\027\n\017smartness_point\030, \001(\005\022\022\n"
  "\nmind_point\030- \001(\005\022\032\n\022constitution_point\030"
  ". \001(\005\022\r\n\005index\030/ \001(\005\022\023\n\013stall_order\0300 \001("
  "\005\022\020\n\010pet_lock\0301 \001(\005\022\023\n\013unlock_time\0302 \001(\005"
  "\022\032\n\022current_horse_flag\0303 \001(\010\"\235\010\n\030ServerM"
  "sgDetailAttribPet\022 \n\006skills\030\001 \003(\0132\020.base"
  ".HorseSkill\022\022\n\nextra_data\030\002 \001(\t\022\033\n\005flags"
  "\030\003 \001(\0132\014.base.Flag64\022\016\n\006map_id\030\004 \001(\005\022$\n\n"
  "horse_guid\030\005 \001(\0132\020.base.SHorseGuid\022\023\n\013tr"
  "ade_index\030\006 \001(\005\022\017\n\007data_id\030\007 \001(\005\022\014\n\004name"
  "\030\010 \001(\t\022\020\n\010nickname\030\t \001(\t\022\017\n\007ai_type\030\n \001("
  "\005\022\r\n\005level\030\013 \001(\005\022\013\n\003exp\030\014 \001(\005\022\n\n\002hp\030\r \001("
  "\005\022\016\n\006hp_max\030\016 \001(\005\022\023\n\013horse_state\030\017 \001(\005\022\022"
  "\n\ngeneration\030\020 \001(\005\022\021\n\thappiness\030\021 \001(\005\022\021\n"
  "\tattr_near\030\022 \001(\005\022\020\n\010attr_far\030\023 \001(\005\022\022\n\nat"
  "tr_magic\030\024 \001(\005\022\020\n\010def_near\030\025 \001(\005\022\017\n\007def_"
  "far\030\026 \001(\005\022\021\n\tdef_magic\030\027 \001(\005\022\013\n\003hit\030\030 \001("
  "\005\022\014\n\004miss\030\031 \001(\005\022\020\n\010critical\030\032 \001(\005\022\020\n\010mod"
  "el_id\030\033 \001(\005\022\020\n\010mount_id\030\034 \001(\005\022\026\n\016str_per"
  "ception\030\035 \001(\005\022\026\n\016con_perception\030\036 \001(\005\022\026\n"
  "\016dex_perception\030\037 \001(\005\022\026\n\016int_perception\030"
  "  \001(\005\022\034\n\024str_perception_limit\030! \001(\005\022\034\n\024c"
  "on_perception_limit\030\" \001(\005\022\034\n\024dex_percept"
  "ion_limit\030# \001(\005\022\034\n\024int_perception_limit\030"
  "$ \001(\005\022\020\n\010strength\030% \001(\005\022\013\n\003con\030& \001(\005\022\013\n\003"
  "dex\030\' \001(\005\022\024\n\014intelligence\030( \001(\005\022\021\n\tgrow_"
  "rate\030) \001(\005\022\024\n\014remain_point\030* \001(\005\022\026\n\016stre"
  "ngth_point\030+ \001(\005\022\027\n\017smartness_point\030, \001("
  "\005\022\022\n\nmind_point\030- \001(\005\022\032\n\022constitution_po"
  "int\030. \001(\005\022\r\n\005index\030/ \001(\005\022\023\n\013stall_order\030"
  "0 \001(\005\022\020\n\010pet_lock\0301 \001(\005\022\023\n\013unlock_time\0302"
  " \001(\005\"\324\001\n\023ServerMsgDetailBuff\022\021\n\tobject_i"
  "d\030\001 \001(\005\022\023\n\013receiver_id\030\002 \001(\005\022\021\n\tsender_i"
  "d\030\003 \001(\005\022\016\n\006enable\030\004 \001(\010\022\020\n\010skill_id\030\005 \001("
  "\005\022\n\n\002sn\030\006 \001(\005\022\017\n\007buff_id\030\007 \001(\005\022\023\n\013contin"
  "uance\030\010 \001(\005\022\022\n\ndelay_time\030\t \001(\005\022\032\n\022sende"
  "r_logic_count\030\n \001(\005\"I\n\030ServerMsgDetailEq"
  "uipList\022\021\n\tobject_id\030\001 \001(\005\022\032\n\005items\030\002 \003("
  "\0132\013.base.SItem\"N\n\035ServerMsgDetailDetailI"
  "temList\022\021\n\tobject_id\030\001 \001(\005\022\032\n\005items\030\002 \003("
  "\0132\013.base.SItem\"P\n\030ServerMsgDetailSkillLi"
  "st\022\021\n\tplayer_id\030\001 \001(\005\022!\n\006skills\030\002 \003(\0132\021."
  "base.PlayerSpell\"n\n\021ServerMsgEnterMap\022\020\n"
  "\010scene_id\030\001 \001(\r\022\022\n\nposition_x\030\002 \001(\002\022\022\n\np"
  "osition_y\030\003 \001(\002\022\014\n\004guid\030\004 \001(\005\022\021\n\tobject_"
  "id\030\005 \001(\005\"]\n\021ServerMsgItemInfo\022\021\n\tbag_ind"
  "ex\030\001 \001(\005\022\031\n\004item\030\002 \001(\0132\013.base.SItem\022\014\n\004n"
  "ull\030\003 \001(\010\022\014\n\004tips\030\004 \001(\005\"S\n\034ServerMsgMani"
  "pulatePetResult\022\016\n\006result\030\001 \001(\005\022\021\n\tobjec"
  "t_id\030\002 \001(\005\022\020\n\010scene_id\030\003 \001(\005\"u\n\024ServerMs"
  "gModifyQuest\022\021\n\tplayer_id\030\001 \001(\005\022\020\n\010quest"
  "_id\030\002 \001(\005\022\014\n\004flag\030\003 \001(\005\022\016\n\006flag32\030\004 \001(\r\022"
  "\032\n\005quest\030\005 \001(\0132\013.base.Quest\"\336\004\n\031ServerMs"
  "gMonsterAttribute\022\017\n\007refresh\030\001 \001(\005\022\033\n\005fl"
  "ags\030\002 \001(\0132\014.base.Flag64\022\021\n\tobject_id\030\003 \001"
  "(\005\022\017\n\007data_id\030\004 \001(\r\022\r\n\005level\030\005 \001(\005\022\022\n\nhp"
  "_percent\030\006 \001(\005\022\023\n\013steal_level\030\007 \001(\005\022\022\n\nm"
  "ood_state\030\010 \001(\005\022\022\n\nmove_speed\030\t \001(\002\022\024\n\014a"
  "ttack_speed\030\n \001(\002\022\"\n\tcamp_data\030\013 \001(\0132\017.b"
  "ase.SCampData\022\023\n\013portrait_id\030\014 \001(\005\022\020\n\010mo"
  "del_id\030\r \001(\005\022\020\n\010mount_id\030\016 \001(\005\022\017\n\007ai_typ"
  "e\030\017 \001(\005\022\014\n\004name\030\020 \001(\t\022\025\n\rcountry_title\030\021"
  " \001(\t\022\023\n\013guild_title\030\022 \001(\t\022\024\n\014normal_titl"
  "e\030\023 \001(\t\022\032\n\022country_title_type\030\024 \001(\005\022\030\n\020g"
  "uild_title_type\030\025 \001(\005\022\031\n\021normal_title_ty"
  "pe\030\026 \001(\005\022\025\n\roccupant_guid\030\027 \001(\r\022\020\n\010owner"
  "_id\030\030 \001(\005\022\021\n\ttarget_id\030\031 \001(\005\022\013\n\003dir\030\032 \001("
  "\002\022\022\n\nctrl_state\030\033 \001(\005\022\r\n\005scale\030\034 \001(\002\"\306\001\n"
  "\023ServerMsgNewBeastie\022\021\n\tobject_id\030\001 \001(\r\022"
  "\014\n\004name\030\002 \001(\t\022\022\n\nposition_x\030\003 \001(\002\022\022\n\npos"
  "ition_z\030\004 \001(\002\022\013\n\003dir\030\005 \001(\002\022\022\n\nmove_speed"
  "\030\006 \001(\002\022\016\n\006moving\030\007 \001(\010\022\021\n\thandle_id\030\010 \001("
  "\005\022\020\n\010target_x\030\t \001(\002\022\020\n\010target_z\030\n \001(\002\"\207\001"
  "\n\020ServerMsgNewItem\022\021\n\tobject_id\030\001 \001(\005\022\020\n"
  "\010scene_id\030\002 \001(\005\022\022\n\nitem_index\030\003 \001(\005\022\022\n\ni"
  "tem_count\030\004 \001(\005\022\022\n\nposition_x\030\005 \001(\002\022\022\n\np"
  "osition_z\030\006 \001(\002\"\215\001\n\023ServerMsgNewItemBox\022"
  "\021\n\tobject_id\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\020\n\010owne"
  "r_id\030\003 \001(\r\022\020\n\010scene_id\030\004 \001(\005\022\030\n\003pos\030\005 \001("
  "\0132\013.base.GLPos\022\027\n\017drop_monster_id\030\006 \001(\005\""
  "\353\001\n\023ServerMsgNewMonster\022\021\n\tobject_id\030\001 \001"
  "(\r\022\014\n\004name\030\002 \001(\t\022\022\n\nposition_x\030\003 \001(\002\022\023\n\013"
  "positiion_y\030\004 \001(\002\022\013\n\003dir\030\005 \001(\002\022\022\n\nmove_s"
  "peed\030\006 \001(\002\022\020\n\010horse_id\030\007 \001(\002\022\021\n\tweapon_i"
  "d\030\010 \001(\002\022\024\n\014monster_type\030\t \001(\005\022\014\n\004guid\030\n "
  "\001(\r\022\017\n\007race_id\030\013 \001(\005\022\017\n\007camp_id\030\014 \001(\005\"D\n"
  "\024ServerMsgNotifyEquip\022\021\n\tbag_index\030\001 \001(\005"
  "\022\031\n\004item\030\002 \001(\0132\013.base.SItem\"b\n\026ServerMsg"
  "OperateResult\022\021\n\tplayer_id\030\001 \001(\005\022\016\n\006map_"
  "id\030\002 \001(\005\022\020\n\010res_type\030\003 \001(\005\022\023\n\013result_cod"
  "e\030\004 \001(\005\"A\n\027ServerMsgPickItemResult\022\021\n\tob"
  "ject_id\030\001 \001(\005\022\023\n\013result_code\030\002 \001(\005\".\n\031Se"
  "rverMsgQueryEventResult\022\021\n\tobject_id\030\001 \001"
  "(\r\"W\n\022ServerMsgQuestList\022\021\n\tplayer_id\030\001 "
  "\001(\005\022.\n\nquest_list\030\002 \001(\0132\032.base.SArchiveL"
  "oader_Quest\"@\n\031ServerMsgQuestListRefresh"
  "\022\021\n\tobject_id\030\001 \001(\005\022\020\n\010scene_id\030\002 \001(\005\"f\n"
  "\033ServerMsgSkillSettingResult\022\021\n\tobject_i"
  "d\030\001 \001(\005\022%\n\007setting\030\002 \001(\0132\024.base.Player_S"
  "etting\022\r\n\005index\030\003 \001(\005\"\330\001\n\026ServerMsgScrip"
  "tCommand\022\016\n\006cmd_id\030\001 \001(\005\022%\n\007setting\030\002 \001("
  "\0132\024.base.Player_Setting\022\r\n\005index\030\003 \001(\005\0223"
  "\n\016continue_param\030\004 \001(\0132\033.base.ScriptPara"
  "m_QuestInfo\022/\n\nquest_info\030\005 \001(\0132\033.base.S"
  "criptParam_QuestInfo\022\022\n\nquest_tips\030\006 \001(\t"
  "\"o\n\025ServerMsgSkillUpgrade\022\021\n\tobject_id\030\001"
  " \001(\005\022\020\n\010skill_id\030\002 \001(\005\022\023\n\013skill_level\030\003 "
  "\001(\005\022\016\n\006sucess\030\004 \001(\010\022\014\n\004type\030\005 \001(\005\"I\n\021Ser"
  "verMsgSwapItem\022\016\n\006result\030\001 \001(\005\022\022\n\nsource"
  "_pos\030\002 \001(\005\022\020\n\010dest_pos\030\003 \001(\005\"\227\001\n\036ServerM"
  "sgTargetListAndHitFlags\022\021\n\tobject_id\030\001 \001"
  "(\005\022\023\n\013logic_count\030\002 \001(\005\022\020\n\010skill_id\030\003 \001("
  "\005\022\023\n\013target_list\030\004 \003(\005\022\022\n\nposition_x\030\005 \001"
  "(\002\022\022\n\nposition_z\030\006 \001(\002\"y\n\034ServerMsgTaskD"
  "ownEquipResult\022\016\n\006result\030\001 \001(\005\022\021\n\tplayer"
  "_id\030\002 \001(\005\022\016\n\006map_id\030\003 \001(\005\022\023\n\013equip_point"
  "\030\004 \001(\005\022\021\n\tbag_index\030\005 \001(\005\"Q\n\027ServerMsgUs"
  "eEquipResult\022\016\n\006result\030\001 \001(\005\022\023\n\013equip_po"
  "int\030\002 \001(\005\022\021\n\tbag_index\030\003 \001(\005*\207\t\n\tMessage"
  "ID\022\017\n\013SC_MSG_NONE\020\000\022\021\n\014DS_CHAR_DATA\020\210\'\022\021"
  "\n\014SC_ENTER_MAP\020\220N\022\032\n\025SC_QUERY_EVENT_RESU"
  "LT\020\370U\022\032\n\025SC_QUERY_QUEST_RESULT\020\371U\022\022\n\rSC_"
  "NEWMONSTER\020\372U\022\026\n\021SC_CHARACTER_MOVE\020\373U\022\033\n"
  "\026SC_TARGETLIST_HITFLAGS\020\374U\022\033\n\026SC_DETAIL_"
  "HEALS_DAMAGE\020\375U\022\025\n\020SC_DELETE_OBJECT\020\376U\022\030"
  "\n\023SC_MONSTER_ATTRBUTE\020\377U\022\017\n\nSC_NEWITEM\020\200"
  "V\022\022\n\rSC_EQUIP_LIST\020\201V\022\030\n\023SC_PICK_ITEM_RE"
  "SULT\020\202V\022\021\n\014SC_ITEM_INFO\020\203V\022\024\n\017SC_NOTIFY_"
  "EQUIP\020\204V\022\021\n\014SC_SWAP_ITEM\020\205V\022\026\n\021SC_UNEQUI"
  "P_RESULT\020\206V\022\027\n\022SC_USEEQUIP_RESULT\020\207V\022\022\n\r"
  "SC_QUEST_LIST\020\210V\022\021\n\014SC_ADD_QUEST\020\211V\022\021\n\014S"
  "C_DEL_QUEST\020\212V\022\017\n\nSC_COMMAND\020\213V\022\026\n\021SC_SC"
  "RIPT_COMMAND\020\214V\022\014\n\007SC_CHAT\020\215V\022\035\n\030SC_MANI"
  "PULATE_PET_RESULT\020\216V\022\023\n\016SC_NEW_BEASTIE\020\217"
  "V\022\027\n\022SC_COOLDOWN_UPDATE\020\220V\022\031\n\024SC_DETAIL_"
  "ATTRIB_PET\020\221V\022\031\n\024SC_IMPACTLIST_UPDATE\020\222V"
  "\022\026\n\021SC_CHAR_EQUIPMENT\020\223V\022\031\n\024SC_QUESTLIST"
  "_REFRESH\020\224V\022\023\n\016SC_DETAIL_ATTR\020\225V\022\031\n\024SC_C"
  "HAR_SKILL_GATHER\020\226V\022\030\n\023SC_CHAR_STOP_ACTI"
  "ON\020\227V\022\025\n\020SC_SKILL_UPGRADE\020\230V\022\023\n\016SC_DETAI"
  "L_BUFF\020\231V\022\025\n\020SC_SKILL_SETTING\020\232V\022\037\n\032SC_A"
  "DD_SKILL_TO_SKILL_LIST\020\233V\022\023\n\016SC_NEW_ITEM"
  "BOX\020\234V\022\033\n\026SC_DETAIL_ABILITY_INFO\020\235V\022\026\n\021S"
  "C_ABILITY_RESULT\020\236V\022\026\n\021SC_OPERATE_RESULT"
  "\020\237V\022\036\n\031SC_MESSAGE_ABILITY_ACTION\020\240V\022\027\n\022S"
  "C_ABILITY_SUCCESS\020\241V\022\027\n\022SC_HUMAN_BASE_AT"
  "TR\020\242V\022\024\n\017SC_DETAIL_EQUIP\020\243V\022\023\n\016SC_DETAIL"
  "_ITEM\020\244V\022\024\n\017SC_DETAIL_SKILL\020\245Vb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_server_5fmessage_2eproto_deps[1] = {
  &::descriptor_table_base_2eproto,
};
static ::_pbi::once_flag descriptor_table_server_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_server_5fmessage_2eproto = {
    false, false, 9758, descriptor_table_protodef_server_5fmessage_2eproto,
    "server_message.proto",
    &descriptor_table_server_5fmessage_2eproto_once, descriptor_table_server_5fmessage_2eproto_deps, 1, 46,
    schemas, file_default_instances, TableStruct_server_5fmessage_2eproto::offsets,
    file_level_metadata_server_5fmessage_2eproto, file_level_enum_descriptors_server_5fmessage_2eproto,
    file_level_service_descriptors_server_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_server_5fmessage_2eproto_getter() {
  return &descriptor_table_server_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_server_5fmessage_2eproto(&descriptor_table_server_5fmessage_2eproto);
namespace servermessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_server_5fmessage_2eproto);
  return file_level_enum_descriptors_server_5fmessage_2eproto[0];
}
bool MessageID_IsValid(int value) {
  switch (value) {
    case 0:
    case 5000:
    case 10000:
    case 11000:
    case 11001:
    case 11002:
    case 11003:
    case 11004:
    case 11005:
    case 11006:
    case 11007:
    case 11008:
    case 11009:
    case 11010:
    case 11011:
    case 11012:
    case 11013:
    case 11014:
    case 11015:
    case 11016:
    case 11017:
    case 11018:
    case 11019:
    case 11020:
    case 11021:
    case 11022:
    case 11023:
    case 11024:
    case 11025:
    case 11026:
    case 11027:
    case 11028:
    case 11029:
    case 11030:
    case 11031:
    case 11032:
    case 11033:
    case 11034:
    case 11035:
    case 11036:
    case 11037:
    case 11038:
    case 11039:
    case 11040:
    case 11041:
    case 11042:
    case 11043:
    case 11044:
    case 11045:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ServerMsgAbilityAction::_Internal {
 public:
};

ServerMsgAbilityAction::ServerMsgAbilityAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgAbilityAction)
}
ServerMsgAbilityAction::ServerMsgAbilityAction(const ServerMsgAbilityAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgAbilityAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.logic_count_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.prescription_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.begin_end_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.begin_end_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.begin_end_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgAbilityAction)
}

inline void ServerMsgAbilityAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.logic_count_){0}
    , decltype(_impl_.ability_id_){0}
    , decltype(_impl_.prescription_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.begin_end_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgAbilityAction::~ServerMsgAbilityAction() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgAbilityAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgAbilityAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgAbilityAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgAbilityAction::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgAbilityAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.begin_end_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.begin_end_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgAbilityAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logic_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.logic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prescription_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prescription_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 begin_end = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.begin_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgAbilityAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgAbilityAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 logic_count = 2;
  if (this->_internal_logic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_logic_count(), target);
  }

  // int32 ability_id = 3;
  if (this->_internal_ability_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ability_id(), target);
  }

  // int32 prescription_id = 4;
  if (this->_internal_prescription_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_prescription_id(), target);
  }

  // int32 target_id = 5;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_id(), target);
  }

  // int32 begin_end = 6;
  if (this->_internal_begin_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_begin_end(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgAbilityAction)
  return target;
}

size_t ServerMsgAbilityAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgAbilityAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 logic_count = 2;
  if (this->_internal_logic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logic_count());
  }

  // int32 ability_id = 3;
  if (this->_internal_ability_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
  }

  // int32 prescription_id = 4;
  if (this->_internal_prescription_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prescription_id());
  }

  // int32 target_id = 5;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 begin_end = 6;
  if (this->_internal_begin_end() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_begin_end());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgAbilityAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgAbilityAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgAbilityAction::GetClassData() const { return &_class_data_; }


void ServerMsgAbilityAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgAbilityAction*>(&to_msg);
  auto& from = static_cast<const ServerMsgAbilityAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgAbilityAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_logic_count() != 0) {
    _this->_internal_set_logic_count(from._internal_logic_count());
  }
  if (from._internal_ability_id() != 0) {
    _this->_internal_set_ability_id(from._internal_ability_id());
  }
  if (from._internal_prescription_id() != 0) {
    _this->_internal_set_prescription_id(from._internal_prescription_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_begin_end() != 0) {
    _this->_internal_set_begin_end(from._internal_begin_end());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgAbilityAction::CopyFrom(const ServerMsgAbilityAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgAbilityAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgAbilityAction::IsInitialized() const {
  return true;
}

void ServerMsgAbilityAction::InternalSwap(ServerMsgAbilityAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgAbilityAction, _impl_.begin_end_)
      + sizeof(ServerMsgAbilityAction::_impl_.begin_end_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgAbilityAction, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgAbilityAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[0]);
}

// ===================================================================

class ServerMsgAbilityResult::_Internal {
 public:
};

ServerMsgAbilityResult::ServerMsgAbilityResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgAbilityResult)
}
ServerMsgAbilityResult::ServerMsgAbilityResult(const ServerMsgAbilityResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgAbilityResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.prescription_id_){}
    , decltype(_impl_.result_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_code_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.result_code_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgAbilityResult)
}

inline void ServerMsgAbilityResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.ability_id_){0}
    , decltype(_impl_.prescription_id_){0}
    , decltype(_impl_.result_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgAbilityResult::~ServerMsgAbilityResult() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgAbilityResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgAbilityResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgAbilityResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgAbilityResult::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgAbilityResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_code_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.result_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgAbilityResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prescription_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prescription_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgAbilityResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgAbilityResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 ability_id = 3;
  if (this->_internal_ability_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ability_id(), target);
  }

  // int32 prescription_id = 4;
  if (this->_internal_prescription_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_prescription_id(), target);
  }

  // int32 result_code = 5;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgAbilityResult)
  return target;
}

size_t ServerMsgAbilityResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgAbilityResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 ability_id = 3;
  if (this->_internal_ability_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
  }

  // int32 prescription_id = 4;
  if (this->_internal_prescription_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prescription_id());
  }

  // int32 result_code = 5;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgAbilityResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgAbilityResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgAbilityResult::GetClassData() const { return &_class_data_; }


void ServerMsgAbilityResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgAbilityResult*>(&to_msg);
  auto& from = static_cast<const ServerMsgAbilityResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgAbilityResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_ability_id() != 0) {
    _this->_internal_set_ability_id(from._internal_ability_id());
  }
  if (from._internal_prescription_id() != 0) {
    _this->_internal_set_prescription_id(from._internal_prescription_id());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgAbilityResult::CopyFrom(const ServerMsgAbilityResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgAbilityResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgAbilityResult::IsInitialized() const {
  return true;
}

void ServerMsgAbilityResult::InternalSwap(ServerMsgAbilityResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgAbilityResult, _impl_.result_code_)
      + sizeof(ServerMsgAbilityResult::_impl_.result_code_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgAbilityResult, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgAbilityResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[1]);
}

// ===================================================================

class ServerMsgAbilitySuccess::_Internal {
 public:
};

ServerMsgAbilitySuccess::ServerMsgAbilitySuccess(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgAbilitySuccess)
}
ServerMsgAbilitySuccess::ServerMsgAbilitySuccess(const ServerMsgAbilitySuccess& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgAbilitySuccess* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.prescription_id_){}
    , decltype(_impl_.result_code_){}
    , decltype(_impl_.item_serial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.item_serial_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.item_serial_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgAbilitySuccess)
}

inline void ServerMsgAbilitySuccess::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.ability_id_){0}
    , decltype(_impl_.prescription_id_){0}
    , decltype(_impl_.result_code_){0}
    , decltype(_impl_.item_serial_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgAbilitySuccess::~ServerMsgAbilitySuccess() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgAbilitySuccess)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgAbilitySuccess::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgAbilitySuccess::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgAbilitySuccess::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgAbilitySuccess)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.item_serial_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.item_serial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgAbilitySuccess::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prescription_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.prescription_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result_code = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_serial = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.item_serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgAbilitySuccess::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgAbilitySuccess)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 ability_id = 3;
  if (this->_internal_ability_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ability_id(), target);
  }

  // int32 prescription_id = 4;
  if (this->_internal_prescription_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_prescription_id(), target);
  }

  // int32 result_code = 5;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_result_code(), target);
  }

  // int32 item_serial = 6;
  if (this->_internal_item_serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_item_serial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgAbilitySuccess)
  return target;
}

size_t ServerMsgAbilitySuccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgAbilitySuccess)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 ability_id = 3;
  if (this->_internal_ability_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
  }

  // int32 prescription_id = 4;
  if (this->_internal_prescription_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prescription_id());
  }

  // int32 result_code = 5;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result_code());
  }

  // int32 item_serial = 6;
  if (this->_internal_item_serial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_serial());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgAbilitySuccess::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgAbilitySuccess::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgAbilitySuccess::GetClassData() const { return &_class_data_; }


void ServerMsgAbilitySuccess::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgAbilitySuccess*>(&to_msg);
  auto& from = static_cast<const ServerMsgAbilitySuccess&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgAbilitySuccess)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_ability_id() != 0) {
    _this->_internal_set_ability_id(from._internal_ability_id());
  }
  if (from._internal_prescription_id() != 0) {
    _this->_internal_set_prescription_id(from._internal_prescription_id());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  if (from._internal_item_serial() != 0) {
    _this->_internal_set_item_serial(from._internal_item_serial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgAbilitySuccess::CopyFrom(const ServerMsgAbilitySuccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgAbilitySuccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgAbilitySuccess::IsInitialized() const {
  return true;
}

void ServerMsgAbilitySuccess::InternalSwap(ServerMsgAbilitySuccess* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgAbilitySuccess, _impl_.item_serial_)
      + sizeof(ServerMsgAbilitySuccess::_impl_.item_serial_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgAbilitySuccess, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgAbilitySuccess::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[2]);
}

// ===================================================================

class ServerMsgAddQuest::_Internal {
 public:
  static const ::base::Quest& quest(const ServerMsgAddQuest* msg);
};

const ::base::Quest&
ServerMsgAddQuest::_Internal::quest(const ServerMsgAddQuest* msg) {
  return *msg->_impl_.quest_;
}
void ServerMsgAddQuest::clear_quest() {
  if (GetArenaForAllocation() == nullptr && _impl_.quest_ != nullptr) {
    delete _impl_.quest_;
  }
  _impl_.quest_ = nullptr;
}
ServerMsgAddQuest::ServerMsgAddQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgAddQuest)
}
ServerMsgAddQuest::ServerMsgAddQuest(const ServerMsgAddQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgAddQuest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quest_){nullptr}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quest()) {
    _this->_impl_.quest_ = new ::base::Quest(*from._impl_.quest_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgAddQuest)
}

inline void ServerMsgAddQuest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quest_){nullptr}
    , decltype(_impl_.player_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgAddQuest::~ServerMsgAddQuest() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgAddQuest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgAddQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.quest_;
}

void ServerMsgAddQuest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgAddQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgAddQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.quest_ != nullptr) {
    delete _impl_.quest_;
  }
  _impl_.quest_ = nullptr;
  _impl_.player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgAddQuest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.Quest quest = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgAddQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgAddQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // .base.Quest quest = 2;
  if (this->_internal_has_quest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quest(this),
        _Internal::quest(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgAddQuest)
  return target;
}

size_t ServerMsgAddQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgAddQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.Quest quest = 2;
  if (this->_internal_has_quest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quest_);
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgAddQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgAddQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgAddQuest::GetClassData() const { return &_class_data_; }


void ServerMsgAddQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgAddQuest*>(&to_msg);
  auto& from = static_cast<const ServerMsgAddQuest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgAddQuest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest()) {
    _this->_internal_mutable_quest()->::base::Quest::MergeFrom(
        from._internal_quest());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgAddQuest::CopyFrom(const ServerMsgAddQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgAddQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgAddQuest::IsInitialized() const {
  return true;
}

void ServerMsgAddQuest::InternalSwap(ServerMsgAddQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgAddQuest, _impl_.player_id_)
      + sizeof(ServerMsgAddQuest::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgAddQuest, _impl_.quest_)>(
          reinterpret_cast<char*>(&_impl_.quest_),
          reinterpret_cast<char*>(&other->_impl_.quest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgAddQuest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[3]);
}

// ===================================================================

class ServerMsgAddSkillToSkillList::_Internal {
 public:
};

ServerMsgAddSkillToSkillList::ServerMsgAddSkillToSkillList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgAddSkillToSkillList)
}
ServerMsgAddSkillToSkillList::ServerMsgAddSkillToSkillList(const ServerMsgAddSkillToSkillList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgAddSkillToSkillList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.skill_state_){}
    , decltype(_impl_.skill_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.skill_level_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.skill_level_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgAddSkillToSkillList)
}

inline void ServerMsgAddSkillToSkillList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.skill_id_){0}
    , decltype(_impl_.skill_state_){0}
    , decltype(_impl_.skill_level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgAddSkillToSkillList::~ServerMsgAddSkillToSkillList() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgAddSkillToSkillList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgAddSkillToSkillList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgAddSkillToSkillList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgAddSkillToSkillList::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgAddSkillToSkillList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.skill_level_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.skill_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgAddSkillToSkillList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.skill_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgAddSkillToSkillList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgAddSkillToSkillList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 skill_id = 2;
  if (this->_internal_skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_skill_id(), target);
  }

  // int32 skill_state = 3;
  if (this->_internal_skill_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_skill_state(), target);
  }

  // int32 skill_level = 4;
  if (this->_internal_skill_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_skill_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgAddSkillToSkillList)
  return target;
}

size_t ServerMsgAddSkillToSkillList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgAddSkillToSkillList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 skill_id = 2;
  if (this->_internal_skill_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_id());
  }

  // int32 skill_state = 3;
  if (this->_internal_skill_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_state());
  }

  // int32 skill_level = 4;
  if (this->_internal_skill_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgAddSkillToSkillList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgAddSkillToSkillList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgAddSkillToSkillList::GetClassData() const { return &_class_data_; }


void ServerMsgAddSkillToSkillList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgAddSkillToSkillList*>(&to_msg);
  auto& from = static_cast<const ServerMsgAddSkillToSkillList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgAddSkillToSkillList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_skill_id() != 0) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_skill_state() != 0) {
    _this->_internal_set_skill_state(from._internal_skill_state());
  }
  if (from._internal_skill_level() != 0) {
    _this->_internal_set_skill_level(from._internal_skill_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgAddSkillToSkillList::CopyFrom(const ServerMsgAddSkillToSkillList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgAddSkillToSkillList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgAddSkillToSkillList::IsInitialized() const {
  return true;
}

void ServerMsgAddSkillToSkillList::InternalSwap(ServerMsgAddSkillToSkillList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgAddSkillToSkillList, _impl_.skill_level_)
      + sizeof(ServerMsgAddSkillToSkillList::_impl_.skill_level_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgAddSkillToSkillList, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgAddSkillToSkillList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[4]);
}

// ===================================================================

class ServerMsgCharEquipment::_Internal {
 public:
};

ServerMsgCharEquipment::ServerMsgCharEquipment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgCharEquipment)
}
ServerMsgCharEquipment::ServerMsgCharEquipment(const ServerMsgCharEquipment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgCharEquipment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.scene_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scene_id_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.scene_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgCharEquipment)
}

inline void ServerMsgCharEquipment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.scene_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgCharEquipment::~ServerMsgCharEquipment() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgCharEquipment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgCharEquipment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgCharEquipment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgCharEquipment::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgCharEquipment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scene_id_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgCharEquipment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgCharEquipment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgCharEquipment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgCharEquipment)
  return target;
}

size_t ServerMsgCharEquipment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgCharEquipment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgCharEquipment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgCharEquipment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgCharEquipment::GetClassData() const { return &_class_data_; }


void ServerMsgCharEquipment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgCharEquipment*>(&to_msg);
  auto& from = static_cast<const ServerMsgCharEquipment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgCharEquipment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgCharEquipment::CopyFrom(const ServerMsgCharEquipment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgCharEquipment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgCharEquipment::IsInitialized() const {
  return true;
}

void ServerMsgCharEquipment::InternalSwap(ServerMsgCharEquipment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgCharEquipment, _impl_.scene_id_)
      + sizeof(ServerMsgCharEquipment::_impl_.scene_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgCharEquipment, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgCharEquipment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[5]);
}

// ===================================================================

class ServerHumanBaseAttrib::_Internal {
 public:
  static const ::base::Flag64& flags(const ServerHumanBaseAttrib* msg);
  static const ::base::SCampData& camp_data(const ServerHumanBaseAttrib* msg);
  static const ::base::SHorseGuid& current_horse_guid(const ServerHumanBaseAttrib* msg);
};

const ::base::Flag64&
ServerHumanBaseAttrib::_Internal::flags(const ServerHumanBaseAttrib* msg) {
  return *msg->_impl_.flags_;
}
const ::base::SCampData&
ServerHumanBaseAttrib::_Internal::camp_data(const ServerHumanBaseAttrib* msg) {
  return *msg->_impl_.camp_data_;
}
const ::base::SHorseGuid&
ServerHumanBaseAttrib::_Internal::current_horse_guid(const ServerHumanBaseAttrib* msg) {
  return *msg->_impl_.current_horse_guid_;
}
void ServerHumanBaseAttrib::clear_flags() {
  if (GetArenaForAllocation() == nullptr && _impl_.flags_ != nullptr) {
    delete _impl_.flags_;
  }
  _impl_.flags_ = nullptr;
}
void ServerHumanBaseAttrib::clear_camp_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.camp_data_ != nullptr) {
    delete _impl_.camp_data_;
  }
  _impl_.camp_data_ = nullptr;
}
void ServerHumanBaseAttrib::clear_current_horse_guid() {
  if (GetArenaForAllocation() == nullptr && _impl_.current_horse_guid_ != nullptr) {
    delete _impl_.current_horse_guid_;
  }
  _impl_.current_horse_guid_ = nullptr;
}
ServerHumanBaseAttrib::ServerHumanBaseAttrib(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerHumanBaseAttrib)
}
ServerHumanBaseAttrib::ServerHumanBaseAttrib(const ServerHumanBaseAttrib& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerHumanBaseAttrib* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.country_title_){}
    , decltype(_impl_.guild_title_){}
    , decltype(_impl_.normal_title_){}
    , decltype(_impl_.flags_){nullptr}
    , decltype(_impl_.camp_data_){nullptr}
    , decltype(_impl_.current_horse_guid_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.job_){}
    , decltype(_impl_.country_){}
    , decltype(_impl_.data_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.hair_mesh_id_){}
    , decltype(_impl_.face_mesh_id_){}
    , decltype(_impl_.hp_percent_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.hp_max_){}
    , decltype(_impl_.rage_){}
    , decltype(_impl_.max_rage_){}
    , decltype(_impl_.steal_level_){}
    , decltype(_impl_.mood_state_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.attack_speed_){}
    , decltype(_impl_.portrait_id_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.mount_id_){}
    , decltype(_impl_.country_title_type_){}
    , decltype(_impl_.guild_title_type_){}
    , decltype(_impl_.stall_is_open_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.pk_value_){}
    , decltype(_impl_.generation_){}
    , decltype(_impl_.world_id_){}
    , decltype(_impl_.inherence_exp_){}
    , decltype(_impl_.inherence_level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_title().empty()) {
    _this->_impl_.country_title_.Set(from._internal_country_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guild_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_title().empty()) {
    _this->_impl_.guild_title_.Set(from._internal_guild_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.normal_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.normal_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_normal_title().empty()) {
    _this->_impl_.normal_title_.Set(from._internal_normal_title(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_flags()) {
    _this->_impl_.flags_ = new ::base::Flag64(*from._impl_.flags_);
  }
  if (from._internal_has_camp_data()) {
    _this->_impl_.camp_data_ = new ::base::SCampData(*from._impl_.camp_data_);
  }
  if (from._internal_has_current_horse_guid()) {
    _this->_impl_.current_horse_guid_ = new ::base::SHorseGuid(*from._impl_.current_horse_guid_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.inherence_level_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.inherence_level_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerHumanBaseAttrib)
}

inline void ServerHumanBaseAttrib::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.country_title_){}
    , decltype(_impl_.guild_title_){}
    , decltype(_impl_.normal_title_){}
    , decltype(_impl_.flags_){nullptr}
    , decltype(_impl_.camp_data_){nullptr}
    , decltype(_impl_.current_horse_guid_){nullptr}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.job_){0}
    , decltype(_impl_.country_){0}
    , decltype(_impl_.data_id_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.hair_mesh_id_){0}
    , decltype(_impl_.face_mesh_id_){0}
    , decltype(_impl_.hp_percent_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.hp_max_){0}
    , decltype(_impl_.rage_){0}
    , decltype(_impl_.max_rage_){0}
    , decltype(_impl_.steal_level_){0}
    , decltype(_impl_.mood_state_){0}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.attack_speed_){0}
    , decltype(_impl_.portrait_id_){0}
    , decltype(_impl_.model_id_){0}
    , decltype(_impl_.mount_id_){0}
    , decltype(_impl_.country_title_type_){0}
    , decltype(_impl_.guild_title_type_){0}
    , decltype(_impl_.stall_is_open_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.pk_value_){0}
    , decltype(_impl_.generation_){0}
    , decltype(_impl_.world_id_){0}
    , decltype(_impl_.inherence_exp_){0u}
    , decltype(_impl_.inherence_level_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guild_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.normal_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.normal_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerHumanBaseAttrib::~ServerHumanBaseAttrib() {
  // @@protoc_insertion_point(destructor:servermessage.ServerHumanBaseAttrib)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerHumanBaseAttrib::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.country_title_.Destroy();
  _impl_.guild_title_.Destroy();
  _impl_.normal_title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.flags_;
  if (this != internal_default_instance()) delete _impl_.camp_data_;
  if (this != internal_default_instance()) delete _impl_.current_horse_guid_;
}

void ServerHumanBaseAttrib::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerHumanBaseAttrib::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerHumanBaseAttrib)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.country_title_.ClearToEmpty();
  _impl_.guild_title_.ClearToEmpty();
  _impl_.normal_title_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.flags_ != nullptr) {
    delete _impl_.flags_;
  }
  _impl_.flags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.camp_data_ != nullptr) {
    delete _impl_.camp_data_;
  }
  _impl_.camp_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.current_horse_guid_ != nullptr) {
    delete _impl_.current_horse_guid_;
  }
  _impl_.current_horse_guid_ = nullptr;
  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.inherence_level_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.inherence_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerHumanBaseAttrib::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.Flag64 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 job = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.job_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 country = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.country_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hair_mesh_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.hair_mesh_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 face_mesh_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.face_mesh_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp_percent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.hp_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp_max = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.hp_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 rage = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.rage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_rage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.max_rage_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 steal_level = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.steal_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mood_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.mood_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 133)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attack_speed = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 141)) {
          _impl_.attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .base.SCampData camp_data = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_camp_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 portrait_id = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.portrait_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 model_id = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mount_id = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.mount_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 178)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerHumanBaseAttrib.name"));
        } else
          goto handle_unusual;
        continue;
      // string country_title = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 186)) {
          auto str = _internal_mutable_country_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerHumanBaseAttrib.country_title"));
        } else
          goto handle_unusual;
        continue;
      // string guild_title = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 194)) {
          auto str = _internal_mutable_guild_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerHumanBaseAttrib.guild_title"));
        } else
          goto handle_unusual;
        continue;
      // string normal_title = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 202)) {
          auto str = _internal_mutable_normal_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerHumanBaseAttrib.normal_title"));
        } else
          goto handle_unusual;
        continue;
      // int32 country_title_type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.country_title_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 guild_title_type = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.guild_title_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stall_is_open = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.stall_is_open_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pk_value = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.pk_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 generation = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 world_id = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inherence_exp = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.inherence_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 inherence_level = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.inherence_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SHorseGuid current_horse_guid = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_current_horse_guid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerHumanBaseAttrib::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerHumanBaseAttrib)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // .base.Flag64 flags = 2;
  if (this->_internal_has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::flags(this),
        _Internal::flags(this).GetCachedSize(), target, stream);
  }

  // int32 job = 3;
  if (this->_internal_job() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_job(), target);
  }

  // int32 country = 4;
  if (this->_internal_country() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_country(), target);
  }

  // int32 data_id = 5;
  if (this->_internal_data_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_data_id(), target);
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_level(), target);
  }

  // int32 hair_mesh_id = 7;
  if (this->_internal_hair_mesh_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_hair_mesh_id(), target);
  }

  // int32 face_mesh_id = 8;
  if (this->_internal_face_mesh_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_face_mesh_id(), target);
  }

  // int32 hp_percent = 9;
  if (this->_internal_hp_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_hp_percent(), target);
  }

  // int32 hp = 10;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_hp(), target);
  }

  // int32 hp_max = 11;
  if (this->_internal_hp_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_hp_max(), target);
  }

  // int32 rage = 12;
  if (this->_internal_rage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_rage(), target);
  }

  // int32 max_rage = 13;
  if (this->_internal_max_rage() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_max_rage(), target);
  }

  // int32 steal_level = 14;
  if (this->_internal_steal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_steal_level(), target);
  }

  // int32 mood_state = 15;
  if (this->_internal_mood_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_mood_state(), target);
  }

  // float move_speed = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(16, this->_internal_move_speed(), target);
  }

  // float attack_speed = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = this->_internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(17, this->_internal_attack_speed(), target);
  }

  // .base.SCampData camp_data = 18;
  if (this->_internal_has_camp_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, _Internal::camp_data(this),
        _Internal::camp_data(this).GetCachedSize(), target, stream);
  }

  // int32 portrait_id = 19;
  if (this->_internal_portrait_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_portrait_id(), target);
  }

  // int32 model_id = 20;
  if (this->_internal_model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_model_id(), target);
  }

  // int32 mount_id = 21;
  if (this->_internal_mount_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_mount_id(), target);
  }

  // string name = 22;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerHumanBaseAttrib.name");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_name(), target);
  }

  // string country_title = 23;
  if (!this->_internal_country_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_title().data(), static_cast<int>(this->_internal_country_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerHumanBaseAttrib.country_title");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_country_title(), target);
  }

  // string guild_title = 24;
  if (!this->_internal_guild_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_title().data(), static_cast<int>(this->_internal_guild_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerHumanBaseAttrib.guild_title");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_guild_title(), target);
  }

  // string normal_title = 25;
  if (!this->_internal_normal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_normal_title().data(), static_cast<int>(this->_internal_normal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerHumanBaseAttrib.normal_title");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_normal_title(), target);
  }

  // int32 country_title_type = 26;
  if (this->_internal_country_title_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_country_title_type(), target);
  }

  // int32 guild_title_type = 27;
  if (this->_internal_guild_title_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_guild_title_type(), target);
  }

  // int32 stall_is_open = 28;
  if (this->_internal_stall_is_open() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_stall_is_open(), target);
  }

  // int32 target_id = 29;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_target_id(), target);
  }

  // int32 pk_value = 30;
  if (this->_internal_pk_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_pk_value(), target);
  }

  // int32 generation = 31;
  if (this->_internal_generation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_generation(), target);
  }

  // int32 world_id = 32;
  if (this->_internal_world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_world_id(), target);
  }

  // uint32 inherence_exp = 33;
  if (this->_internal_inherence_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(33, this->_internal_inherence_exp(), target);
  }

  // uint32 inherence_level = 34;
  if (this->_internal_inherence_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(34, this->_internal_inherence_level(), target);
  }

  // .base.SHorseGuid current_horse_guid = 35;
  if (this->_internal_has_current_horse_guid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, _Internal::current_horse_guid(this),
        _Internal::current_horse_guid(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerHumanBaseAttrib)
  return target;
}

size_t ServerHumanBaseAttrib::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerHumanBaseAttrib)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 22;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string country_title = 23;
  if (!this->_internal_country_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_title());
  }

  // string guild_title = 24;
  if (!this->_internal_guild_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_title());
  }

  // string normal_title = 25;
  if (!this->_internal_normal_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_normal_title());
  }

  // .base.Flag64 flags = 2;
  if (this->_internal_has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flags_);
  }

  // .base.SCampData camp_data = 18;
  if (this->_internal_has_camp_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.camp_data_);
  }

  // .base.SHorseGuid current_horse_guid = 35;
  if (this->_internal_has_current_horse_guid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.current_horse_guid_);
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 job = 3;
  if (this->_internal_job() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_job());
  }

  // int32 country = 4;
  if (this->_internal_country() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_country());
  }

  // int32 data_id = 5;
  if (this->_internal_data_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_id());
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 hair_mesh_id = 7;
  if (this->_internal_hair_mesh_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hair_mesh_id());
  }

  // int32 face_mesh_id = 8;
  if (this->_internal_face_mesh_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_face_mesh_id());
  }

  // int32 hp_percent = 9;
  if (this->_internal_hp_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp_percent());
  }

  // int32 hp = 10;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 hp_max = 11;
  if (this->_internal_hp_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp_max());
  }

  // int32 rage = 12;
  if (this->_internal_rage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_rage());
  }

  // int32 max_rage = 13;
  if (this->_internal_max_rage() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_max_rage());
  }

  // int32 steal_level = 14;
  if (this->_internal_steal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_steal_level());
  }

  // int32 mood_state = 15;
  if (this->_internal_mood_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mood_state());
  }

  // float move_speed = 16;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 2 + 4;
  }

  // float attack_speed = 17;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = this->_internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    total_size += 2 + 4;
  }

  // int32 portrait_id = 19;
  if (this->_internal_portrait_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_portrait_id());
  }

  // int32 model_id = 20;
  if (this->_internal_model_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  // int32 mount_id = 21;
  if (this->_internal_mount_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mount_id());
  }

  // int32 country_title_type = 26;
  if (this->_internal_country_title_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_country_title_type());
  }

  // int32 guild_title_type = 27;
  if (this->_internal_guild_title_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_guild_title_type());
  }

  // int32 stall_is_open = 28;
  if (this->_internal_stall_is_open() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_stall_is_open());
  }

  // int32 target_id = 29;
  if (this->_internal_target_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_target_id());
  }

  // int32 pk_value = 30;
  if (this->_internal_pk_value() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pk_value());
  }

  // int32 generation = 31;
  if (this->_internal_generation() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_generation());
  }

  // int32 world_id = 32;
  if (this->_internal_world_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // uint32 inherence_exp = 33;
  if (this->_internal_inherence_exp() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_inherence_exp());
  }

  // uint32 inherence_level = 34;
  if (this->_internal_inherence_level() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_inherence_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerHumanBaseAttrib::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerHumanBaseAttrib::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerHumanBaseAttrib::GetClassData() const { return &_class_data_; }


void ServerHumanBaseAttrib::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerHumanBaseAttrib*>(&to_msg);
  auto& from = static_cast<const ServerHumanBaseAttrib&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerHumanBaseAttrib)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_country_title().empty()) {
    _this->_internal_set_country_title(from._internal_country_title());
  }
  if (!from._internal_guild_title().empty()) {
    _this->_internal_set_guild_title(from._internal_guild_title());
  }
  if (!from._internal_normal_title().empty()) {
    _this->_internal_set_normal_title(from._internal_normal_title());
  }
  if (from._internal_has_flags()) {
    _this->_internal_mutable_flags()->::base::Flag64::MergeFrom(
        from._internal_flags());
  }
  if (from._internal_has_camp_data()) {
    _this->_internal_mutable_camp_data()->::base::SCampData::MergeFrom(
        from._internal_camp_data());
  }
  if (from._internal_has_current_horse_guid()) {
    _this->_internal_mutable_current_horse_guid()->::base::SHorseGuid::MergeFrom(
        from._internal_current_horse_guid());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_job() != 0) {
    _this->_internal_set_job(from._internal_job());
  }
  if (from._internal_country() != 0) {
    _this->_internal_set_country(from._internal_country());
  }
  if (from._internal_data_id() != 0) {
    _this->_internal_set_data_id(from._internal_data_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_hair_mesh_id() != 0) {
    _this->_internal_set_hair_mesh_id(from._internal_hair_mesh_id());
  }
  if (from._internal_face_mesh_id() != 0) {
    _this->_internal_set_face_mesh_id(from._internal_face_mesh_id());
  }
  if (from._internal_hp_percent() != 0) {
    _this->_internal_set_hp_percent(from._internal_hp_percent());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_hp_max() != 0) {
    _this->_internal_set_hp_max(from._internal_hp_max());
  }
  if (from._internal_rage() != 0) {
    _this->_internal_set_rage(from._internal_rage());
  }
  if (from._internal_max_rage() != 0) {
    _this->_internal_set_max_rage(from._internal_max_rage());
  }
  if (from._internal_steal_level() != 0) {
    _this->_internal_set_steal_level(from._internal_steal_level());
  }
  if (from._internal_mood_state() != 0) {
    _this->_internal_set_mood_state(from._internal_mood_state());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = from._internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    _this->_internal_set_attack_speed(from._internal_attack_speed());
  }
  if (from._internal_portrait_id() != 0) {
    _this->_internal_set_portrait_id(from._internal_portrait_id());
  }
  if (from._internal_model_id() != 0) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_mount_id() != 0) {
    _this->_internal_set_mount_id(from._internal_mount_id());
  }
  if (from._internal_country_title_type() != 0) {
    _this->_internal_set_country_title_type(from._internal_country_title_type());
  }
  if (from._internal_guild_title_type() != 0) {
    _this->_internal_set_guild_title_type(from._internal_guild_title_type());
  }
  if (from._internal_stall_is_open() != 0) {
    _this->_internal_set_stall_is_open(from._internal_stall_is_open());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_pk_value() != 0) {
    _this->_internal_set_pk_value(from._internal_pk_value());
  }
  if (from._internal_generation() != 0) {
    _this->_internal_set_generation(from._internal_generation());
  }
  if (from._internal_world_id() != 0) {
    _this->_internal_set_world_id(from._internal_world_id());
  }
  if (from._internal_inherence_exp() != 0) {
    _this->_internal_set_inherence_exp(from._internal_inherence_exp());
  }
  if (from._internal_inherence_level() != 0) {
    _this->_internal_set_inherence_level(from._internal_inherence_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerHumanBaseAttrib::CopyFrom(const ServerHumanBaseAttrib& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerHumanBaseAttrib)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHumanBaseAttrib::IsInitialized() const {
  return true;
}

void ServerHumanBaseAttrib::InternalSwap(ServerHumanBaseAttrib* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_title_, lhs_arena,
      &other->_impl_.country_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_title_, lhs_arena,
      &other->_impl_.guild_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.normal_title_, lhs_arena,
      &other->_impl_.normal_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerHumanBaseAttrib, _impl_.inherence_level_)
      + sizeof(ServerHumanBaseAttrib::_impl_.inherence_level_)
      - PROTOBUF_FIELD_OFFSET(ServerHumanBaseAttrib, _impl_.flags_)>(
          reinterpret_cast<char*>(&_impl_.flags_),
          reinterpret_cast<char*>(&other->_impl_.flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerHumanBaseAttrib::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[6]);
}

// ===================================================================

class ServerMsgCharImpactListUpdate::_Internal {
 public:
};

void ServerMsgCharImpactListUpdate::clear_a_impact() {
  _impl_.a_impact_.Clear();
}
ServerMsgCharImpactListUpdate::ServerMsgCharImpactListUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgCharImpactListUpdate)
}
ServerMsgCharImpactListUpdate::ServerMsgCharImpactListUpdate(const ServerMsgCharImpactListUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgCharImpactListUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a_impact_){from._impl_.a_impact_}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.impact_count_){}
    , decltype(_impl_.last_sn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.owner_id_, &from._impl_.owner_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_sn_) -
    reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.last_sn_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgCharImpactListUpdate)
}

inline void ServerMsgCharImpactListUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a_impact_){arena}
    , decltype(_impl_.owner_id_){0}
    , decltype(_impl_.scene_id_){0}
    , decltype(_impl_.impact_count_){0}
    , decltype(_impl_.last_sn_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgCharImpactListUpdate::~ServerMsgCharImpactListUpdate() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgCharImpactListUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgCharImpactListUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.a_impact_.~RepeatedPtrField();
}

void ServerMsgCharImpactListUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgCharImpactListUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgCharImpactListUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a_impact_.Clear();
  ::memset(&_impl_.owner_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_sn_) -
      reinterpret_cast<char*>(&_impl_.owner_id_)) + sizeof(_impl_.last_sn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgCharImpactListUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 owner_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 impact_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.impact_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_sn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.ImpactStruct a_impact = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_impact(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgCharImpactListUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgCharImpactListUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_owner_id(), target);
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // int32 impact_count = 3;
  if (this->_internal_impact_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_impact_count(), target);
  }

  // uint32 last_sn = 4;
  if (this->_internal_last_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_sn(), target);
  }

  // repeated .base.ImpactStruct a_impact = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_a_impact_size()); i < n; i++) {
    const auto& repfield = this->_internal_a_impact(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgCharImpactListUpdate)
  return target;
}

size_t ServerMsgCharImpactListUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgCharImpactListUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.ImpactStruct a_impact = 5;
  total_size += 1UL * this->_internal_a_impact_size();
  for (const auto& msg : this->_impl_.a_impact_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 owner_id = 1;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_owner_id());
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  // int32 impact_count = 3;
  if (this->_internal_impact_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_impact_count());
  }

  // uint32 last_sn = 4;
  if (this->_internal_last_sn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_sn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgCharImpactListUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgCharImpactListUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgCharImpactListUpdate::GetClassData() const { return &_class_data_; }


void ServerMsgCharImpactListUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgCharImpactListUpdate*>(&to_msg);
  auto& from = static_cast<const ServerMsgCharImpactListUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgCharImpactListUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.a_impact_.MergeFrom(from._impl_.a_impact_);
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_impact_count() != 0) {
    _this->_internal_set_impact_count(from._internal_impact_count());
  }
  if (from._internal_last_sn() != 0) {
    _this->_internal_set_last_sn(from._internal_last_sn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgCharImpactListUpdate::CopyFrom(const ServerMsgCharImpactListUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgCharImpactListUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgCharImpactListUpdate::IsInitialized() const {
  return true;
}

void ServerMsgCharImpactListUpdate::InternalSwap(ServerMsgCharImpactListUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.a_impact_.InternalSwap(&other->_impl_.a_impact_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgCharImpactListUpdate, _impl_.last_sn_)
      + sizeof(ServerMsgCharImpactListUpdate::_impl_.last_sn_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgCharImpactListUpdate, _impl_.owner_id_)>(
          reinterpret_cast<char*>(&_impl_.owner_id_),
          reinterpret_cast<char*>(&other->_impl_.owner_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgCharImpactListUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[7]);
}

// ===================================================================

class ServerMsgCharMove::_Internal {
 public:
  using HasBits = decltype(std::declval<ServerMsgCharMove>()._impl_._has_bits_);
  static const ::base::GLPos& target_pos(const ServerMsgCharMove* msg);
  static void set_has_target_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::base::GLPos& stop_pos(const ServerMsgCharMove* msg);
  static void set_has_stop_pos(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::base::GLPos&
ServerMsgCharMove::_Internal::target_pos(const ServerMsgCharMove* msg) {
  return *msg->_impl_.target_pos_;
}
const ::base::GLPos&
ServerMsgCharMove::_Internal::stop_pos(const ServerMsgCharMove* msg) {
  return *msg->_impl_.stop_pos_;
}
void ServerMsgCharMove::clear_a_impact() {
  _impl_.a_impact_.Clear();
}
void ServerMsgCharMove::clear_target_pos() {
  if (_impl_.target_pos_ != nullptr) _impl_.target_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void ServerMsgCharMove::clear_stop_pos() {
  if (_impl_.stop_pos_ != nullptr) _impl_.stop_pos_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
ServerMsgCharMove::ServerMsgCharMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgCharMove)
}
ServerMsgCharMove::ServerMsgCharMove(const ServerMsgCharMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgCharMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a_impact_){from._impl_.a_impact_}
    , decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.stop_pos_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.handle_id_){}
    , decltype(_impl_.impact_count_){}
    , decltype(_impl_.last_sn_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target_pos()) {
    _this->_impl_.target_pos_ = new ::base::GLPos(*from._impl_.target_pos_);
  }
  if (from._internal_has_stop_pos()) {
    _this->_impl_.stop_pos_ = new ::base::GLPos(*from._impl_.stop_pos_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.last_sn_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.last_sn_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgCharMove)
}

inline void ServerMsgCharMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.a_impact_){arena}
    , decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.stop_pos_){nullptr}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.handle_id_){0}
    , decltype(_impl_.impact_count_){0}
    , decltype(_impl_.last_sn_){0u}
  };
}

ServerMsgCharMove::~ServerMsgCharMove() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgCharMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgCharMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.a_impact_.~RepeatedPtrField();
  if (this != internal_default_instance()) delete _impl_.target_pos_;
  if (this != internal_default_instance()) delete _impl_.stop_pos_;
}

void ServerMsgCharMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgCharMove::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgCharMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a_impact_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.target_pos_ != nullptr);
      _impl_.target_pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.stop_pos_ != nullptr);
      _impl_.stop_pos_->Clear();
    }
  }
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.last_sn_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.last_sn_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgCharMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 handle_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.handle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 impact_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.impact_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 last_sn = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.last_sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.ImpactStruct a_impact = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a_impact(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // optional .base.GLPos target_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .base.GLPos stop_pos = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_stop_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgCharMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgCharMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 handle_id = 2;
  if (this->_internal_handle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_handle_id(), target);
  }

  // int32 impact_count = 3;
  if (this->_internal_impact_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_impact_count(), target);
  }

  // uint32 last_sn = 4;
  if (this->_internal_last_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_last_sn(), target);
  }

  // repeated .base.ImpactStruct a_impact = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_a_impact_size()); i < n; i++) {
    const auto& repfield = this->_internal_a_impact(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional .base.GLPos target_pos = 6;
  if (_internal_has_target_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::target_pos(this),
        _Internal::target_pos(this).GetCachedSize(), target, stream);
  }

  // optional .base.GLPos stop_pos = 7;
  if (_internal_has_stop_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::stop_pos(this),
        _Internal::stop_pos(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgCharMove)
  return target;
}

size_t ServerMsgCharMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgCharMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.ImpactStruct a_impact = 5;
  total_size += 1UL * this->_internal_a_impact_size();
  for (const auto& msg : this->_impl_.a_impact_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .base.GLPos target_pos = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_pos_);
    }

    // optional .base.GLPos stop_pos = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.stop_pos_);
    }

  }
  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 handle_id = 2;
  if (this->_internal_handle_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle_id());
  }

  // int32 impact_count = 3;
  if (this->_internal_impact_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_impact_count());
  }

  // uint32 last_sn = 4;
  if (this->_internal_last_sn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_last_sn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgCharMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgCharMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgCharMove::GetClassData() const { return &_class_data_; }


void ServerMsgCharMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgCharMove*>(&to_msg);
  auto& from = static_cast<const ServerMsgCharMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgCharMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.a_impact_.MergeFrom(from._impl_.a_impact_);
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target_pos()->::base::GLPos::MergeFrom(
          from._internal_target_pos());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_stop_pos()->::base::GLPos::MergeFrom(
          from._internal_stop_pos());
    }
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_handle_id() != 0) {
    _this->_internal_set_handle_id(from._internal_handle_id());
  }
  if (from._internal_impact_count() != 0) {
    _this->_internal_set_impact_count(from._internal_impact_count());
  }
  if (from._internal_last_sn() != 0) {
    _this->_internal_set_last_sn(from._internal_last_sn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgCharMove::CopyFrom(const ServerMsgCharMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgCharMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgCharMove::IsInitialized() const {
  return true;
}

void ServerMsgCharMove::InternalSwap(ServerMsgCharMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.a_impact_.InternalSwap(&other->_impl_.a_impact_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgCharMove, _impl_.last_sn_)
      + sizeof(ServerMsgCharMove::_impl_.last_sn_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgCharMove, _impl_.target_pos_)>(
          reinterpret_cast<char*>(&_impl_.target_pos_),
          reinterpret_cast<char*>(&other->_impl_.target_pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgCharMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[8]);
}

// ===================================================================

class ServerMsgCharSkillGather::_Internal {
 public:
  static const ::base::GLPos& user_position(const ServerMsgCharSkillGather* msg);
  static const ::base::GLPos& target_pos(const ServerMsgCharSkillGather* msg);
};

const ::base::GLPos&
ServerMsgCharSkillGather::_Internal::user_position(const ServerMsgCharSkillGather* msg) {
  return *msg->_impl_.user_position_;
}
const ::base::GLPos&
ServerMsgCharSkillGather::_Internal::target_pos(const ServerMsgCharSkillGather* msg) {
  return *msg->_impl_.target_pos_;
}
void ServerMsgCharSkillGather::clear_user_position() {
  if (GetArenaForAllocation() == nullptr && _impl_.user_position_ != nullptr) {
    delete _impl_.user_position_;
  }
  _impl_.user_position_ = nullptr;
}
void ServerMsgCharSkillGather::clear_target_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.target_pos_ != nullptr) {
    delete _impl_.target_pos_;
  }
  _impl_.target_pos_ = nullptr;
}
ServerMsgCharSkillGather::ServerMsgCharSkillGather(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgCharSkillGather)
}
ServerMsgCharSkillGather::ServerMsgCharSkillGather(const ServerMsgCharSkillGather& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgCharSkillGather* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.user_position_){nullptr}
    , decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.logic_count_){}
    , decltype(_impl_.skill_data_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.total_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_position()) {
    _this->_impl_.user_position_ = new ::base::GLPos(*from._impl_.user_position_);
  }
  if (from._internal_has_target_pos()) {
    _this->_impl_.target_pos_ = new ::base::GLPos(*from._impl_.target_pos_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_time_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.total_time_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgCharSkillGather)
}

inline void ServerMsgCharSkillGather::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.user_position_){nullptr}
    , decltype(_impl_.target_pos_){nullptr}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.logic_count_){0}
    , decltype(_impl_.skill_data_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.total_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgCharSkillGather::~ServerMsgCharSkillGather() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgCharSkillGather)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgCharSkillGather::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.user_position_;
  if (this != internal_default_instance()) delete _impl_.target_pos_;
}

void ServerMsgCharSkillGather::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgCharSkillGather::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgCharSkillGather)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.user_position_ != nullptr) {
    delete _impl_.user_position_;
  }
  _impl_.user_position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.target_pos_ != nullptr) {
    delete _impl_.target_pos_;
  }
  _impl_.target_pos_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_time_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.total_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgCharSkillGather::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logic_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.logic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_data_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.skill_data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.GLPos user_position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.GLPos target_pos = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 total_time = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.total_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgCharSkillGather::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgCharSkillGather)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 logic_count = 2;
  if (this->_internal_logic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_logic_count(), target);
  }

  // int32 skill_data_id = 3;
  if (this->_internal_skill_data_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_skill_data_id(), target);
  }

  // .base.GLPos user_position = 4;
  if (this->_internal_has_user_position()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::user_position(this),
        _Internal::user_position(this).GetCachedSize(), target, stream);
  }

  // int32 target_id = 5;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_target_id(), target);
  }

  // .base.GLPos target_pos = 6;
  if (this->_internal_has_target_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::target_pos(this),
        _Internal::target_pos(this).GetCachedSize(), target, stream);
  }

  // float dir = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_dir(), target);
  }

  // int32 total_time = 8;
  if (this->_internal_total_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_total_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgCharSkillGather)
  return target;
}

size_t ServerMsgCharSkillGather::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgCharSkillGather)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.GLPos user_position = 4;
  if (this->_internal_has_user_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.user_position_);
  }

  // .base.GLPos target_pos = 6;
  if (this->_internal_has_target_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.target_pos_);
  }

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 logic_count = 2;
  if (this->_internal_logic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logic_count());
  }

  // int32 skill_data_id = 3;
  if (this->_internal_skill_data_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_data_id());
  }

  // int32 target_id = 5;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // float dir = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    total_size += 1 + 4;
  }

  // int32 total_time = 8;
  if (this->_internal_total_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgCharSkillGather::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgCharSkillGather::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgCharSkillGather::GetClassData() const { return &_class_data_; }


void ServerMsgCharSkillGather::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgCharSkillGather*>(&to_msg);
  auto& from = static_cast<const ServerMsgCharSkillGather&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgCharSkillGather)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_position()) {
    _this->_internal_mutable_user_position()->::base::GLPos::MergeFrom(
        from._internal_user_position());
  }
  if (from._internal_has_target_pos()) {
    _this->_internal_mutable_target_pos()->::base::GLPos::MergeFrom(
        from._internal_target_pos());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_logic_count() != 0) {
    _this->_internal_set_logic_count(from._internal_logic_count());
  }
  if (from._internal_skill_data_id() != 0) {
    _this->_internal_set_skill_data_id(from._internal_skill_data_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = from._internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_total_time() != 0) {
    _this->_internal_set_total_time(from._internal_total_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgCharSkillGather::CopyFrom(const ServerMsgCharSkillGather& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgCharSkillGather)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgCharSkillGather::IsInitialized() const {
  return true;
}

void ServerMsgCharSkillGather::InternalSwap(ServerMsgCharSkillGather* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgCharSkillGather, _impl_.total_time_)
      + sizeof(ServerMsgCharSkillGather::_impl_.total_time_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgCharSkillGather, _impl_.user_position_)>(
          reinterpret_cast<char*>(&_impl_.user_position_),
          reinterpret_cast<char*>(&other->_impl_.user_position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgCharSkillGather::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[9]);
}

// ===================================================================

class ServerMsgCharStopAction::_Internal {
 public:
};

ServerMsgCharStopAction::ServerMsgCharStopAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgCharStopAction)
}
ServerMsgCharStopAction::ServerMsgCharStopAction(const ServerMsgCharStopAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgCharStopAction* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.logic_count_){}
    , decltype(_impl_.stop_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.stop_time_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.stop_time_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgCharStopAction)
}

inline void ServerMsgCharStopAction::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.logic_count_){0}
    , decltype(_impl_.stop_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgCharStopAction::~ServerMsgCharStopAction() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgCharStopAction)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgCharStopAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgCharStopAction::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgCharStopAction::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgCharStopAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.stop_time_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.stop_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgCharStopAction::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logic_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.logic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stop_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.stop_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgCharStopAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgCharStopAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 logic_count = 2;
  if (this->_internal_logic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_logic_count(), target);
  }

  // int32 stop_time = 3;
  if (this->_internal_stop_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_stop_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgCharStopAction)
  return target;
}

size_t ServerMsgCharStopAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgCharStopAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 logic_count = 2;
  if (this->_internal_logic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logic_count());
  }

  // int32 stop_time = 3;
  if (this->_internal_stop_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgCharStopAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgCharStopAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgCharStopAction::GetClassData() const { return &_class_data_; }


void ServerMsgCharStopAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgCharStopAction*>(&to_msg);
  auto& from = static_cast<const ServerMsgCharStopAction&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgCharStopAction)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_logic_count() != 0) {
    _this->_internal_set_logic_count(from._internal_logic_count());
  }
  if (from._internal_stop_time() != 0) {
    _this->_internal_set_stop_time(from._internal_stop_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgCharStopAction::CopyFrom(const ServerMsgCharStopAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgCharStopAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgCharStopAction::IsInitialized() const {
  return true;
}

void ServerMsgCharStopAction::InternalSwap(ServerMsgCharStopAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgCharStopAction, _impl_.stop_time_)
      + sizeof(ServerMsgCharStopAction::_impl_.stop_time_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgCharStopAction, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgCharStopAction::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[10]);
}

// ===================================================================

class ServerMsgChat::_Internal {
 public:
};

ServerMsgChat::ServerMsgChat(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgChat)
}
ServerMsgChat::ServerMsgChat(const ServerMsgChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgChat* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_content_){}
    , decltype(_impl_.chat_type_){}
    , decltype(_impl_.show_position_){}
    , decltype(_impl_.cycle_count_){}
    , decltype(_impl_.animate_image_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.chat_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chat_content().empty()) {
    _this->_impl_.chat_content_.Set(from._internal_chat_content(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.chat_type_, &from._impl_.chat_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.animate_image_) -
    reinterpret_cast<char*>(&_impl_.chat_type_)) + sizeof(_impl_.animate_image_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgChat)
}

inline void ServerMsgChat::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.chat_content_){}
    , decltype(_impl_.chat_type_){0}
    , decltype(_impl_.show_position_){0}
    , decltype(_impl_.cycle_count_){0}
    , decltype(_impl_.animate_image_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.chat_content_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.chat_content_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMsgChat::~ServerMsgChat() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgChat)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.chat_content_.Destroy();
}

void ServerMsgChat::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgChat::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgChat)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.chat_content_.ClearToEmpty();
  ::memset(&_impl_.chat_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.animate_image_) -
      reinterpret_cast<char*>(&_impl_.chat_type_)) + sizeof(_impl_.animate_image_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgChat::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 chat_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.chat_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chat_content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chat_content();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgChat.chat_content"));
        } else
          goto handle_unusual;
        continue;
      // int32 show_position = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.show_position_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cycle_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.cycle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 animate_image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.animate_image_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgChat::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgChat)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chat_type = 1;
  if (this->_internal_chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_chat_type(), target);
  }

  // string chat_content = 2;
  if (!this->_internal_chat_content().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chat_content().data(), static_cast<int>(this->_internal_chat_content().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgChat.chat_content");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chat_content(), target);
  }

  // int32 show_position = 3;
  if (this->_internal_show_position() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_show_position(), target);
  }

  // int32 cycle_count = 4;
  if (this->_internal_cycle_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_cycle_count(), target);
  }

  // int32 animate_image = 5;
  if (this->_internal_animate_image() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_animate_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgChat)
  return target;
}

size_t ServerMsgChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgChat)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string chat_content = 2;
  if (!this->_internal_chat_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chat_content());
  }

  // int32 chat_type = 1;
  if (this->_internal_chat_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_chat_type());
  }

  // int32 show_position = 3;
  if (this->_internal_show_position() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_show_position());
  }

  // int32 cycle_count = 4;
  if (this->_internal_cycle_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cycle_count());
  }

  // int32 animate_image = 5;
  if (this->_internal_animate_image() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_animate_image());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgChat::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgChat::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgChat::GetClassData() const { return &_class_data_; }


void ServerMsgChat::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgChat*>(&to_msg);
  auto& from = static_cast<const ServerMsgChat&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgChat)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_chat_content().empty()) {
    _this->_internal_set_chat_content(from._internal_chat_content());
  }
  if (from._internal_chat_type() != 0) {
    _this->_internal_set_chat_type(from._internal_chat_type());
  }
  if (from._internal_show_position() != 0) {
    _this->_internal_set_show_position(from._internal_show_position());
  }
  if (from._internal_cycle_count() != 0) {
    _this->_internal_set_cycle_count(from._internal_cycle_count());
  }
  if (from._internal_animate_image() != 0) {
    _this->_internal_set_animate_image(from._internal_animate_image());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgChat::CopyFrom(const ServerMsgChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgChat::IsInitialized() const {
  return true;
}

void ServerMsgChat::InternalSwap(ServerMsgChat* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.chat_content_, lhs_arena,
      &other->_impl_.chat_content_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgChat, _impl_.animate_image_)
      + sizeof(ServerMsgChat::_impl_.animate_image_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgChat, _impl_.chat_type_)>(
          reinterpret_cast<char*>(&_impl_.chat_type_),
          reinterpret_cast<char*>(&other->_impl_.chat_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgChat::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[11]);
}

// ===================================================================

class ServerMsgCommand::_Internal {
 public:
  static const ::base::SXParam& sx_param(const ServerMsgCommand* msg);
};

const ::base::SXParam&
ServerMsgCommand::_Internal::sx_param(const ServerMsgCommand* msg) {
  return *msg->_impl_.sx_param_;
}
void ServerMsgCommand::clear_sx_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.sx_param_ != nullptr) {
    delete _impl_.sx_param_;
  }
  _impl_.sx_param_ = nullptr;
}
ServerMsgCommand::ServerMsgCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgCommand)
}
ServerMsgCommand::ServerMsgCommand(const ServerMsgCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sx_param_){nullptr}
    , decltype(_impl_.ui_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sx_param()) {
    _this->_impl_.sx_param_ = new ::base::SXParam(*from._impl_.sx_param_);
  }
  _this->_impl_.ui_index_ = from._impl_.ui_index_;
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgCommand)
}

inline void ServerMsgCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sx_param_){nullptr}
    , decltype(_impl_.ui_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgCommand::~ServerMsgCommand() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.sx_param_;
}

void ServerMsgCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.sx_param_ != nullptr) {
    delete _impl_.sx_param_;
  }
  _impl_.sx_param_ = nullptr;
  _impl_.ui_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ui_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ui_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SXParam sx_param = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sx_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ui_index = 1;
  if (this->_internal_ui_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ui_index(), target);
  }

  // .base.SXParam sx_param = 2;
  if (this->_internal_has_sx_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sx_param(this),
        _Internal::sx_param(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgCommand)
  return target;
}

size_t ServerMsgCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.SXParam sx_param = 2;
  if (this->_internal_has_sx_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.sx_param_);
  }

  // int32 ui_index = 1;
  if (this->_internal_ui_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ui_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgCommand::GetClassData() const { return &_class_data_; }


void ServerMsgCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgCommand*>(&to_msg);
  auto& from = static_cast<const ServerMsgCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_sx_param()) {
    _this->_internal_mutable_sx_param()->::base::SXParam::MergeFrom(
        from._internal_sx_param());
  }
  if (from._internal_ui_index() != 0) {
    _this->_internal_set_ui_index(from._internal_ui_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgCommand::CopyFrom(const ServerMsgCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgCommand::IsInitialized() const {
  return true;
}

void ServerMsgCommand::InternalSwap(ServerMsgCommand* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgCommand, _impl_.ui_index_)
      + sizeof(ServerMsgCommand::_impl_.ui_index_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgCommand, _impl_.sx_param_)>(
          reinterpret_cast<char*>(&_impl_.sx_param_),
          reinterpret_cast<char*>(&other->_impl_.sx_param_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[12]);
}

// ===================================================================

class ServerMsgCooldownUpdate::_Internal {
 public:
};

ServerMsgCooldownUpdate::ServerMsgCooldownUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgCooldownUpdate)
}
ServerMsgCooldownUpdate::ServerMsgCooldownUpdate(const ServerMsgCooldownUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgCooldownUpdate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.scene_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scene_id_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.scene_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgCooldownUpdate)
}

inline void ServerMsgCooldownUpdate::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.scene_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgCooldownUpdate::~ServerMsgCooldownUpdate() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgCooldownUpdate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgCooldownUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgCooldownUpdate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgCooldownUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgCooldownUpdate)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scene_id_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgCooldownUpdate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgCooldownUpdate::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgCooldownUpdate)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgCooldownUpdate)
  return target;
}

size_t ServerMsgCooldownUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgCooldownUpdate)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgCooldownUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgCooldownUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgCooldownUpdate::GetClassData() const { return &_class_data_; }


void ServerMsgCooldownUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgCooldownUpdate*>(&to_msg);
  auto& from = static_cast<const ServerMsgCooldownUpdate&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgCooldownUpdate)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgCooldownUpdate::CopyFrom(const ServerMsgCooldownUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgCooldownUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgCooldownUpdate::IsInitialized() const {
  return true;
}

void ServerMsgCooldownUpdate::InternalSwap(ServerMsgCooldownUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgCooldownUpdate, _impl_.scene_id_)
      + sizeof(ServerMsgCooldownUpdate::_impl_.scene_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgCooldownUpdate, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgCooldownUpdate::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[13]);
}

// ===================================================================

class ServerMsgDelObject::_Internal {
 public:
};

ServerMsgDelObject::ServerMsgDelObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDelObject)
}
ServerMsgDelObject::ServerMsgDelObject(const ServerMsgDelObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDelObject* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.scene_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scene_id_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.scene_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDelObject)
}

inline void ServerMsgDelObject::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.scene_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgDelObject::~ServerMsgDelObject() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDelObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDelObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgDelObject::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDelObject::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDelObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scene_id_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDelObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDelObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDelObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDelObject)
  return target;
}

size_t ServerMsgDelObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDelObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDelObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDelObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDelObject::GetClassData() const { return &_class_data_; }


void ServerMsgDelObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDelObject*>(&to_msg);
  auto& from = static_cast<const ServerMsgDelObject&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDelObject)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDelObject::CopyFrom(const ServerMsgDelObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDelObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDelObject::IsInitialized() const {
  return true;
}

void ServerMsgDelObject::InternalSwap(ServerMsgDelObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgDelObject, _impl_.scene_id_)
      + sizeof(ServerMsgDelObject::_impl_.scene_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgDelObject, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDelObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[14]);
}

// ===================================================================

class ServerMsgDelQuest::_Internal {
 public:
};

ServerMsgDelQuest::ServerMsgDelQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDelQuest)
}
ServerMsgDelQuest::ServerMsgDelQuest(const ServerMsgDelQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDelQuest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.quest_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quest_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.quest_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDelQuest)
}

inline void ServerMsgDelQuest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.quest_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgDelQuest::~ServerMsgDelQuest() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDelQuest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDelQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgDelQuest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDelQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDelQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quest_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.quest_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDelQuest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quest_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDelQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDelQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 quest_id = 2;
  if (this->_internal_quest_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_quest_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDelQuest)
  return target;
}

size_t ServerMsgDelQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDelQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 quest_id = 2;
  if (this->_internal_quest_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quest_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDelQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDelQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDelQuest::GetClassData() const { return &_class_data_; }


void ServerMsgDelQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDelQuest*>(&to_msg);
  auto& from = static_cast<const ServerMsgDelQuest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDelQuest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_quest_id() != 0) {
    _this->_internal_set_quest_id(from._internal_quest_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDelQuest::CopyFrom(const ServerMsgDelQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDelQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDelQuest::IsInitialized() const {
  return true;
}

void ServerMsgDelQuest::InternalSwap(ServerMsgDelQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgDelQuest, _impl_.quest_id_)
      + sizeof(ServerMsgDelQuest::_impl_.quest_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgDelQuest, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDelQuest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[15]);
}

// ===================================================================

class ServerMsgDeltailOfHealsAndDamage::_Internal {
 public:
};

ServerMsgDeltailOfHealsAndDamage::ServerMsgDeltailOfHealsAndDamage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDeltailOfHealsAndDamage)
}
ServerMsgDeltailOfHealsAndDamage::ServerMsgDeltailOfHealsAndDamage(const ServerMsgDeltailOfHealsAndDamage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDeltailOfHealsAndDamage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.hp_modify_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.sender_logic_count_){}
    , decltype(_impl_.critical_hit_){}
    , decltype(_impl_.death_blow_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.hp_modify_, &from._impl_.hp_modify_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.death_blow_) -
    reinterpret_cast<char*>(&_impl_.hp_modify_)) + sizeof(_impl_.death_blow_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDeltailOfHealsAndDamage)
}

inline void ServerMsgDeltailOfHealsAndDamage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.hp_modify_){0}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.sender_logic_count_){0}
    , decltype(_impl_.critical_hit_){false}
    , decltype(_impl_.death_blow_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgDeltailOfHealsAndDamage::~ServerMsgDeltailOfHealsAndDamage() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDeltailOfHealsAndDamage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDeltailOfHealsAndDamage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgDeltailOfHealsAndDamage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDeltailOfHealsAndDamage::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDeltailOfHealsAndDamage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.hp_modify_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.death_blow_) -
      reinterpret_cast<char*>(&_impl_.hp_modify_)) + sizeof(_impl_.death_blow_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDeltailOfHealsAndDamage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 hp_modify = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.hp_modify_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sender_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sender_logic_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sender_logic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool critical_hit = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.critical_hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool death_blow = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.death_blow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDeltailOfHealsAndDamage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDeltailOfHealsAndDamage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 hp_modify = 1;
  if (this->_internal_hp_modify() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_hp_modify(), target);
  }

  // int32 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_object_id(), target);
  }

  // int32 sender_id = 3;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sender_id(), target);
  }

  // int32 sender_logic_count = 4;
  if (this->_internal_sender_logic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_sender_logic_count(), target);
  }

  // bool critical_hit = 5;
  if (this->_internal_critical_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_critical_hit(), target);
  }

  // bool death_blow = 6;
  if (this->_internal_death_blow() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_death_blow(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDeltailOfHealsAndDamage)
  return target;
}

size_t ServerMsgDeltailOfHealsAndDamage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDeltailOfHealsAndDamage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 hp_modify = 1;
  if (this->_internal_hp_modify() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp_modify());
  }

  // int32 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 sender_id = 3;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // int32 sender_logic_count = 4;
  if (this->_internal_sender_logic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_logic_count());
  }

  // bool critical_hit = 5;
  if (this->_internal_critical_hit() != 0) {
    total_size += 1 + 1;
  }

  // bool death_blow = 6;
  if (this->_internal_death_blow() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDeltailOfHealsAndDamage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDeltailOfHealsAndDamage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDeltailOfHealsAndDamage::GetClassData() const { return &_class_data_; }


void ServerMsgDeltailOfHealsAndDamage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDeltailOfHealsAndDamage*>(&to_msg);
  auto& from = static_cast<const ServerMsgDeltailOfHealsAndDamage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDeltailOfHealsAndDamage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_hp_modify() != 0) {
    _this->_internal_set_hp_modify(from._internal_hp_modify());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_sender_logic_count() != 0) {
    _this->_internal_set_sender_logic_count(from._internal_sender_logic_count());
  }
  if (from._internal_critical_hit() != 0) {
    _this->_internal_set_critical_hit(from._internal_critical_hit());
  }
  if (from._internal_death_blow() != 0) {
    _this->_internal_set_death_blow(from._internal_death_blow());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDeltailOfHealsAndDamage::CopyFrom(const ServerMsgDeltailOfHealsAndDamage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDeltailOfHealsAndDamage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDeltailOfHealsAndDamage::IsInitialized() const {
  return true;
}

void ServerMsgDeltailOfHealsAndDamage::InternalSwap(ServerMsgDeltailOfHealsAndDamage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgDeltailOfHealsAndDamage, _impl_.death_blow_)
      + sizeof(ServerMsgDeltailOfHealsAndDamage::_impl_.death_blow_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgDeltailOfHealsAndDamage, _impl_.hp_modify_)>(
          reinterpret_cast<char*>(&_impl_.hp_modify_),
          reinterpret_cast<char*>(&other->_impl_.hp_modify_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDeltailOfHealsAndDamage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[16]);
}

// ===================================================================

class ServerMsgDetailAbilityInfo::_Internal {
 public:
};

void ServerMsgDetailAbilityInfo::clear_abilitys() {
  _impl_.abilitys_.Clear();
}
ServerMsgDetailAbilityInfo::ServerMsgDetailAbilityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDetailAbilityInfo)
}
ServerMsgDetailAbilityInfo::ServerMsgDetailAbilityInfo(const ServerMsgDetailAbilityInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDetailAbilityInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ability_list_){from._impl_.ability_list_}
    , /*decltype(_impl_._ability_list_cached_byte_size_)*/{0}
    , decltype(_impl_.abilitys_){from._impl_.abilitys_}
    , decltype(_impl_.next_need_level_){from._impl_.next_need_level_}
    , /*decltype(_impl_._next_need_level_cached_byte_size_)*/{0}
    , decltype(_impl_.next_need_money_){from._impl_.next_need_money_}
    , /*decltype(_impl_._next_need_money_cached_byte_size_)*/{0}
    , decltype(_impl_.next_need_exp_){from._impl_.next_need_exp_}
    , /*decltype(_impl_._next_need_exp_cached_byte_size_)*/{0}
    , decltype(_impl_.prescr_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.ability_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.prescr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prescr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_prescr().empty()) {
    _this->_impl_.prescr_.Set(from._internal_prescr(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.ability_count_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.ability_count_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDetailAbilityInfo)
}

inline void ServerMsgDetailAbilityInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ability_list_){arena}
    , /*decltype(_impl_._ability_list_cached_byte_size_)*/{0}
    , decltype(_impl_.abilitys_){arena}
    , decltype(_impl_.next_need_level_){arena}
    , /*decltype(_impl_._next_need_level_cached_byte_size_)*/{0}
    , decltype(_impl_.next_need_money_){arena}
    , /*decltype(_impl_._next_need_money_cached_byte_size_)*/{0}
    , decltype(_impl_.next_need_exp_){arena}
    , /*decltype(_impl_._next_need_exp_cached_byte_size_)*/{0}
    , decltype(_impl_.prescr_){}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.scene_id_){0}
    , decltype(_impl_.ability_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.prescr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.prescr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMsgDetailAbilityInfo::~ServerMsgDetailAbilityInfo() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDetailAbilityInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDetailAbilityInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ability_list_.~RepeatedField();
  _impl_.abilitys_.~RepeatedPtrField();
  _impl_.next_need_level_.~RepeatedField();
  _impl_.next_need_money_.~RepeatedField();
  _impl_.next_need_exp_.~RepeatedField();
  _impl_.prescr_.Destroy();
}

void ServerMsgDetailAbilityInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDetailAbilityInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDetailAbilityInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ability_list_.Clear();
  _impl_.abilitys_.Clear();
  _impl_.next_need_level_.Clear();
  _impl_.next_need_money_.Clear();
  _impl_.next_need_exp_.Clear();
  _impl_.prescr_.ClearToEmpty();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.ability_count_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.ability_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDetailAbilityInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ability_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ability_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ability_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ability_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_ability_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.PlayerAbility abilitys = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_abilitys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string prescr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_prescr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgDetailAbilityInfo.prescr"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 next_need_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_next_need_level(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_next_need_level(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 next_need_money = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_next_need_money(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_next_need_money(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 next_need_exp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_next_need_exp(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          _internal_add_next_need_exp(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDetailAbilityInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDetailAbilityInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // int32 ability_count = 3;
  if (this->_internal_ability_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ability_count(), target);
  }

  // repeated int32 ability_list = 4;
  {
    int byte_size = _impl_._ability_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_ability_list(), byte_size, target);
    }
  }

  // repeated .base.PlayerAbility abilitys = 5;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_abilitys_size()); i < n; i++) {
    const auto& repfield = this->_internal_abilitys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(5, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string prescr = 6;
  if (!this->_internal_prescr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_prescr().data(), static_cast<int>(this->_internal_prescr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgDetailAbilityInfo.prescr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_prescr(), target);
  }

  // repeated int32 next_need_level = 7;
  {
    int byte_size = _impl_._next_need_level_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_next_need_level(), byte_size, target);
    }
  }

  // repeated int32 next_need_money = 8;
  {
    int byte_size = _impl_._next_need_money_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_next_need_money(), byte_size, target);
    }
  }

  // repeated int32 next_need_exp = 9;
  {
    int byte_size = _impl_._next_need_exp_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          9, _internal_next_need_exp(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDetailAbilityInfo)
  return target;
}

size_t ServerMsgDetailAbilityInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDetailAbilityInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 ability_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ability_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ability_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .base.PlayerAbility abilitys = 5;
  total_size += 1UL * this->_internal_abilitys_size();
  for (const auto& msg : this->_impl_.abilitys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 next_need_level = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.next_need_level_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._next_need_level_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 next_need_money = 8;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.next_need_money_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._next_need_money_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 next_need_exp = 9;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.next_need_exp_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._next_need_exp_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string prescr = 6;
  if (!this->_internal_prescr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_prescr());
  }

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  // int32 ability_count = 3;
  if (this->_internal_ability_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDetailAbilityInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDetailAbilityInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDetailAbilityInfo::GetClassData() const { return &_class_data_; }


void ServerMsgDetailAbilityInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDetailAbilityInfo*>(&to_msg);
  auto& from = static_cast<const ServerMsgDetailAbilityInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDetailAbilityInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.ability_list_.MergeFrom(from._impl_.ability_list_);
  _this->_impl_.abilitys_.MergeFrom(from._impl_.abilitys_);
  _this->_impl_.next_need_level_.MergeFrom(from._impl_.next_need_level_);
  _this->_impl_.next_need_money_.MergeFrom(from._impl_.next_need_money_);
  _this->_impl_.next_need_exp_.MergeFrom(from._impl_.next_need_exp_);
  if (!from._internal_prescr().empty()) {
    _this->_internal_set_prescr(from._internal_prescr());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_ability_count() != 0) {
    _this->_internal_set_ability_count(from._internal_ability_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDetailAbilityInfo::CopyFrom(const ServerMsgDetailAbilityInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDetailAbilityInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDetailAbilityInfo::IsInitialized() const {
  return true;
}

void ServerMsgDetailAbilityInfo::InternalSwap(ServerMsgDetailAbilityInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.ability_list_.InternalSwap(&other->_impl_.ability_list_);
  _impl_.abilitys_.InternalSwap(&other->_impl_.abilitys_);
  _impl_.next_need_level_.InternalSwap(&other->_impl_.next_need_level_);
  _impl_.next_need_money_.InternalSwap(&other->_impl_.next_need_money_);
  _impl_.next_need_exp_.InternalSwap(&other->_impl_.next_need_exp_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.prescr_, lhs_arena,
      &other->_impl_.prescr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgDetailAbilityInfo, _impl_.ability_count_)
      + sizeof(ServerMsgDetailAbilityInfo::_impl_.ability_count_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgDetailAbilityInfo, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDetailAbilityInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[17]);
}

// ===================================================================

class ServerMsgDetailAttrib::_Internal {
 public:
  static const ::base::Flag64& flags(const ServerMsgDetailAttrib* msg);
  static const ::base::SHorseGuid& horse_guid(const ServerMsgDetailAttrib* msg);
};

const ::base::Flag64&
ServerMsgDetailAttrib::_Internal::flags(const ServerMsgDetailAttrib* msg) {
  return *msg->_impl_.flags_;
}
const ::base::SHorseGuid&
ServerMsgDetailAttrib::_Internal::horse_guid(const ServerMsgDetailAttrib* msg) {
  return *msg->_impl_.horse_guid_;
}
void ServerMsgDetailAttrib::clear_skills() {
  _impl_.skills_.Clear();
}
void ServerMsgDetailAttrib::clear_flags() {
  if (GetArenaForAllocation() == nullptr && _impl_.flags_ != nullptr) {
    delete _impl_.flags_;
  }
  _impl_.flags_ = nullptr;
}
void ServerMsgDetailAttrib::clear_horse_guid() {
  if (GetArenaForAllocation() == nullptr && _impl_.horse_guid_ != nullptr) {
    delete _impl_.horse_guid_;
  }
  _impl_.horse_guid_ = nullptr;
}
ServerMsgDetailAttrib::ServerMsgDetailAttrib(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDetailAttrib)
}
ServerMsgDetailAttrib::ServerMsgDetailAttrib(const ServerMsgDetailAttrib& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDetailAttrib* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.flags_){nullptr}
    , decltype(_impl_.horse_guid_){nullptr}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.trade_index_){}
    , decltype(_impl_.data_id_){}
    , decltype(_impl_.ai_type_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.hp_max_){}
    , decltype(_impl_.horse_state_){}
    , decltype(_impl_.generation_){}
    , decltype(_impl_.happiness_){}
    , decltype(_impl_.attr_near_){}
    , decltype(_impl_.attr_far_){}
    , decltype(_impl_.attr_magic_){}
    , decltype(_impl_.def_near_){}
    , decltype(_impl_.def_far_){}
    , decltype(_impl_.def_magic_){}
    , decltype(_impl_.hit_){}
    , decltype(_impl_.miss_){}
    , decltype(_impl_.critical_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.mount_id_){}
    , decltype(_impl_.str_perception_){}
    , decltype(_impl_.con_perception_){}
    , decltype(_impl_.dex_perception_){}
    , decltype(_impl_.int_perception_){}
    , decltype(_impl_.str_perception_limit_){}
    , decltype(_impl_.con_perception_limit_){}
    , decltype(_impl_.dex_perception_limit_){}
    , decltype(_impl_.int_perception_limit_){}
    , decltype(_impl_.strength_){}
    , decltype(_impl_.con_){}
    , decltype(_impl_.dex_){}
    , decltype(_impl_.intelligence_){}
    , decltype(_impl_.grow_rate_){}
    , decltype(_impl_.remain_point_){}
    , decltype(_impl_.strength_point_){}
    , decltype(_impl_.smartness_point_){}
    , decltype(_impl_.mind_point_){}
    , decltype(_impl_.constitution_point_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.stall_order_){}
    , decltype(_impl_.pet_lock_){}
    , decltype(_impl_.unlock_time_){}
    , decltype(_impl_.current_horse_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra_data().empty()) {
    _this->_impl_.extra_data_.Set(from._internal_extra_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_flags()) {
    _this->_impl_.flags_ = new ::base::Flag64(*from._impl_.flags_);
  }
  if (from._internal_has_horse_guid()) {
    _this->_impl_.horse_guid_ = new ::base::SHorseGuid(*from._impl_.horse_guid_);
  }
  ::memcpy(&_impl_.map_id_, &from._impl_.map_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.current_horse_flag_) -
    reinterpret_cast<char*>(&_impl_.map_id_)) + sizeof(_impl_.current_horse_flag_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDetailAttrib)
}

inline void ServerMsgDetailAttrib::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){arena}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.flags_){nullptr}
    , decltype(_impl_.horse_guid_){nullptr}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.trade_index_){0}
    , decltype(_impl_.data_id_){0}
    , decltype(_impl_.ai_type_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.hp_max_){0}
    , decltype(_impl_.horse_state_){0}
    , decltype(_impl_.generation_){0}
    , decltype(_impl_.happiness_){0}
    , decltype(_impl_.attr_near_){0}
    , decltype(_impl_.attr_far_){0}
    , decltype(_impl_.attr_magic_){0}
    , decltype(_impl_.def_near_){0}
    , decltype(_impl_.def_far_){0}
    , decltype(_impl_.def_magic_){0}
    , decltype(_impl_.hit_){0}
    , decltype(_impl_.miss_){0}
    , decltype(_impl_.critical_){0}
    , decltype(_impl_.model_id_){0}
    , decltype(_impl_.mount_id_){0}
    , decltype(_impl_.str_perception_){0}
    , decltype(_impl_.con_perception_){0}
    , decltype(_impl_.dex_perception_){0}
    , decltype(_impl_.int_perception_){0}
    , decltype(_impl_.str_perception_limit_){0}
    , decltype(_impl_.con_perception_limit_){0}
    , decltype(_impl_.dex_perception_limit_){0}
    , decltype(_impl_.int_perception_limit_){0}
    , decltype(_impl_.strength_){0}
    , decltype(_impl_.con_){0}
    , decltype(_impl_.dex_){0}
    , decltype(_impl_.intelligence_){0}
    , decltype(_impl_.grow_rate_){0}
    , decltype(_impl_.remain_point_){0}
    , decltype(_impl_.strength_point_){0}
    , decltype(_impl_.smartness_point_){0}
    , decltype(_impl_.mind_point_){0}
    , decltype(_impl_.constitution_point_){0}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.stall_order_){0}
    , decltype(_impl_.pet_lock_){0}
    , decltype(_impl_.unlock_time_){0}
    , decltype(_impl_.current_horse_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMsgDetailAttrib::~ServerMsgDetailAttrib() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDetailAttrib)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDetailAttrib::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skills_.~RepeatedPtrField();
  _impl_.extra_data_.Destroy();
  _impl_.name_.Destroy();
  _impl_.nickname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.flags_;
  if (this != internal_default_instance()) delete _impl_.horse_guid_;
}

void ServerMsgDetailAttrib::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDetailAttrib::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDetailAttrib)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skills_.Clear();
  _impl_.extra_data_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.flags_ != nullptr) {
    delete _impl_.flags_;
  }
  _impl_.flags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.horse_guid_ != nullptr) {
    delete _impl_.horse_guid_;
  }
  _impl_.horse_guid_ = nullptr;
  ::memset(&_impl_.map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.current_horse_flag_) -
      reinterpret_cast<char*>(&_impl_.map_id_)) + sizeof(_impl_.current_horse_flag_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDetailAttrib::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .base.HorseSkill skills = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string extra_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgDetailAttrib.extra_data"));
        } else
          goto handle_unusual;
        continue;
      // .base.Flag64 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SHorseGuid horse_guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_horse_guid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 trade_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.trade_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgDetailAttrib.name"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgDetailAttrib.nickname"));
        } else
          goto handle_unusual;
        continue;
      // int32 ai_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ai_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp_max = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.hp_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 horse_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.horse_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 generation = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 happiness = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.happiness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attr_near = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.attr_near_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attr_far = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.attr_far_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attr_magic = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.attr_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 def_near = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.def_near_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 def_far = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.def_far_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 def_magic = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.def_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hit = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 miss = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 critical = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 model_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mount_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.mount_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 str_perception = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.str_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 con_perception = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.con_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dex_perception = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.dex_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int_perception = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.int_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 str_perception_limit = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.str_perception_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 con_perception_limit = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.con_perception_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dex_perception_limit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dex_perception_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int_perception_limit = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.int_perception_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 strength = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 con = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.con_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dex = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 intelligence = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.intelligence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grow_rate = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.grow_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 remain_point = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.remain_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 strength_point = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.strength_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 smartness_point = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.smartness_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mind_point = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.mind_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 constitution_point = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.constitution_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stall_order = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.stall_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pet_lock = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.pet_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unlock_time = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.unlock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool current_horse_flag = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.current_horse_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDetailAttrib::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDetailAttrib)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .base.HorseSkill skills = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string extra_data = 2;
  if (!this->_internal_extra_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra_data().data(), static_cast<int>(this->_internal_extra_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgDetailAttrib.extra_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extra_data(), target);
  }

  // .base.Flag64 flags = 3;
  if (this->_internal_has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::flags(this),
        _Internal::flags(this).GetCachedSize(), target, stream);
  }

  // int32 map_id = 4;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_map_id(), target);
  }

  // .base.SHorseGuid horse_guid = 5;
  if (this->_internal_has_horse_guid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::horse_guid(this),
        _Internal::horse_guid(this).GetCachedSize(), target, stream);
  }

  // int32 trade_index = 6;
  if (this->_internal_trade_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_trade_index(), target);
  }

  // int32 data_id = 7;
  if (this->_internal_data_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_data_id(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgDetailAttrib.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // string nickname = 9;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgDetailAttrib.nickname");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nickname(), target);
  }

  // int32 ai_type = 10;
  if (this->_internal_ai_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_ai_type(), target);
  }

  // int32 level = 11;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_level(), target);
  }

  // int32 exp = 12;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_exp(), target);
  }

  // int32 hp = 13;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_hp(), target);
  }

  // int32 hp_max = 14;
  if (this->_internal_hp_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_hp_max(), target);
  }

  // int32 horse_state = 15;
  if (this->_internal_horse_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_horse_state(), target);
  }

  // int32 generation = 16;
  if (this->_internal_generation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_generation(), target);
  }

  // int32 happiness = 17;
  if (this->_internal_happiness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_happiness(), target);
  }

  // int32 attr_near = 18;
  if (this->_internal_attr_near() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_attr_near(), target);
  }

  // int32 attr_far = 19;
  if (this->_internal_attr_far() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_attr_far(), target);
  }

  // int32 attr_magic = 20;
  if (this->_internal_attr_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_attr_magic(), target);
  }

  // int32 def_near = 21;
  if (this->_internal_def_near() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_def_near(), target);
  }

  // int32 def_far = 22;
  if (this->_internal_def_far() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_def_far(), target);
  }

  // int32 def_magic = 23;
  if (this->_internal_def_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_def_magic(), target);
  }

  // int32 hit = 24;
  if (this->_internal_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_hit(), target);
  }

  // int32 miss = 25;
  if (this->_internal_miss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_miss(), target);
  }

  // int32 critical = 26;
  if (this->_internal_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_critical(), target);
  }

  // int32 model_id = 27;
  if (this->_internal_model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_model_id(), target);
  }

  // int32 mount_id = 28;
  if (this->_internal_mount_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_mount_id(), target);
  }

  // int32 str_perception = 29;
  if (this->_internal_str_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_str_perception(), target);
  }

  // int32 con_perception = 30;
  if (this->_internal_con_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_con_perception(), target);
  }

  // int32 dex_perception = 31;
  if (this->_internal_dex_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_dex_perception(), target);
  }

  // int32 int_perception = 32;
  if (this->_internal_int_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_int_perception(), target);
  }

  // int32 str_perception_limit = 33;
  if (this->_internal_str_perception_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_str_perception_limit(), target);
  }

  // int32 con_perception_limit = 34;
  if (this->_internal_con_perception_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_con_perception_limit(), target);
  }

  // int32 dex_perception_limit = 35;
  if (this->_internal_dex_perception_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_dex_perception_limit(), target);
  }

  // int32 int_perception_limit = 36;
  if (this->_internal_int_perception_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_int_perception_limit(), target);
  }

  // int32 strength = 37;
  if (this->_internal_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_strength(), target);
  }

  // int32 con = 38;
  if (this->_internal_con() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_con(), target);
  }

  // int32 dex = 39;
  if (this->_internal_dex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_dex(), target);
  }

  // int32 intelligence = 40;
  if (this->_internal_intelligence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_intelligence(), target);
  }

  // int32 grow_rate = 41;
  if (this->_internal_grow_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_grow_rate(), target);
  }

  // int32 remain_point = 42;
  if (this->_internal_remain_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(42, this->_internal_remain_point(), target);
  }

  // int32 strength_point = 43;
  if (this->_internal_strength_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(43, this->_internal_strength_point(), target);
  }

  // int32 smartness_point = 44;
  if (this->_internal_smartness_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(44, this->_internal_smartness_point(), target);
  }

  // int32 mind_point = 45;
  if (this->_internal_mind_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(45, this->_internal_mind_point(), target);
  }

  // int32 constitution_point = 46;
  if (this->_internal_constitution_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_constitution_point(), target);
  }

  // int32 index = 47;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_index(), target);
  }

  // int32 stall_order = 48;
  if (this->_internal_stall_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_stall_order(), target);
  }

  // int32 pet_lock = 49;
  if (this->_internal_pet_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(49, this->_internal_pet_lock(), target);
  }

  // int32 unlock_time = 50;
  if (this->_internal_unlock_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_unlock_time(), target);
  }

  // bool current_horse_flag = 51;
  if (this->_internal_current_horse_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(51, this->_internal_current_horse_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDetailAttrib)
  return target;
}

size_t ServerMsgDetailAttrib::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDetailAttrib)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.HorseSkill skills = 1;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string extra_data = 2;
  if (!this->_internal_extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra_data());
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string nickname = 9;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // .base.Flag64 flags = 3;
  if (this->_internal_has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flags_);
  }

  // .base.SHorseGuid horse_guid = 5;
  if (this->_internal_has_horse_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.horse_guid_);
  }

  // int32 map_id = 4;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 trade_index = 6;
  if (this->_internal_trade_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trade_index());
  }

  // int32 data_id = 7;
  if (this->_internal_data_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_id());
  }

  // int32 ai_type = 10;
  if (this->_internal_ai_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ai_type());
  }

  // int32 level = 11;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 exp = 12;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  // int32 hp = 13;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 hp_max = 14;
  if (this->_internal_hp_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp_max());
  }

  // int32 horse_state = 15;
  if (this->_internal_horse_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_horse_state());
  }

  // int32 generation = 16;
  if (this->_internal_generation() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_generation());
  }

  // int32 happiness = 17;
  if (this->_internal_happiness() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_happiness());
  }

  // int32 attr_near = 18;
  if (this->_internal_attr_near() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_attr_near());
  }

  // int32 attr_far = 19;
  if (this->_internal_attr_far() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_attr_far());
  }

  // int32 attr_magic = 20;
  if (this->_internal_attr_magic() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_attr_magic());
  }

  // int32 def_near = 21;
  if (this->_internal_def_near() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_def_near());
  }

  // int32 def_far = 22;
  if (this->_internal_def_far() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_def_far());
  }

  // int32 def_magic = 23;
  if (this->_internal_def_magic() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_def_magic());
  }

  // int32 hit = 24;
  if (this->_internal_hit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hit());
  }

  // int32 miss = 25;
  if (this->_internal_miss() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_miss());
  }

  // int32 critical = 26;
  if (this->_internal_critical() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_critical());
  }

  // int32 model_id = 27;
  if (this->_internal_model_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  // int32 mount_id = 28;
  if (this->_internal_mount_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mount_id());
  }

  // int32 str_perception = 29;
  if (this->_internal_str_perception() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_str_perception());
  }

  // int32 con_perception = 30;
  if (this->_internal_con_perception() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_con_perception());
  }

  // int32 dex_perception = 31;
  if (this->_internal_dex_perception() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dex_perception());
  }

  // int32 int_perception = 32;
  if (this->_internal_int_perception() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_int_perception());
  }

  // int32 str_perception_limit = 33;
  if (this->_internal_str_perception_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_str_perception_limit());
  }

  // int32 con_perception_limit = 34;
  if (this->_internal_con_perception_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_con_perception_limit());
  }

  // int32 dex_perception_limit = 35;
  if (this->_internal_dex_perception_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dex_perception_limit());
  }

  // int32 int_perception_limit = 36;
  if (this->_internal_int_perception_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_int_perception_limit());
  }

  // int32 strength = 37;
  if (this->_internal_strength() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_strength());
  }

  // int32 con = 38;
  if (this->_internal_con() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_con());
  }

  // int32 dex = 39;
  if (this->_internal_dex() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dex());
  }

  // int32 intelligence = 40;
  if (this->_internal_intelligence() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_intelligence());
  }

  // int32 grow_rate = 41;
  if (this->_internal_grow_rate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_grow_rate());
  }

  // int32 remain_point = 42;
  if (this->_internal_remain_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_remain_point());
  }

  // int32 strength_point = 43;
  if (this->_internal_strength_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_strength_point());
  }

  // int32 smartness_point = 44;
  if (this->_internal_smartness_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_smartness_point());
  }

  // int32 mind_point = 45;
  if (this->_internal_mind_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mind_point());
  }

  // int32 constitution_point = 46;
  if (this->_internal_constitution_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_constitution_point());
  }

  // int32 index = 47;
  if (this->_internal_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 stall_order = 48;
  if (this->_internal_stall_order() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_stall_order());
  }

  // int32 pet_lock = 49;
  if (this->_internal_pet_lock() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pet_lock());
  }

  // int32 unlock_time = 50;
  if (this->_internal_unlock_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_unlock_time());
  }

  // bool current_horse_flag = 51;
  if (this->_internal_current_horse_flag() != 0) {
    total_size += 2 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDetailAttrib::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDetailAttrib::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDetailAttrib::GetClassData() const { return &_class_data_; }


void ServerMsgDetailAttrib::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDetailAttrib*>(&to_msg);
  auto& from = static_cast<const ServerMsgDetailAttrib&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDetailAttrib)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (!from._internal_extra_data().empty()) {
    _this->_internal_set_extra_data(from._internal_extra_data());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_has_flags()) {
    _this->_internal_mutable_flags()->::base::Flag64::MergeFrom(
        from._internal_flags());
  }
  if (from._internal_has_horse_guid()) {
    _this->_internal_mutable_horse_guid()->::base::SHorseGuid::MergeFrom(
        from._internal_horse_guid());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_trade_index() != 0) {
    _this->_internal_set_trade_index(from._internal_trade_index());
  }
  if (from._internal_data_id() != 0) {
    _this->_internal_set_data_id(from._internal_data_id());
  }
  if (from._internal_ai_type() != 0) {
    _this->_internal_set_ai_type(from._internal_ai_type());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_hp_max() != 0) {
    _this->_internal_set_hp_max(from._internal_hp_max());
  }
  if (from._internal_horse_state() != 0) {
    _this->_internal_set_horse_state(from._internal_horse_state());
  }
  if (from._internal_generation() != 0) {
    _this->_internal_set_generation(from._internal_generation());
  }
  if (from._internal_happiness() != 0) {
    _this->_internal_set_happiness(from._internal_happiness());
  }
  if (from._internal_attr_near() != 0) {
    _this->_internal_set_attr_near(from._internal_attr_near());
  }
  if (from._internal_attr_far() != 0) {
    _this->_internal_set_attr_far(from._internal_attr_far());
  }
  if (from._internal_attr_magic() != 0) {
    _this->_internal_set_attr_magic(from._internal_attr_magic());
  }
  if (from._internal_def_near() != 0) {
    _this->_internal_set_def_near(from._internal_def_near());
  }
  if (from._internal_def_far() != 0) {
    _this->_internal_set_def_far(from._internal_def_far());
  }
  if (from._internal_def_magic() != 0) {
    _this->_internal_set_def_magic(from._internal_def_magic());
  }
  if (from._internal_hit() != 0) {
    _this->_internal_set_hit(from._internal_hit());
  }
  if (from._internal_miss() != 0) {
    _this->_internal_set_miss(from._internal_miss());
  }
  if (from._internal_critical() != 0) {
    _this->_internal_set_critical(from._internal_critical());
  }
  if (from._internal_model_id() != 0) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_mount_id() != 0) {
    _this->_internal_set_mount_id(from._internal_mount_id());
  }
  if (from._internal_str_perception() != 0) {
    _this->_internal_set_str_perception(from._internal_str_perception());
  }
  if (from._internal_con_perception() != 0) {
    _this->_internal_set_con_perception(from._internal_con_perception());
  }
  if (from._internal_dex_perception() != 0) {
    _this->_internal_set_dex_perception(from._internal_dex_perception());
  }
  if (from._internal_int_perception() != 0) {
    _this->_internal_set_int_perception(from._internal_int_perception());
  }
  if (from._internal_str_perception_limit() != 0) {
    _this->_internal_set_str_perception_limit(from._internal_str_perception_limit());
  }
  if (from._internal_con_perception_limit() != 0) {
    _this->_internal_set_con_perception_limit(from._internal_con_perception_limit());
  }
  if (from._internal_dex_perception_limit() != 0) {
    _this->_internal_set_dex_perception_limit(from._internal_dex_perception_limit());
  }
  if (from._internal_int_perception_limit() != 0) {
    _this->_internal_set_int_perception_limit(from._internal_int_perception_limit());
  }
  if (from._internal_strength() != 0) {
    _this->_internal_set_strength(from._internal_strength());
  }
  if (from._internal_con() != 0) {
    _this->_internal_set_con(from._internal_con());
  }
  if (from._internal_dex() != 0) {
    _this->_internal_set_dex(from._internal_dex());
  }
  if (from._internal_intelligence() != 0) {
    _this->_internal_set_intelligence(from._internal_intelligence());
  }
  if (from._internal_grow_rate() != 0) {
    _this->_internal_set_grow_rate(from._internal_grow_rate());
  }
  if (from._internal_remain_point() != 0) {
    _this->_internal_set_remain_point(from._internal_remain_point());
  }
  if (from._internal_strength_point() != 0) {
    _this->_internal_set_strength_point(from._internal_strength_point());
  }
  if (from._internal_smartness_point() != 0) {
    _this->_internal_set_smartness_point(from._internal_smartness_point());
  }
  if (from._internal_mind_point() != 0) {
    _this->_internal_set_mind_point(from._internal_mind_point());
  }
  if (from._internal_constitution_point() != 0) {
    _this->_internal_set_constitution_point(from._internal_constitution_point());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_stall_order() != 0) {
    _this->_internal_set_stall_order(from._internal_stall_order());
  }
  if (from._internal_pet_lock() != 0) {
    _this->_internal_set_pet_lock(from._internal_pet_lock());
  }
  if (from._internal_unlock_time() != 0) {
    _this->_internal_set_unlock_time(from._internal_unlock_time());
  }
  if (from._internal_current_horse_flag() != 0) {
    _this->_internal_set_current_horse_flag(from._internal_current_horse_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDetailAttrib::CopyFrom(const ServerMsgDetailAttrib& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDetailAttrib)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDetailAttrib::IsInitialized() const {
  return true;
}

void ServerMsgDetailAttrib::InternalSwap(ServerMsgDetailAttrib* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_data_, lhs_arena,
      &other->_impl_.extra_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgDetailAttrib, _impl_.current_horse_flag_)
      + sizeof(ServerMsgDetailAttrib::_impl_.current_horse_flag_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgDetailAttrib, _impl_.flags_)>(
          reinterpret_cast<char*>(&_impl_.flags_),
          reinterpret_cast<char*>(&other->_impl_.flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDetailAttrib::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[18]);
}

// ===================================================================

class ServerMsgDetailAttribPet::_Internal {
 public:
  static const ::base::Flag64& flags(const ServerMsgDetailAttribPet* msg);
  static const ::base::SHorseGuid& horse_guid(const ServerMsgDetailAttribPet* msg);
};

const ::base::Flag64&
ServerMsgDetailAttribPet::_Internal::flags(const ServerMsgDetailAttribPet* msg) {
  return *msg->_impl_.flags_;
}
const ::base::SHorseGuid&
ServerMsgDetailAttribPet::_Internal::horse_guid(const ServerMsgDetailAttribPet* msg) {
  return *msg->_impl_.horse_guid_;
}
void ServerMsgDetailAttribPet::clear_skills() {
  _impl_.skills_.Clear();
}
void ServerMsgDetailAttribPet::clear_flags() {
  if (GetArenaForAllocation() == nullptr && _impl_.flags_ != nullptr) {
    delete _impl_.flags_;
  }
  _impl_.flags_ = nullptr;
}
void ServerMsgDetailAttribPet::clear_horse_guid() {
  if (GetArenaForAllocation() == nullptr && _impl_.horse_guid_ != nullptr) {
    delete _impl_.horse_guid_;
  }
  _impl_.horse_guid_ = nullptr;
}
ServerMsgDetailAttribPet::ServerMsgDetailAttribPet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDetailAttribPet)
}
ServerMsgDetailAttribPet::ServerMsgDetailAttribPet(const ServerMsgDetailAttribPet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDetailAttribPet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.flags_){nullptr}
    , decltype(_impl_.horse_guid_){nullptr}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.trade_index_){}
    , decltype(_impl_.data_id_){}
    , decltype(_impl_.ai_type_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.hp_){}
    , decltype(_impl_.hp_max_){}
    , decltype(_impl_.horse_state_){}
    , decltype(_impl_.generation_){}
    , decltype(_impl_.happiness_){}
    , decltype(_impl_.attr_near_){}
    , decltype(_impl_.attr_far_){}
    , decltype(_impl_.attr_magic_){}
    , decltype(_impl_.def_near_){}
    , decltype(_impl_.def_far_){}
    , decltype(_impl_.def_magic_){}
    , decltype(_impl_.hit_){}
    , decltype(_impl_.miss_){}
    , decltype(_impl_.critical_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.mount_id_){}
    , decltype(_impl_.str_perception_){}
    , decltype(_impl_.con_perception_){}
    , decltype(_impl_.dex_perception_){}
    , decltype(_impl_.int_perception_){}
    , decltype(_impl_.str_perception_limit_){}
    , decltype(_impl_.con_perception_limit_){}
    , decltype(_impl_.dex_perception_limit_){}
    , decltype(_impl_.int_perception_limit_){}
    , decltype(_impl_.strength_){}
    , decltype(_impl_.con_){}
    , decltype(_impl_.dex_){}
    , decltype(_impl_.intelligence_){}
    , decltype(_impl_.grow_rate_){}
    , decltype(_impl_.remain_point_){}
    , decltype(_impl_.strength_point_){}
    , decltype(_impl_.smartness_point_){}
    , decltype(_impl_.mind_point_){}
    , decltype(_impl_.constitution_point_){}
    , decltype(_impl_.index_){}
    , decltype(_impl_.stall_order_){}
    , decltype(_impl_.pet_lock_){}
    , decltype(_impl_.unlock_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_extra_data().empty()) {
    _this->_impl_.extra_data_.Set(from._internal_extra_data(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_nickname().empty()) {
    _this->_impl_.nickname_.Set(from._internal_nickname(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_flags()) {
    _this->_impl_.flags_ = new ::base::Flag64(*from._impl_.flags_);
  }
  if (from._internal_has_horse_guid()) {
    _this->_impl_.horse_guid_ = new ::base::SHorseGuid(*from._impl_.horse_guid_);
  }
  ::memcpy(&_impl_.map_id_, &from._impl_.map_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.unlock_time_) -
    reinterpret_cast<char*>(&_impl_.map_id_)) + sizeof(_impl_.unlock_time_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDetailAttribPet)
}

inline void ServerMsgDetailAttribPet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){arena}
    , decltype(_impl_.extra_data_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.nickname_){}
    , decltype(_impl_.flags_){nullptr}
    , decltype(_impl_.horse_guid_){nullptr}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.trade_index_){0}
    , decltype(_impl_.data_id_){0}
    , decltype(_impl_.ai_type_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.exp_){0}
    , decltype(_impl_.hp_){0}
    , decltype(_impl_.hp_max_){0}
    , decltype(_impl_.horse_state_){0}
    , decltype(_impl_.generation_){0}
    , decltype(_impl_.happiness_){0}
    , decltype(_impl_.attr_near_){0}
    , decltype(_impl_.attr_far_){0}
    , decltype(_impl_.attr_magic_){0}
    , decltype(_impl_.def_near_){0}
    , decltype(_impl_.def_far_){0}
    , decltype(_impl_.def_magic_){0}
    , decltype(_impl_.hit_){0}
    , decltype(_impl_.miss_){0}
    , decltype(_impl_.critical_){0}
    , decltype(_impl_.model_id_){0}
    , decltype(_impl_.mount_id_){0}
    , decltype(_impl_.str_perception_){0}
    , decltype(_impl_.con_perception_){0}
    , decltype(_impl_.dex_perception_){0}
    , decltype(_impl_.int_perception_){0}
    , decltype(_impl_.str_perception_limit_){0}
    , decltype(_impl_.con_perception_limit_){0}
    , decltype(_impl_.dex_perception_limit_){0}
    , decltype(_impl_.int_perception_limit_){0}
    , decltype(_impl_.strength_){0}
    , decltype(_impl_.con_){0}
    , decltype(_impl_.dex_){0}
    , decltype(_impl_.intelligence_){0}
    , decltype(_impl_.grow_rate_){0}
    , decltype(_impl_.remain_point_){0}
    , decltype(_impl_.strength_point_){0}
    , decltype(_impl_.smartness_point_){0}
    , decltype(_impl_.mind_point_){0}
    , decltype(_impl_.constitution_point_){0}
    , decltype(_impl_.index_){0}
    , decltype(_impl_.stall_order_){0}
    , decltype(_impl_.pet_lock_){0}
    , decltype(_impl_.unlock_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.extra_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.extra_data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.nickname_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.nickname_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMsgDetailAttribPet::~ServerMsgDetailAttribPet() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDetailAttribPet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDetailAttribPet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skills_.~RepeatedPtrField();
  _impl_.extra_data_.Destroy();
  _impl_.name_.Destroy();
  _impl_.nickname_.Destroy();
  if (this != internal_default_instance()) delete _impl_.flags_;
  if (this != internal_default_instance()) delete _impl_.horse_guid_;
}

void ServerMsgDetailAttribPet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDetailAttribPet::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDetailAttribPet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skills_.Clear();
  _impl_.extra_data_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.nickname_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.flags_ != nullptr) {
    delete _impl_.flags_;
  }
  _impl_.flags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.horse_guid_ != nullptr) {
    delete _impl_.horse_guid_;
  }
  _impl_.horse_guid_ = nullptr;
  ::memset(&_impl_.map_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.unlock_time_) -
      reinterpret_cast<char*>(&_impl_.map_id_)) + sizeof(_impl_.unlock_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDetailAttribPet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .base.HorseSkill skills = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string extra_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_extra_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgDetailAttribPet.extra_data"));
        } else
          goto handle_unusual;
        continue;
      // .base.Flag64 flags = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SHorseGuid horse_guid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_horse_guid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 trade_index = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.trade_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 data_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgDetailAttribPet.name"));
        } else
          goto handle_unusual;
        continue;
      // string nickname = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_nickname();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgDetailAttribPet.nickname"));
        } else
          goto handle_unusual;
        continue;
      // int32 ai_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.ai_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 exp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.hp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp_max = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.hp_max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 horse_state = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.horse_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 generation = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.generation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 happiness = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.happiness_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attr_near = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.attr_near_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attr_far = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          _impl_.attr_far_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 attr_magic = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.attr_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 def_near = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.def_near_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 def_far = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.def_far_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 def_magic = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.def_magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hit = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.hit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 miss = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.miss_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 critical = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          _impl_.critical_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 model_id = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mount_id = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          _impl_.mount_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 str_perception = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          _impl_.str_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 con_perception = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          _impl_.con_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dex_perception = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          _impl_.dex_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int_perception = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          _impl_.int_perception_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 str_perception_limit = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.str_perception_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 con_perception_limit = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.con_perception_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dex_perception_limit = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dex_perception_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 int_perception_limit = 36;
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.int_perception_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 strength = 37;
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.strength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 con = 38;
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.con_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dex = 39;
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.dex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 intelligence = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.intelligence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 grow_rate = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.grow_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 remain_point = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.remain_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 strength_point = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.strength_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 smartness_point = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.smartness_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mind_point = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.mind_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 constitution_point = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.constitution_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stall_order = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          _impl_.stall_order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pet_lock = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          _impl_.pet_lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 unlock_time = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          _impl_.unlock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDetailAttribPet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDetailAttribPet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .base.HorseSkill skills = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // string extra_data = 2;
  if (!this->_internal_extra_data().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_extra_data().data(), static_cast<int>(this->_internal_extra_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgDetailAttribPet.extra_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_extra_data(), target);
  }

  // .base.Flag64 flags = 3;
  if (this->_internal_has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::flags(this),
        _Internal::flags(this).GetCachedSize(), target, stream);
  }

  // int32 map_id = 4;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_map_id(), target);
  }

  // .base.SHorseGuid horse_guid = 5;
  if (this->_internal_has_horse_guid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::horse_guid(this),
        _Internal::horse_guid(this).GetCachedSize(), target, stream);
  }

  // int32 trade_index = 6;
  if (this->_internal_trade_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_trade_index(), target);
  }

  // int32 data_id = 7;
  if (this->_internal_data_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_data_id(), target);
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgDetailAttribPet.name");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_name(), target);
  }

  // string nickname = 9;
  if (!this->_internal_nickname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_nickname().data(), static_cast<int>(this->_internal_nickname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgDetailAttribPet.nickname");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_nickname(), target);
  }

  // int32 ai_type = 10;
  if (this->_internal_ai_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_ai_type(), target);
  }

  // int32 level = 11;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_level(), target);
  }

  // int32 exp = 12;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_exp(), target);
  }

  // int32 hp = 13;
  if (this->_internal_hp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_hp(), target);
  }

  // int32 hp_max = 14;
  if (this->_internal_hp_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_hp_max(), target);
  }

  // int32 horse_state = 15;
  if (this->_internal_horse_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_horse_state(), target);
  }

  // int32 generation = 16;
  if (this->_internal_generation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(16, this->_internal_generation(), target);
  }

  // int32 happiness = 17;
  if (this->_internal_happiness() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(17, this->_internal_happiness(), target);
  }

  // int32 attr_near = 18;
  if (this->_internal_attr_near() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(18, this->_internal_attr_near(), target);
  }

  // int32 attr_far = 19;
  if (this->_internal_attr_far() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(19, this->_internal_attr_far(), target);
  }

  // int32 attr_magic = 20;
  if (this->_internal_attr_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_attr_magic(), target);
  }

  // int32 def_near = 21;
  if (this->_internal_def_near() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_def_near(), target);
  }

  // int32 def_far = 22;
  if (this->_internal_def_far() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_def_far(), target);
  }

  // int32 def_magic = 23;
  if (this->_internal_def_magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(23, this->_internal_def_magic(), target);
  }

  // int32 hit = 24;
  if (this->_internal_hit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_hit(), target);
  }

  // int32 miss = 25;
  if (this->_internal_miss() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_miss(), target);
  }

  // int32 critical = 26;
  if (this->_internal_critical() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(26, this->_internal_critical(), target);
  }

  // int32 model_id = 27;
  if (this->_internal_model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_model_id(), target);
  }

  // int32 mount_id = 28;
  if (this->_internal_mount_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(28, this->_internal_mount_id(), target);
  }

  // int32 str_perception = 29;
  if (this->_internal_str_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(29, this->_internal_str_perception(), target);
  }

  // int32 con_perception = 30;
  if (this->_internal_con_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(30, this->_internal_con_perception(), target);
  }

  // int32 dex_perception = 31;
  if (this->_internal_dex_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(31, this->_internal_dex_perception(), target);
  }

  // int32 int_perception = 32;
  if (this->_internal_int_perception() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(32, this->_internal_int_perception(), target);
  }

  // int32 str_perception_limit = 33;
  if (this->_internal_str_perception_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(33, this->_internal_str_perception_limit(), target);
  }

  // int32 con_perception_limit = 34;
  if (this->_internal_con_perception_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(34, this->_internal_con_perception_limit(), target);
  }

  // int32 dex_perception_limit = 35;
  if (this->_internal_dex_perception_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(35, this->_internal_dex_perception_limit(), target);
  }

  // int32 int_perception_limit = 36;
  if (this->_internal_int_perception_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(36, this->_internal_int_perception_limit(), target);
  }

  // int32 strength = 37;
  if (this->_internal_strength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(37, this->_internal_strength(), target);
  }

  // int32 con = 38;
  if (this->_internal_con() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(38, this->_internal_con(), target);
  }

  // int32 dex = 39;
  if (this->_internal_dex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(39, this->_internal_dex(), target);
  }

  // int32 intelligence = 40;
  if (this->_internal_intelligence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(40, this->_internal_intelligence(), target);
  }

  // int32 grow_rate = 41;
  if (this->_internal_grow_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(41, this->_internal_grow_rate(), target);
  }

  // int32 remain_point = 42;
  if (this->_internal_remain_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(42, this->_internal_remain_point(), target);
  }

  // int32 strength_point = 43;
  if (this->_internal_strength_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(43, this->_internal_strength_point(), target);
  }

  // int32 smartness_point = 44;
  if (this->_internal_smartness_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(44, this->_internal_smartness_point(), target);
  }

  // int32 mind_point = 45;
  if (this->_internal_mind_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(45, this->_internal_mind_point(), target);
  }

  // int32 constitution_point = 46;
  if (this->_internal_constitution_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(46, this->_internal_constitution_point(), target);
  }

  // int32 index = 47;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(47, this->_internal_index(), target);
  }

  // int32 stall_order = 48;
  if (this->_internal_stall_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(48, this->_internal_stall_order(), target);
  }

  // int32 pet_lock = 49;
  if (this->_internal_pet_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(49, this->_internal_pet_lock(), target);
  }

  // int32 unlock_time = 50;
  if (this->_internal_unlock_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(50, this->_internal_unlock_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDetailAttribPet)
  return target;
}

size_t ServerMsgDetailAttribPet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDetailAttribPet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.HorseSkill skills = 1;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string extra_data = 2;
  if (!this->_internal_extra_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_extra_data());
  }

  // string name = 8;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string nickname = 9;
  if (!this->_internal_nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nickname());
  }

  // .base.Flag64 flags = 3;
  if (this->_internal_has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flags_);
  }

  // .base.SHorseGuid horse_guid = 5;
  if (this->_internal_has_horse_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.horse_guid_);
  }

  // int32 map_id = 4;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 trade_index = 6;
  if (this->_internal_trade_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_trade_index());
  }

  // int32 data_id = 7;
  if (this->_internal_data_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_data_id());
  }

  // int32 ai_type = 10;
  if (this->_internal_ai_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ai_type());
  }

  // int32 level = 11;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 exp = 12;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_exp());
  }

  // int32 hp = 13;
  if (this->_internal_hp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp());
  }

  // int32 hp_max = 14;
  if (this->_internal_hp_max() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp_max());
  }

  // int32 horse_state = 15;
  if (this->_internal_horse_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_horse_state());
  }

  // int32 generation = 16;
  if (this->_internal_generation() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_generation());
  }

  // int32 happiness = 17;
  if (this->_internal_happiness() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_happiness());
  }

  // int32 attr_near = 18;
  if (this->_internal_attr_near() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_attr_near());
  }

  // int32 attr_far = 19;
  if (this->_internal_attr_far() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_attr_far());
  }

  // int32 attr_magic = 20;
  if (this->_internal_attr_magic() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_attr_magic());
  }

  // int32 def_near = 21;
  if (this->_internal_def_near() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_def_near());
  }

  // int32 def_far = 22;
  if (this->_internal_def_far() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_def_far());
  }

  // int32 def_magic = 23;
  if (this->_internal_def_magic() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_def_magic());
  }

  // int32 hit = 24;
  if (this->_internal_hit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_hit());
  }

  // int32 miss = 25;
  if (this->_internal_miss() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_miss());
  }

  // int32 critical = 26;
  if (this->_internal_critical() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_critical());
  }

  // int32 model_id = 27;
  if (this->_internal_model_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_model_id());
  }

  // int32 mount_id = 28;
  if (this->_internal_mount_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mount_id());
  }

  // int32 str_perception = 29;
  if (this->_internal_str_perception() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_str_perception());
  }

  // int32 con_perception = 30;
  if (this->_internal_con_perception() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_con_perception());
  }

  // int32 dex_perception = 31;
  if (this->_internal_dex_perception() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dex_perception());
  }

  // int32 int_perception = 32;
  if (this->_internal_int_perception() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_int_perception());
  }

  // int32 str_perception_limit = 33;
  if (this->_internal_str_perception_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_str_perception_limit());
  }

  // int32 con_perception_limit = 34;
  if (this->_internal_con_perception_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_con_perception_limit());
  }

  // int32 dex_perception_limit = 35;
  if (this->_internal_dex_perception_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dex_perception_limit());
  }

  // int32 int_perception_limit = 36;
  if (this->_internal_int_perception_limit() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_int_perception_limit());
  }

  // int32 strength = 37;
  if (this->_internal_strength() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_strength());
  }

  // int32 con = 38;
  if (this->_internal_con() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_con());
  }

  // int32 dex = 39;
  if (this->_internal_dex() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_dex());
  }

  // int32 intelligence = 40;
  if (this->_internal_intelligence() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_intelligence());
  }

  // int32 grow_rate = 41;
  if (this->_internal_grow_rate() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_grow_rate());
  }

  // int32 remain_point = 42;
  if (this->_internal_remain_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_remain_point());
  }

  // int32 strength_point = 43;
  if (this->_internal_strength_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_strength_point());
  }

  // int32 smartness_point = 44;
  if (this->_internal_smartness_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_smartness_point());
  }

  // int32 mind_point = 45;
  if (this->_internal_mind_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_mind_point());
  }

  // int32 constitution_point = 46;
  if (this->_internal_constitution_point() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_constitution_point());
  }

  // int32 index = 47;
  if (this->_internal_index() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_index());
  }

  // int32 stall_order = 48;
  if (this->_internal_stall_order() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_stall_order());
  }

  // int32 pet_lock = 49;
  if (this->_internal_pet_lock() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_pet_lock());
  }

  // int32 unlock_time = 50;
  if (this->_internal_unlock_time() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_unlock_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDetailAttribPet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDetailAttribPet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDetailAttribPet::GetClassData() const { return &_class_data_; }


void ServerMsgDetailAttribPet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDetailAttribPet*>(&to_msg);
  auto& from = static_cast<const ServerMsgDetailAttribPet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDetailAttribPet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (!from._internal_extra_data().empty()) {
    _this->_internal_set_extra_data(from._internal_extra_data());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_has_flags()) {
    _this->_internal_mutable_flags()->::base::Flag64::MergeFrom(
        from._internal_flags());
  }
  if (from._internal_has_horse_guid()) {
    _this->_internal_mutable_horse_guid()->::base::SHorseGuid::MergeFrom(
        from._internal_horse_guid());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_trade_index() != 0) {
    _this->_internal_set_trade_index(from._internal_trade_index());
  }
  if (from._internal_data_id() != 0) {
    _this->_internal_set_data_id(from._internal_data_id());
  }
  if (from._internal_ai_type() != 0) {
    _this->_internal_set_ai_type(from._internal_ai_type());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_hp() != 0) {
    _this->_internal_set_hp(from._internal_hp());
  }
  if (from._internal_hp_max() != 0) {
    _this->_internal_set_hp_max(from._internal_hp_max());
  }
  if (from._internal_horse_state() != 0) {
    _this->_internal_set_horse_state(from._internal_horse_state());
  }
  if (from._internal_generation() != 0) {
    _this->_internal_set_generation(from._internal_generation());
  }
  if (from._internal_happiness() != 0) {
    _this->_internal_set_happiness(from._internal_happiness());
  }
  if (from._internal_attr_near() != 0) {
    _this->_internal_set_attr_near(from._internal_attr_near());
  }
  if (from._internal_attr_far() != 0) {
    _this->_internal_set_attr_far(from._internal_attr_far());
  }
  if (from._internal_attr_magic() != 0) {
    _this->_internal_set_attr_magic(from._internal_attr_magic());
  }
  if (from._internal_def_near() != 0) {
    _this->_internal_set_def_near(from._internal_def_near());
  }
  if (from._internal_def_far() != 0) {
    _this->_internal_set_def_far(from._internal_def_far());
  }
  if (from._internal_def_magic() != 0) {
    _this->_internal_set_def_magic(from._internal_def_magic());
  }
  if (from._internal_hit() != 0) {
    _this->_internal_set_hit(from._internal_hit());
  }
  if (from._internal_miss() != 0) {
    _this->_internal_set_miss(from._internal_miss());
  }
  if (from._internal_critical() != 0) {
    _this->_internal_set_critical(from._internal_critical());
  }
  if (from._internal_model_id() != 0) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_mount_id() != 0) {
    _this->_internal_set_mount_id(from._internal_mount_id());
  }
  if (from._internal_str_perception() != 0) {
    _this->_internal_set_str_perception(from._internal_str_perception());
  }
  if (from._internal_con_perception() != 0) {
    _this->_internal_set_con_perception(from._internal_con_perception());
  }
  if (from._internal_dex_perception() != 0) {
    _this->_internal_set_dex_perception(from._internal_dex_perception());
  }
  if (from._internal_int_perception() != 0) {
    _this->_internal_set_int_perception(from._internal_int_perception());
  }
  if (from._internal_str_perception_limit() != 0) {
    _this->_internal_set_str_perception_limit(from._internal_str_perception_limit());
  }
  if (from._internal_con_perception_limit() != 0) {
    _this->_internal_set_con_perception_limit(from._internal_con_perception_limit());
  }
  if (from._internal_dex_perception_limit() != 0) {
    _this->_internal_set_dex_perception_limit(from._internal_dex_perception_limit());
  }
  if (from._internal_int_perception_limit() != 0) {
    _this->_internal_set_int_perception_limit(from._internal_int_perception_limit());
  }
  if (from._internal_strength() != 0) {
    _this->_internal_set_strength(from._internal_strength());
  }
  if (from._internal_con() != 0) {
    _this->_internal_set_con(from._internal_con());
  }
  if (from._internal_dex() != 0) {
    _this->_internal_set_dex(from._internal_dex());
  }
  if (from._internal_intelligence() != 0) {
    _this->_internal_set_intelligence(from._internal_intelligence());
  }
  if (from._internal_grow_rate() != 0) {
    _this->_internal_set_grow_rate(from._internal_grow_rate());
  }
  if (from._internal_remain_point() != 0) {
    _this->_internal_set_remain_point(from._internal_remain_point());
  }
  if (from._internal_strength_point() != 0) {
    _this->_internal_set_strength_point(from._internal_strength_point());
  }
  if (from._internal_smartness_point() != 0) {
    _this->_internal_set_smartness_point(from._internal_smartness_point());
  }
  if (from._internal_mind_point() != 0) {
    _this->_internal_set_mind_point(from._internal_mind_point());
  }
  if (from._internal_constitution_point() != 0) {
    _this->_internal_set_constitution_point(from._internal_constitution_point());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  if (from._internal_stall_order() != 0) {
    _this->_internal_set_stall_order(from._internal_stall_order());
  }
  if (from._internal_pet_lock() != 0) {
    _this->_internal_set_pet_lock(from._internal_pet_lock());
  }
  if (from._internal_unlock_time() != 0) {
    _this->_internal_set_unlock_time(from._internal_unlock_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDetailAttribPet::CopyFrom(const ServerMsgDetailAttribPet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDetailAttribPet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDetailAttribPet::IsInitialized() const {
  return true;
}

void ServerMsgDetailAttribPet::InternalSwap(ServerMsgDetailAttribPet* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.extra_data_, lhs_arena,
      &other->_impl_.extra_data_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.nickname_, lhs_arena,
      &other->_impl_.nickname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgDetailAttribPet, _impl_.unlock_time_)
      + sizeof(ServerMsgDetailAttribPet::_impl_.unlock_time_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgDetailAttribPet, _impl_.flags_)>(
          reinterpret_cast<char*>(&_impl_.flags_),
          reinterpret_cast<char*>(&other->_impl_.flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDetailAttribPet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[19]);
}

// ===================================================================

class ServerMsgDetailBuff::_Internal {
 public:
};

ServerMsgDetailBuff::ServerMsgDetailBuff(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDetailBuff)
}
ServerMsgDetailBuff::ServerMsgDetailBuff(const ServerMsgDetailBuff& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDetailBuff* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.receiver_id_){}
    , decltype(_impl_.sender_id_){}
    , decltype(_impl_.enable_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.sn_){}
    , decltype(_impl_.buff_id_){}
    , decltype(_impl_.continuance_){}
    , decltype(_impl_.delay_time_){}
    , decltype(_impl_.sender_logic_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sender_logic_count_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.sender_logic_count_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDetailBuff)
}

inline void ServerMsgDetailBuff::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.receiver_id_){0}
    , decltype(_impl_.sender_id_){0}
    , decltype(_impl_.enable_){false}
    , decltype(_impl_.skill_id_){0}
    , decltype(_impl_.sn_){0}
    , decltype(_impl_.buff_id_){0}
    , decltype(_impl_.continuance_){0}
    , decltype(_impl_.delay_time_){0}
    , decltype(_impl_.sender_logic_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgDetailBuff::~ServerMsgDetailBuff() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDetailBuff)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDetailBuff::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgDetailBuff::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDetailBuff::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDetailBuff)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sender_logic_count_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.sender_logic_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDetailBuff::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 receiver_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.receiver_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sender_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sender_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool enable = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.enable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sn = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 buff_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.buff_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 continuance = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.continuance_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 delay_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.delay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 sender_logic_count = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.sender_logic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDetailBuff::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDetailBuff)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_receiver_id(), target);
  }

  // int32 sender_id = 3;
  if (this->_internal_sender_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_sender_id(), target);
  }

  // bool enable = 4;
  if (this->_internal_enable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_enable(), target);
  }

  // int32 skill_id = 5;
  if (this->_internal_skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_skill_id(), target);
  }

  // int32 sn = 6;
  if (this->_internal_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_sn(), target);
  }

  // int32 buff_id = 7;
  if (this->_internal_buff_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_buff_id(), target);
  }

  // int32 continuance = 8;
  if (this->_internal_continuance() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_continuance(), target);
  }

  // int32 delay_time = 9;
  if (this->_internal_delay_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_delay_time(), target);
  }

  // int32 sender_logic_count = 10;
  if (this->_internal_sender_logic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_sender_logic_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDetailBuff)
  return target;
}

size_t ServerMsgDetailBuff::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDetailBuff)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 receiver_id = 2;
  if (this->_internal_receiver_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_receiver_id());
  }

  // int32 sender_id = 3;
  if (this->_internal_sender_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_id());
  }

  // bool enable = 4;
  if (this->_internal_enable() != 0) {
    total_size += 1 + 1;
  }

  // int32 skill_id = 5;
  if (this->_internal_skill_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_id());
  }

  // int32 sn = 6;
  if (this->_internal_sn() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sn());
  }

  // int32 buff_id = 7;
  if (this->_internal_buff_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buff_id());
  }

  // int32 continuance = 8;
  if (this->_internal_continuance() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_continuance());
  }

  // int32 delay_time = 9;
  if (this->_internal_delay_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delay_time());
  }

  // int32 sender_logic_count = 10;
  if (this->_internal_sender_logic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_sender_logic_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDetailBuff::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDetailBuff::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDetailBuff::GetClassData() const { return &_class_data_; }


void ServerMsgDetailBuff::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDetailBuff*>(&to_msg);
  auto& from = static_cast<const ServerMsgDetailBuff&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDetailBuff)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_receiver_id() != 0) {
    _this->_internal_set_receiver_id(from._internal_receiver_id());
  }
  if (from._internal_sender_id() != 0) {
    _this->_internal_set_sender_id(from._internal_sender_id());
  }
  if (from._internal_enable() != 0) {
    _this->_internal_set_enable(from._internal_enable());
  }
  if (from._internal_skill_id() != 0) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_sn() != 0) {
    _this->_internal_set_sn(from._internal_sn());
  }
  if (from._internal_buff_id() != 0) {
    _this->_internal_set_buff_id(from._internal_buff_id());
  }
  if (from._internal_continuance() != 0) {
    _this->_internal_set_continuance(from._internal_continuance());
  }
  if (from._internal_delay_time() != 0) {
    _this->_internal_set_delay_time(from._internal_delay_time());
  }
  if (from._internal_sender_logic_count() != 0) {
    _this->_internal_set_sender_logic_count(from._internal_sender_logic_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDetailBuff::CopyFrom(const ServerMsgDetailBuff& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDetailBuff)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDetailBuff::IsInitialized() const {
  return true;
}

void ServerMsgDetailBuff::InternalSwap(ServerMsgDetailBuff* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgDetailBuff, _impl_.sender_logic_count_)
      + sizeof(ServerMsgDetailBuff::_impl_.sender_logic_count_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgDetailBuff, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDetailBuff::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[20]);
}

// ===================================================================

class ServerMsgDetailEquipList::_Internal {
 public:
};

void ServerMsgDetailEquipList::clear_items() {
  _impl_.items_.Clear();
}
ServerMsgDetailEquipList::ServerMsgDetailEquipList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDetailEquipList)
}
ServerMsgDetailEquipList::ServerMsgDetailEquipList(const ServerMsgDetailEquipList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDetailEquipList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDetailEquipList)
}

inline void ServerMsgDetailEquipList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.object_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgDetailEquipList::~ServerMsgDetailEquipList() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDetailEquipList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDetailEquipList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ServerMsgDetailEquipList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDetailEquipList::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDetailEquipList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.object_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDetailEquipList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.SItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDetailEquipList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDetailEquipList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // repeated .base.SItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDetailEquipList)
  return target;
}

size_t ServerMsgDetailEquipList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDetailEquipList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.SItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDetailEquipList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDetailEquipList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDetailEquipList::GetClassData() const { return &_class_data_; }


void ServerMsgDetailEquipList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDetailEquipList*>(&to_msg);
  auto& from = static_cast<const ServerMsgDetailEquipList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDetailEquipList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDetailEquipList::CopyFrom(const ServerMsgDetailEquipList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDetailEquipList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDetailEquipList::IsInitialized() const {
  return true;
}

void ServerMsgDetailEquipList::InternalSwap(ServerMsgDetailEquipList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDetailEquipList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[21]);
}

// ===================================================================

class ServerMsgDetailDetailItemList::_Internal {
 public:
};

void ServerMsgDetailDetailItemList::clear_items() {
  _impl_.items_.Clear();
}
ServerMsgDetailDetailItemList::ServerMsgDetailDetailItemList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDetailDetailItemList)
}
ServerMsgDetailDetailItemList::ServerMsgDetailDetailItemList(const ServerMsgDetailDetailItemList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDetailDetailItemList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){from._impl_.items_}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDetailDetailItemList)
}

inline void ServerMsgDetailDetailItemList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.items_){arena}
    , decltype(_impl_.object_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgDetailDetailItemList::~ServerMsgDetailDetailItemList() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDetailDetailItemList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDetailDetailItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.items_.~RepeatedPtrField();
}

void ServerMsgDetailDetailItemList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDetailDetailItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDetailDetailItemList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  _impl_.object_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDetailDetailItemList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.SItem items = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDetailDetailItemList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDetailDetailItemList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // repeated .base.SItem items = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_items_size()); i < n; i++) {
    const auto& repfield = this->_internal_items(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDetailDetailItemList)
  return target;
}

size_t ServerMsgDetailDetailItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDetailDetailItemList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.SItem items = 2;
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->_impl_.items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDetailDetailItemList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDetailDetailItemList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDetailDetailItemList::GetClassData() const { return &_class_data_; }


void ServerMsgDetailDetailItemList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDetailDetailItemList*>(&to_msg);
  auto& from = static_cast<const ServerMsgDetailDetailItemList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDetailDetailItemList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.items_.MergeFrom(from._impl_.items_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDetailDetailItemList::CopyFrom(const ServerMsgDetailDetailItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDetailDetailItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDetailDetailItemList::IsInitialized() const {
  return true;
}

void ServerMsgDetailDetailItemList::InternalSwap(ServerMsgDetailDetailItemList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDetailDetailItemList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[22]);
}

// ===================================================================

class ServerMsgDetailSkillList::_Internal {
 public:
};

void ServerMsgDetailSkillList::clear_skills() {
  _impl_.skills_.Clear();
}
ServerMsgDetailSkillList::ServerMsgDetailSkillList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgDetailSkillList)
}
ServerMsgDetailSkillList::ServerMsgDetailSkillList(const ServerMsgDetailSkillList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgDetailSkillList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){from._impl_.skills_}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgDetailSkillList)
}

inline void ServerMsgDetailSkillList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skills_){arena}
    , decltype(_impl_.player_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgDetailSkillList::~ServerMsgDetailSkillList() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgDetailSkillList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgDetailSkillList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.skills_.~RepeatedPtrField();
}

void ServerMsgDetailSkillList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgDetailSkillList::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgDetailSkillList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.skills_.Clear();
  _impl_.player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgDetailSkillList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.PlayerSpell skills = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_skills(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgDetailSkillList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgDetailSkillList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // repeated .base.PlayerSpell skills = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_skills_size()); i < n; i++) {
    const auto& repfield = this->_internal_skills(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgDetailSkillList)
  return target;
}

size_t ServerMsgDetailSkillList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgDetailSkillList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.PlayerSpell skills = 2;
  total_size += 1UL * this->_internal_skills_size();
  for (const auto& msg : this->_impl_.skills_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgDetailSkillList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgDetailSkillList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgDetailSkillList::GetClassData() const { return &_class_data_; }


void ServerMsgDetailSkillList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgDetailSkillList*>(&to_msg);
  auto& from = static_cast<const ServerMsgDetailSkillList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgDetailSkillList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.skills_.MergeFrom(from._impl_.skills_);
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgDetailSkillList::CopyFrom(const ServerMsgDetailSkillList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgDetailSkillList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgDetailSkillList::IsInitialized() const {
  return true;
}

void ServerMsgDetailSkillList::InternalSwap(ServerMsgDetailSkillList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.skills_.InternalSwap(&other->_impl_.skills_);
  swap(_impl_.player_id_, other->_impl_.player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgDetailSkillList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[23]);
}

// ===================================================================

class ServerMsgEnterMap::_Internal {
 public:
};

ServerMsgEnterMap::ServerMsgEnterMap(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgEnterMap)
}
ServerMsgEnterMap::ServerMsgEnterMap(const ServerMsgEnterMap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgEnterMap* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_y_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.scene_id_, &from._impl_.scene_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.object_id_) -
    reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.object_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgEnterMap)
}

inline void ServerMsgEnterMap::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.scene_id_){0u}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_y_){0}
    , decltype(_impl_.guid_){0}
    , decltype(_impl_.object_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgEnterMap::~ServerMsgEnterMap() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgEnterMap)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgEnterMap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgEnterMap::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgEnterMap::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgEnterMap)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.scene_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.object_id_) -
      reinterpret_cast<char*>(&_impl_.scene_id_)) + sizeof(_impl_.object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgEnterMap::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 scene_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position_x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.position_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 object_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgEnterMap::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgEnterMap)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_scene_id(), target);
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_position_x(), target);
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_position_y(), target);
  }

  // int32 guid = 4;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_guid(), target);
  }

  // int32 object_id = 5;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgEnterMap)
  return target;
}

size_t ServerMsgEnterMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgEnterMap)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 scene_id = 1;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_scene_id());
  }

  // float position_x = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // float position_y = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = this->_internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    total_size += 1 + 4;
  }

  // int32 guid = 4;
  if (this->_internal_guid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_guid());
  }

  // int32 object_id = 5;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgEnterMap::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgEnterMap::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgEnterMap::GetClassData() const { return &_class_data_; }


void ServerMsgEnterMap::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgEnterMap*>(&to_msg);
  auto& from = static_cast<const ServerMsgEnterMap&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgEnterMap)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_y = from._internal_position_y();
  uint32_t raw_position_y;
  memcpy(&raw_position_y, &tmp_position_y, sizeof(tmp_position_y));
  if (raw_position_y != 0) {
    _this->_internal_set_position_y(from._internal_position_y());
  }
  if (from._internal_guid() != 0) {
    _this->_internal_set_guid(from._internal_guid());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgEnterMap::CopyFrom(const ServerMsgEnterMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgEnterMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgEnterMap::IsInitialized() const {
  return true;
}

void ServerMsgEnterMap::InternalSwap(ServerMsgEnterMap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgEnterMap, _impl_.object_id_)
      + sizeof(ServerMsgEnterMap::_impl_.object_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgEnterMap, _impl_.scene_id_)>(
          reinterpret_cast<char*>(&_impl_.scene_id_),
          reinterpret_cast<char*>(&other->_impl_.scene_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgEnterMap::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[24]);
}

// ===================================================================

class ServerMsgItemInfo::_Internal {
 public:
  static const ::base::SItem& item(const ServerMsgItemInfo* msg);
};

const ::base::SItem&
ServerMsgItemInfo::_Internal::item(const ServerMsgItemInfo* msg) {
  return *msg->_impl_.item_;
}
void ServerMsgItemInfo::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
ServerMsgItemInfo::ServerMsgItemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgItemInfo)
}
ServerMsgItemInfo::ServerMsgItemInfo(const ServerMsgItemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgItemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.bag_index_){}
    , decltype(_impl_.null_){}
    , decltype(_impl_.tips_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::base::SItem(*from._impl_.item_);
  }
  ::memcpy(&_impl_.bag_index_, &from._impl_.bag_index_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.tips_) -
    reinterpret_cast<char*>(&_impl_.bag_index_)) + sizeof(_impl_.tips_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgItemInfo)
}

inline void ServerMsgItemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.bag_index_){0}
    , decltype(_impl_.null_){false}
    , decltype(_impl_.tips_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgItemInfo::~ServerMsgItemInfo() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgItemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgItemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void ServerMsgItemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgItemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgItemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  ::memset(&_impl_.bag_index_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.tips_) -
      reinterpret_cast<char*>(&_impl_.bag_index_)) + sizeof(_impl_.tips_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgItemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bag_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bag_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool null = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.null_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tips = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.tips_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgItemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgItemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bag_index = 1;
  if (this->_internal_bag_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bag_index(), target);
  }

  // .base.SItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  // bool null = 3;
  if (this->_internal_null() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_null(), target);
  }

  // int32 tips = 4;
  if (this->_internal_tips() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_tips(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgItemInfo)
  return target;
}

size_t ServerMsgItemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgItemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.SItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // int32 bag_index = 1;
  if (this->_internal_bag_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bag_index());
  }

  // bool null = 3;
  if (this->_internal_null() != 0) {
    total_size += 1 + 1;
  }

  // int32 tips = 4;
  if (this->_internal_tips() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_tips());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgItemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgItemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgItemInfo::GetClassData() const { return &_class_data_; }


void ServerMsgItemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgItemInfo*>(&to_msg);
  auto& from = static_cast<const ServerMsgItemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgItemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::base::SItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_bag_index() != 0) {
    _this->_internal_set_bag_index(from._internal_bag_index());
  }
  if (from._internal_null() != 0) {
    _this->_internal_set_null(from._internal_null());
  }
  if (from._internal_tips() != 0) {
    _this->_internal_set_tips(from._internal_tips());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgItemInfo::CopyFrom(const ServerMsgItemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgItemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgItemInfo::IsInitialized() const {
  return true;
}

void ServerMsgItemInfo::InternalSwap(ServerMsgItemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgItemInfo, _impl_.tips_)
      + sizeof(ServerMsgItemInfo::_impl_.tips_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgItemInfo, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgItemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[25]);
}

// ===================================================================

class ServerMsgManipulatePetResult::_Internal {
 public:
};

ServerMsgManipulatePetResult::ServerMsgManipulatePetResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgManipulatePetResult)
}
ServerMsgManipulatePetResult::ServerMsgManipulatePetResult(const ServerMsgManipulatePetResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgManipulatePetResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.scene_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scene_id_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.scene_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgManipulatePetResult)
}

inline void ServerMsgManipulatePetResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.scene_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgManipulatePetResult::~ServerMsgManipulatePetResult() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgManipulatePetResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgManipulatePetResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgManipulatePetResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgManipulatePetResult::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgManipulatePetResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scene_id_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgManipulatePetResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 object_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgManipulatePetResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgManipulatePetResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 object_id = 2;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_object_id(), target);
  }

  // int32 scene_id = 3;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_scene_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgManipulatePetResult)
  return target;
}

size_t ServerMsgManipulatePetResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgManipulatePetResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 object_id = 2;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 scene_id = 3;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgManipulatePetResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgManipulatePetResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgManipulatePetResult::GetClassData() const { return &_class_data_; }


void ServerMsgManipulatePetResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgManipulatePetResult*>(&to_msg);
  auto& from = static_cast<const ServerMsgManipulatePetResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgManipulatePetResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgManipulatePetResult::CopyFrom(const ServerMsgManipulatePetResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgManipulatePetResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgManipulatePetResult::IsInitialized() const {
  return true;
}

void ServerMsgManipulatePetResult::InternalSwap(ServerMsgManipulatePetResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgManipulatePetResult, _impl_.scene_id_)
      + sizeof(ServerMsgManipulatePetResult::_impl_.scene_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgManipulatePetResult, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgManipulatePetResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[26]);
}

// ===================================================================

class ServerMsgModifyQuest::_Internal {
 public:
  static const ::base::Quest& quest(const ServerMsgModifyQuest* msg);
};

const ::base::Quest&
ServerMsgModifyQuest::_Internal::quest(const ServerMsgModifyQuest* msg) {
  return *msg->_impl_.quest_;
}
void ServerMsgModifyQuest::clear_quest() {
  if (GetArenaForAllocation() == nullptr && _impl_.quest_ != nullptr) {
    delete _impl_.quest_;
  }
  _impl_.quest_ = nullptr;
}
ServerMsgModifyQuest::ServerMsgModifyQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgModifyQuest)
}
ServerMsgModifyQuest::ServerMsgModifyQuest(const ServerMsgModifyQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgModifyQuest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quest_){nullptr}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.quest_id_){}
    , decltype(_impl_.flag_){}
    , decltype(_impl_.flag32_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quest()) {
    _this->_impl_.quest_ = new ::base::Quest(*from._impl_.quest_);
  }
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.flag32_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.flag32_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgModifyQuest)
}

inline void ServerMsgModifyQuest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quest_){nullptr}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.quest_id_){0}
    , decltype(_impl_.flag_){0}
    , decltype(_impl_.flag32_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgModifyQuest::~ServerMsgModifyQuest() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgModifyQuest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgModifyQuest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.quest_;
}

void ServerMsgModifyQuest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgModifyQuest::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgModifyQuest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.quest_ != nullptr) {
    delete _impl_.quest_;
  }
  _impl_.quest_ = nullptr;
  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.flag32_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.flag32_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgModifyQuest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quest_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 flag32 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.flag32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.Quest quest = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgModifyQuest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgModifyQuest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 quest_id = 2;
  if (this->_internal_quest_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_quest_id(), target);
  }

  // int32 flag = 3;
  if (this->_internal_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_flag(), target);
  }

  // uint32 flag32 = 4;
  if (this->_internal_flag32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_flag32(), target);
  }

  // .base.Quest quest = 5;
  if (this->_internal_has_quest()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::quest(this),
        _Internal::quest(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgModifyQuest)
  return target;
}

size_t ServerMsgModifyQuest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgModifyQuest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.Quest quest = 5;
  if (this->_internal_has_quest()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quest_);
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 quest_id = 2;
  if (this->_internal_quest_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quest_id());
  }

  // int32 flag = 3;
  if (this->_internal_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_flag());
  }

  // uint32 flag32 = 4;
  if (this->_internal_flag32() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_flag32());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgModifyQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgModifyQuest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgModifyQuest::GetClassData() const { return &_class_data_; }


void ServerMsgModifyQuest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgModifyQuest*>(&to_msg);
  auto& from = static_cast<const ServerMsgModifyQuest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgModifyQuest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest()) {
    _this->_internal_mutable_quest()->::base::Quest::MergeFrom(
        from._internal_quest());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_quest_id() != 0) {
    _this->_internal_set_quest_id(from._internal_quest_id());
  }
  if (from._internal_flag() != 0) {
    _this->_internal_set_flag(from._internal_flag());
  }
  if (from._internal_flag32() != 0) {
    _this->_internal_set_flag32(from._internal_flag32());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgModifyQuest::CopyFrom(const ServerMsgModifyQuest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgModifyQuest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgModifyQuest::IsInitialized() const {
  return true;
}

void ServerMsgModifyQuest::InternalSwap(ServerMsgModifyQuest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgModifyQuest, _impl_.flag32_)
      + sizeof(ServerMsgModifyQuest::_impl_.flag32_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgModifyQuest, _impl_.quest_)>(
          reinterpret_cast<char*>(&_impl_.quest_),
          reinterpret_cast<char*>(&other->_impl_.quest_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgModifyQuest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[27]);
}

// ===================================================================

class ServerMsgMonsterAttribute::_Internal {
 public:
  static const ::base::Flag64& flags(const ServerMsgMonsterAttribute* msg);
  static const ::base::SCampData& camp_data(const ServerMsgMonsterAttribute* msg);
};

const ::base::Flag64&
ServerMsgMonsterAttribute::_Internal::flags(const ServerMsgMonsterAttribute* msg) {
  return *msg->_impl_.flags_;
}
const ::base::SCampData&
ServerMsgMonsterAttribute::_Internal::camp_data(const ServerMsgMonsterAttribute* msg) {
  return *msg->_impl_.camp_data_;
}
void ServerMsgMonsterAttribute::clear_flags() {
  if (GetArenaForAllocation() == nullptr && _impl_.flags_ != nullptr) {
    delete _impl_.flags_;
  }
  _impl_.flags_ = nullptr;
}
void ServerMsgMonsterAttribute::clear_camp_data() {
  if (GetArenaForAllocation() == nullptr && _impl_.camp_data_ != nullptr) {
    delete _impl_.camp_data_;
  }
  _impl_.camp_data_ = nullptr;
}
ServerMsgMonsterAttribute::ServerMsgMonsterAttribute(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgMonsterAttribute)
}
ServerMsgMonsterAttribute::ServerMsgMonsterAttribute(const ServerMsgMonsterAttribute& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgMonsterAttribute* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.country_title_){}
    , decltype(_impl_.guild_title_){}
    , decltype(_impl_.normal_title_){}
    , decltype(_impl_.flags_){nullptr}
    , decltype(_impl_.camp_data_){nullptr}
    , decltype(_impl_.refresh_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.data_id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.hp_percent_){}
    , decltype(_impl_.steal_level_){}
    , decltype(_impl_.mood_state_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.attack_speed_){}
    , decltype(_impl_.portrait_id_){}
    , decltype(_impl_.model_id_){}
    , decltype(_impl_.mount_id_){}
    , decltype(_impl_.ai_type_){}
    , decltype(_impl_.country_title_type_){}
    , decltype(_impl_.guild_title_type_){}
    , decltype(_impl_.normal_title_type_){}
    , decltype(_impl_.occupant_guid_){}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.ctrl_state_){}
    , decltype(_impl_.scale_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.country_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_country_title().empty()) {
    _this->_impl_.country_title_.Set(from._internal_country_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.guild_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_guild_title().empty()) {
    _this->_impl_.guild_title_.Set(from._internal_guild_title(), 
      _this->GetArenaForAllocation());
  }
  _impl_.normal_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.normal_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_normal_title().empty()) {
    _this->_impl_.normal_title_.Set(from._internal_normal_title(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_flags()) {
    _this->_impl_.flags_ = new ::base::Flag64(*from._impl_.flags_);
  }
  if (from._internal_has_camp_data()) {
    _this->_impl_.camp_data_ = new ::base::SCampData(*from._impl_.camp_data_);
  }
  ::memcpy(&_impl_.refresh_, &from._impl_.refresh_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scale_) -
    reinterpret_cast<char*>(&_impl_.refresh_)) + sizeof(_impl_.scale_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgMonsterAttribute)
}

inline void ServerMsgMonsterAttribute::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.country_title_){}
    , decltype(_impl_.guild_title_){}
    , decltype(_impl_.normal_title_){}
    , decltype(_impl_.flags_){nullptr}
    , decltype(_impl_.camp_data_){nullptr}
    , decltype(_impl_.refresh_){0}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.data_id_){0u}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.hp_percent_){0}
    , decltype(_impl_.steal_level_){0}
    , decltype(_impl_.mood_state_){0}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.attack_speed_){0}
    , decltype(_impl_.portrait_id_){0}
    , decltype(_impl_.model_id_){0}
    , decltype(_impl_.mount_id_){0}
    , decltype(_impl_.ai_type_){0}
    , decltype(_impl_.country_title_type_){0}
    , decltype(_impl_.guild_title_type_){0}
    , decltype(_impl_.normal_title_type_){0}
    , decltype(_impl_.occupant_guid_){0u}
    , decltype(_impl_.owner_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.ctrl_state_){0}
    , decltype(_impl_.scale_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.country_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.country_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.guild_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.guild_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.normal_title_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.normal_title_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMsgMonsterAttribute::~ServerMsgMonsterAttribute() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgMonsterAttribute)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgMonsterAttribute::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  _impl_.country_title_.Destroy();
  _impl_.guild_title_.Destroy();
  _impl_.normal_title_.Destroy();
  if (this != internal_default_instance()) delete _impl_.flags_;
  if (this != internal_default_instance()) delete _impl_.camp_data_;
}

void ServerMsgMonsterAttribute::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgMonsterAttribute::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgMonsterAttribute)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.country_title_.ClearToEmpty();
  _impl_.guild_title_.ClearToEmpty();
  _impl_.normal_title_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.flags_ != nullptr) {
    delete _impl_.flags_;
  }
  _impl_.flags_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.camp_data_ != nullptr) {
    delete _impl_.camp_data_;
  }
  _impl_.camp_data_ = nullptr;
  ::memset(&_impl_.refresh_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scale_) -
      reinterpret_cast<char*>(&_impl_.refresh_)) + sizeof(_impl_.scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgMonsterAttribute::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 refresh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.refresh_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.Flag64 flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_flags(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 data_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.data_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hp_percent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.hp_percent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 steal_level = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.steal_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mood_state = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.mood_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float attack_speed = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.attack_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .base.SCampData camp_data = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_camp_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 portrait_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.portrait_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 model_id = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.model_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mount_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.mount_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ai_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          _impl_.ai_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 130)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgMonsterAttribute.name"));
        } else
          goto handle_unusual;
        continue;
      // string country_title = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          auto str = _internal_mutable_country_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgMonsterAttribute.country_title"));
        } else
          goto handle_unusual;
        continue;
      // string guild_title = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 146)) {
          auto str = _internal_mutable_guild_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgMonsterAttribute.guild_title"));
        } else
          goto handle_unusual;
        continue;
      // string normal_title = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 154)) {
          auto str = _internal_mutable_normal_title();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgMonsterAttribute.normal_title"));
        } else
          goto handle_unusual;
        continue;
      // int32 country_title_type = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          _impl_.country_title_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 guild_title_type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          _impl_.guild_title_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 normal_title_type = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          _impl_.normal_title_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 occupant_guid = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          _impl_.occupant_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 owner_id = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float dir = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 213)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 ctrl_state = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          _impl_.ctrl_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float scale = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 229)) {
          _impl_.scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgMonsterAttribute::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgMonsterAttribute)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 refresh = 1;
  if (this->_internal_refresh() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_refresh(), target);
  }

  // .base.Flag64 flags = 2;
  if (this->_internal_has_flags()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::flags(this),
        _Internal::flags(this).GetCachedSize(), target, stream);
  }

  // int32 object_id = 3;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_object_id(), target);
  }

  // uint32 data_id = 4;
  if (this->_internal_data_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_data_id(), target);
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_level(), target);
  }

  // int32 hp_percent = 6;
  if (this->_internal_hp_percent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_hp_percent(), target);
  }

  // int32 steal_level = 7;
  if (this->_internal_steal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_steal_level(), target);
  }

  // int32 mood_state = 8;
  if (this->_internal_mood_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_mood_state(), target);
  }

  // float move_speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_move_speed(), target);
  }

  // float attack_speed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = this->_internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_attack_speed(), target);
  }

  // .base.SCampData camp_data = 11;
  if (this->_internal_has_camp_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::camp_data(this),
        _Internal::camp_data(this).GetCachedSize(), target, stream);
  }

  // int32 portrait_id = 12;
  if (this->_internal_portrait_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_portrait_id(), target);
  }

  // int32 model_id = 13;
  if (this->_internal_model_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_model_id(), target);
  }

  // int32 mount_id = 14;
  if (this->_internal_mount_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_mount_id(), target);
  }

  // int32 ai_type = 15;
  if (this->_internal_ai_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(15, this->_internal_ai_type(), target);
  }

  // string name = 16;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgMonsterAttribute.name");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_name(), target);
  }

  // string country_title = 17;
  if (!this->_internal_country_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_country_title().data(), static_cast<int>(this->_internal_country_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgMonsterAttribute.country_title");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_country_title(), target);
  }

  // string guild_title = 18;
  if (!this->_internal_guild_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_guild_title().data(), static_cast<int>(this->_internal_guild_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgMonsterAttribute.guild_title");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_guild_title(), target);
  }

  // string normal_title = 19;
  if (!this->_internal_normal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_normal_title().data(), static_cast<int>(this->_internal_normal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgMonsterAttribute.normal_title");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_normal_title(), target);
  }

  // int32 country_title_type = 20;
  if (this->_internal_country_title_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(20, this->_internal_country_title_type(), target);
  }

  // int32 guild_title_type = 21;
  if (this->_internal_guild_title_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(21, this->_internal_guild_title_type(), target);
  }

  // int32 normal_title_type = 22;
  if (this->_internal_normal_title_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(22, this->_internal_normal_title_type(), target);
  }

  // uint32 occupant_guid = 23;
  if (this->_internal_occupant_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(23, this->_internal_occupant_guid(), target);
  }

  // int32 owner_id = 24;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(24, this->_internal_owner_id(), target);
  }

  // int32 target_id = 25;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(25, this->_internal_target_id(), target);
  }

  // float dir = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(26, this->_internal_dir(), target);
  }

  // int32 ctrl_state = 27;
  if (this->_internal_ctrl_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(27, this->_internal_ctrl_state(), target);
  }

  // float scale = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = this->_internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(28, this->_internal_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgMonsterAttribute)
  return target;
}

size_t ServerMsgMonsterAttribute::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgMonsterAttribute)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 16;
  if (!this->_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string country_title = 17;
  if (!this->_internal_country_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country_title());
  }

  // string guild_title = 18;
  if (!this->_internal_guild_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_guild_title());
  }

  // string normal_title = 19;
  if (!this->_internal_normal_title().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_normal_title());
  }

  // .base.Flag64 flags = 2;
  if (this->_internal_has_flags()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.flags_);
  }

  // .base.SCampData camp_data = 11;
  if (this->_internal_has_camp_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.camp_data_);
  }

  // int32 refresh = 1;
  if (this->_internal_refresh() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_refresh());
  }

  // int32 object_id = 3;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // uint32 data_id = 4;
  if (this->_internal_data_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_data_id());
  }

  // int32 level = 5;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 hp_percent = 6;
  if (this->_internal_hp_percent() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hp_percent());
  }

  // int32 steal_level = 7;
  if (this->_internal_steal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_steal_level());
  }

  // int32 mood_state = 8;
  if (this->_internal_mood_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mood_state());
  }

  // float move_speed = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  // float attack_speed = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = this->_internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    total_size += 1 + 4;
  }

  // int32 portrait_id = 12;
  if (this->_internal_portrait_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_portrait_id());
  }

  // int32 model_id = 13;
  if (this->_internal_model_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_model_id());
  }

  // int32 mount_id = 14;
  if (this->_internal_mount_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mount_id());
  }

  // int32 ai_type = 15;
  if (this->_internal_ai_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ai_type());
  }

  // int32 country_title_type = 20;
  if (this->_internal_country_title_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_country_title_type());
  }

  // int32 guild_title_type = 21;
  if (this->_internal_guild_title_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_guild_title_type());
  }

  // int32 normal_title_type = 22;
  if (this->_internal_normal_title_type() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_normal_title_type());
  }

  // uint32 occupant_guid = 23;
  if (this->_internal_occupant_guid() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_occupant_guid());
  }

  // int32 owner_id = 24;
  if (this->_internal_owner_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_owner_id());
  }

  // int32 target_id = 25;
  if (this->_internal_target_id() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_target_id());
  }

  // float dir = 26;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    total_size += 2 + 4;
  }

  // int32 ctrl_state = 27;
  if (this->_internal_ctrl_state() != 0) {
    total_size += 2 +
      ::_pbi::WireFormatLite::Int32Size(
        this->_internal_ctrl_state());
  }

  // float scale = 28;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = this->_internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    total_size += 2 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgMonsterAttribute::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgMonsterAttribute::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgMonsterAttribute::GetClassData() const { return &_class_data_; }


void ServerMsgMonsterAttribute::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgMonsterAttribute*>(&to_msg);
  auto& from = static_cast<const ServerMsgMonsterAttribute&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgMonsterAttribute)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_country_title().empty()) {
    _this->_internal_set_country_title(from._internal_country_title());
  }
  if (!from._internal_guild_title().empty()) {
    _this->_internal_set_guild_title(from._internal_guild_title());
  }
  if (!from._internal_normal_title().empty()) {
    _this->_internal_set_normal_title(from._internal_normal_title());
  }
  if (from._internal_has_flags()) {
    _this->_internal_mutable_flags()->::base::Flag64::MergeFrom(
        from._internal_flags());
  }
  if (from._internal_has_camp_data()) {
    _this->_internal_mutable_camp_data()->::base::SCampData::MergeFrom(
        from._internal_camp_data());
  }
  if (from._internal_refresh() != 0) {
    _this->_internal_set_refresh(from._internal_refresh());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_data_id() != 0) {
    _this->_internal_set_data_id(from._internal_data_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_hp_percent() != 0) {
    _this->_internal_set_hp_percent(from._internal_hp_percent());
  }
  if (from._internal_steal_level() != 0) {
    _this->_internal_set_steal_level(from._internal_steal_level());
  }
  if (from._internal_mood_state() != 0) {
    _this->_internal_set_mood_state(from._internal_mood_state());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_attack_speed = from._internal_attack_speed();
  uint32_t raw_attack_speed;
  memcpy(&raw_attack_speed, &tmp_attack_speed, sizeof(tmp_attack_speed));
  if (raw_attack_speed != 0) {
    _this->_internal_set_attack_speed(from._internal_attack_speed());
  }
  if (from._internal_portrait_id() != 0) {
    _this->_internal_set_portrait_id(from._internal_portrait_id());
  }
  if (from._internal_model_id() != 0) {
    _this->_internal_set_model_id(from._internal_model_id());
  }
  if (from._internal_mount_id() != 0) {
    _this->_internal_set_mount_id(from._internal_mount_id());
  }
  if (from._internal_ai_type() != 0) {
    _this->_internal_set_ai_type(from._internal_ai_type());
  }
  if (from._internal_country_title_type() != 0) {
    _this->_internal_set_country_title_type(from._internal_country_title_type());
  }
  if (from._internal_guild_title_type() != 0) {
    _this->_internal_set_guild_title_type(from._internal_guild_title_type());
  }
  if (from._internal_normal_title_type() != 0) {
    _this->_internal_set_normal_title_type(from._internal_normal_title_type());
  }
  if (from._internal_occupant_guid() != 0) {
    _this->_internal_set_occupant_guid(from._internal_occupant_guid());
  }
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = from._internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_ctrl_state() != 0) {
    _this->_internal_set_ctrl_state(from._internal_ctrl_state());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_scale = from._internal_scale();
  uint32_t raw_scale;
  memcpy(&raw_scale, &tmp_scale, sizeof(tmp_scale));
  if (raw_scale != 0) {
    _this->_internal_set_scale(from._internal_scale());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgMonsterAttribute::CopyFrom(const ServerMsgMonsterAttribute& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgMonsterAttribute)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgMonsterAttribute::IsInitialized() const {
  return true;
}

void ServerMsgMonsterAttribute::InternalSwap(ServerMsgMonsterAttribute* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.country_title_, lhs_arena,
      &other->_impl_.country_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.guild_title_, lhs_arena,
      &other->_impl_.guild_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.normal_title_, lhs_arena,
      &other->_impl_.normal_title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgMonsterAttribute, _impl_.scale_)
      + sizeof(ServerMsgMonsterAttribute::_impl_.scale_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgMonsterAttribute, _impl_.flags_)>(
          reinterpret_cast<char*>(&_impl_.flags_),
          reinterpret_cast<char*>(&other->_impl_.flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgMonsterAttribute::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[28]);
}

// ===================================================================

class ServerMsgNewBeastie::_Internal {
 public:
};

ServerMsgNewBeastie::ServerMsgNewBeastie(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgNewBeastie)
}
ServerMsgNewBeastie::ServerMsgNewBeastie(const ServerMsgNewBeastie& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgNewBeastie* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_z_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.moving_){}
    , decltype(_impl_.handle_id_){}
    , decltype(_impl_.target_x_){}
    , decltype(_impl_.target_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.target_z_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.target_z_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgNewBeastie)
}

inline void ServerMsgNewBeastie::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.object_id_){0u}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_z_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.moving_){false}
    , decltype(_impl_.handle_id_){0}
    , decltype(_impl_.target_x_){0}
    , decltype(_impl_.target_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMsgNewBeastie::~ServerMsgNewBeastie() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgNewBeastie)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgNewBeastie::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ServerMsgNewBeastie::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgNewBeastie::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgNewBeastie)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.target_z_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.target_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgNewBeastie::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgNewBeastie.name"));
        } else
          goto handle_unusual;
        continue;
      // float position_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool moving = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.moving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 handle_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.handle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float target_x = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          _impl_.target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float target_z = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 85)) {
          _impl_.target_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgNewBeastie::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgNewBeastie)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_object_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgNewBeastie.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float position_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_position_x(), target);
  }

  // float position_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = this->_internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_position_z(), target);
  }

  // float dir = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_dir(), target);
  }

  // float move_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_move_speed(), target);
  }

  // bool moving = 7;
  if (this->_internal_moving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_moving(), target);
  }

  // int32 handle_id = 8;
  if (this->_internal_handle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_handle_id(), target);
  }

  // float target_x = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(9, this->_internal_target_x(), target);
  }

  // float target_z = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_z = this->_internal_target_z();
  uint32_t raw_target_z;
  memcpy(&raw_target_z, &tmp_target_z, sizeof(tmp_target_z));
  if (raw_target_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(10, this->_internal_target_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgNewBeastie)
  return target;
}

size_t ServerMsgNewBeastie::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgNewBeastie)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_object_id());
  }

  // float position_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // float position_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = this->_internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    total_size += 1 + 4;
  }

  // float dir = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    total_size += 1 + 4;
  }

  // float move_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  // bool moving = 7;
  if (this->_internal_moving() != 0) {
    total_size += 1 + 1;
  }

  // int32 handle_id = 8;
  if (this->_internal_handle_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle_id());
  }

  // float target_x = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    total_size += 1 + 4;
  }

  // float target_z = 10;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_z = this->_internal_target_z();
  uint32_t raw_target_z;
  memcpy(&raw_target_z, &tmp_target_z, sizeof(tmp_target_z));
  if (raw_target_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgNewBeastie::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgNewBeastie::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgNewBeastie::GetClassData() const { return &_class_data_; }


void ServerMsgNewBeastie::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgNewBeastie*>(&to_msg);
  auto& from = static_cast<const ServerMsgNewBeastie&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgNewBeastie)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = from._internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    _this->_internal_set_position_z(from._internal_position_z());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = from._internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  if (from._internal_moving() != 0) {
    _this->_internal_set_moving(from._internal_moving());
  }
  if (from._internal_handle_id() != 0) {
    _this->_internal_set_handle_id(from._internal_handle_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = from._internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    _this->_internal_set_target_x(from._internal_target_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_z = from._internal_target_z();
  uint32_t raw_target_z;
  memcpy(&raw_target_z, &tmp_target_z, sizeof(tmp_target_z));
  if (raw_target_z != 0) {
    _this->_internal_set_target_z(from._internal_target_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgNewBeastie::CopyFrom(const ServerMsgNewBeastie& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgNewBeastie)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgNewBeastie::IsInitialized() const {
  return true;
}

void ServerMsgNewBeastie::InternalSwap(ServerMsgNewBeastie* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgNewBeastie, _impl_.target_z_)
      + sizeof(ServerMsgNewBeastie::_impl_.target_z_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgNewBeastie, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgNewBeastie::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[29]);
}

// ===================================================================

class ServerMsgNewItem::_Internal {
 public:
};

ServerMsgNewItem::ServerMsgNewItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgNewItem)
}
ServerMsgNewItem::ServerMsgNewItem(const ServerMsgNewItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgNewItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.item_index_){}
    , decltype(_impl_.item_count_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_z_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.position_z_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgNewItem)
}

inline void ServerMsgNewItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.scene_id_){0}
    , decltype(_impl_.item_index_){0}
    , decltype(_impl_.item_count_){0}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgNewItem::~ServerMsgNewItem() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgNewItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgNewItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgNewItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgNewItem::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgNewItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.position_z_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.position_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgNewItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.item_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.item_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgNewItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgNewItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // int32 item_index = 3;
  if (this->_internal_item_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_item_index(), target);
  }

  // int32 item_count = 4;
  if (this->_internal_item_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_item_count(), target);
  }

  // float position_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_position_x(), target);
  }

  // float position_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = this->_internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_position_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgNewItem)
  return target;
}

size_t ServerMsgNewItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgNewItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  // int32 item_index = 3;
  if (this->_internal_item_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_index());
  }

  // int32 item_count = 4;
  if (this->_internal_item_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_count());
  }

  // float position_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // float position_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = this->_internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgNewItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgNewItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgNewItem::GetClassData() const { return &_class_data_; }


void ServerMsgNewItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgNewItem*>(&to_msg);
  auto& from = static_cast<const ServerMsgNewItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgNewItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_item_index() != 0) {
    _this->_internal_set_item_index(from._internal_item_index());
  }
  if (from._internal_item_count() != 0) {
    _this->_internal_set_item_count(from._internal_item_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = from._internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    _this->_internal_set_position_z(from._internal_position_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgNewItem::CopyFrom(const ServerMsgNewItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgNewItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgNewItem::IsInitialized() const {
  return true;
}

void ServerMsgNewItem::InternalSwap(ServerMsgNewItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgNewItem, _impl_.position_z_)
      + sizeof(ServerMsgNewItem::_impl_.position_z_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgNewItem, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgNewItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[30]);
}

// ===================================================================

class ServerMsgNewItemBox::_Internal {
 public:
  static const ::base::GLPos& pos(const ServerMsgNewItemBox* msg);
};

const ::base::GLPos&
ServerMsgNewItemBox::_Internal::pos(const ServerMsgNewItemBox* msg) {
  return *msg->_impl_.pos_;
}
void ServerMsgNewItemBox::clear_pos() {
  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
}
ServerMsgNewItemBox::ServerMsgNewItemBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgNewItemBox)
}
ServerMsgNewItemBox::ServerMsgNewItemBox(const ServerMsgNewItemBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgNewItemBox* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.owner_id_){}
    , decltype(_impl_.scene_id_){}
    , decltype(_impl_.drop_monster_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_pos()) {
    _this->_impl_.pos_ = new ::base::GLPos(*from._impl_.pos_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.drop_monster_id_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.drop_monster_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgNewItemBox)
}

inline void ServerMsgNewItemBox::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pos_){nullptr}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.owner_id_){0u}
    , decltype(_impl_.scene_id_){0}
    , decltype(_impl_.drop_monster_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgNewItemBox::~ServerMsgNewItemBox() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgNewItemBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgNewItemBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.pos_;
}

void ServerMsgNewItemBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgNewItemBox::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgNewItemBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.pos_ != nullptr) {
    delete _impl_.pos_;
  }
  _impl_.pos_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.drop_monster_id_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.drop_monster_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgNewItemBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 owner_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.owner_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.GLPos pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 drop_monster_id = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.drop_monster_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgNewItemBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgNewItemBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // uint32 owner_id = 3;
  if (this->_internal_owner_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_owner_id(), target);
  }

  // int32 scene_id = 4;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_scene_id(), target);
  }

  // .base.GLPos pos = 5;
  if (this->_internal_has_pos()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::pos(this),
        _Internal::pos(this).GetCachedSize(), target, stream);
  }

  // int32 drop_monster_id = 6;
  if (this->_internal_drop_monster_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_drop_monster_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgNewItemBox)
  return target;
}

size_t ServerMsgNewItemBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgNewItemBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.GLPos pos = 5;
  if (this->_internal_has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pos_);
  }

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // uint32 owner_id = 3;
  if (this->_internal_owner_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_owner_id());
  }

  // int32 scene_id = 4;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  // int32 drop_monster_id = 6;
  if (this->_internal_drop_monster_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_drop_monster_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgNewItemBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgNewItemBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgNewItemBox::GetClassData() const { return &_class_data_; }


void ServerMsgNewItemBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgNewItemBox*>(&to_msg);
  auto& from = static_cast<const ServerMsgNewItemBox&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgNewItemBox)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_pos()) {
    _this->_internal_mutable_pos()->::base::GLPos::MergeFrom(
        from._internal_pos());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_owner_id() != 0) {
    _this->_internal_set_owner_id(from._internal_owner_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  if (from._internal_drop_monster_id() != 0) {
    _this->_internal_set_drop_monster_id(from._internal_drop_monster_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgNewItemBox::CopyFrom(const ServerMsgNewItemBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgNewItemBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgNewItemBox::IsInitialized() const {
  return true;
}

void ServerMsgNewItemBox::InternalSwap(ServerMsgNewItemBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgNewItemBox, _impl_.drop_monster_id_)
      + sizeof(ServerMsgNewItemBox::_impl_.drop_monster_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgNewItemBox, _impl_.pos_)>(
          reinterpret_cast<char*>(&_impl_.pos_),
          reinterpret_cast<char*>(&other->_impl_.pos_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgNewItemBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[31]);
}

// ===================================================================

class ServerMsgNewMonster::_Internal {
 public:
};

ServerMsgNewMonster::ServerMsgNewMonster(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgNewMonster)
}
ServerMsgNewMonster::ServerMsgNewMonster(const ServerMsgNewMonster& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgNewMonster* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.positiion_y_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.move_speed_){}
    , decltype(_impl_.horse_id_){}
    , decltype(_impl_.weapon_id_){}
    , decltype(_impl_.monster_type_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.race_id_){}
    , decltype(_impl_.camp_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.camp_id_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.camp_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgNewMonster)
}

inline void ServerMsgNewMonster::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.object_id_){0u}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.positiion_y_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.move_speed_){0}
    , decltype(_impl_.horse_id_){0}
    , decltype(_impl_.weapon_id_){0}
    , decltype(_impl_.monster_type_){0}
    , decltype(_impl_.guid_){0u}
    , decltype(_impl_.race_id_){0}
    , decltype(_impl_.camp_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMsgNewMonster::~ServerMsgNewMonster() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgNewMonster)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgNewMonster::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ServerMsgNewMonster::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgNewMonster::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgNewMonster)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.camp_id_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.camp_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgNewMonster::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgNewMonster.name"));
        } else
          goto handle_unusual;
        continue;
      // float position_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float positiion_y = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.positiion_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dir = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float move_speed = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.move_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float horse_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.horse_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float weapon_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.weapon_id_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 monster_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.monster_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 guid = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 race_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          _impl_.race_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 camp_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _impl_.camp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgNewMonster::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgNewMonster)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_object_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgNewMonster.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // float position_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_position_x(), target);
  }

  // float positiion_y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positiion_y = this->_internal_positiion_y();
  uint32_t raw_positiion_y;
  memcpy(&raw_positiion_y, &tmp_positiion_y, sizeof(tmp_positiion_y));
  if (raw_positiion_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_positiion_y(), target);
  }

  // float dir = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_dir(), target);
  }

  // float move_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_move_speed(), target);
  }

  // float horse_id = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horse_id = this->_internal_horse_id();
  uint32_t raw_horse_id;
  memcpy(&raw_horse_id, &tmp_horse_id, sizeof(tmp_horse_id));
  if (raw_horse_id != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_horse_id(), target);
  }

  // float weapon_id = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_id = this->_internal_weapon_id();
  uint32_t raw_weapon_id;
  memcpy(&raw_weapon_id, &tmp_weapon_id, sizeof(tmp_weapon_id));
  if (raw_weapon_id != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_weapon_id(), target);
  }

  // int32 monster_type = 9;
  if (this->_internal_monster_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_monster_type(), target);
  }

  // uint32 guid = 10;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(10, this->_internal_guid(), target);
  }

  // int32 race_id = 11;
  if (this->_internal_race_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(11, this->_internal_race_id(), target);
  }

  // int32 camp_id = 12;
  if (this->_internal_camp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(12, this->_internal_camp_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgNewMonster)
  return target;
}

size_t ServerMsgNewMonster::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgNewMonster)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_object_id());
  }

  // float position_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // float positiion_y = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positiion_y = this->_internal_positiion_y();
  uint32_t raw_positiion_y;
  memcpy(&raw_positiion_y, &tmp_positiion_y, sizeof(tmp_positiion_y));
  if (raw_positiion_y != 0) {
    total_size += 1 + 4;
  }

  // float dir = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    total_size += 1 + 4;
  }

  // float move_speed = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = this->_internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    total_size += 1 + 4;
  }

  // float horse_id = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horse_id = this->_internal_horse_id();
  uint32_t raw_horse_id;
  memcpy(&raw_horse_id, &tmp_horse_id, sizeof(tmp_horse_id));
  if (raw_horse_id != 0) {
    total_size += 1 + 4;
  }

  // float weapon_id = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_id = this->_internal_weapon_id();
  uint32_t raw_weapon_id;
  memcpy(&raw_weapon_id, &tmp_weapon_id, sizeof(tmp_weapon_id));
  if (raw_weapon_id != 0) {
    total_size += 1 + 4;
  }

  // int32 monster_type = 9;
  if (this->_internal_monster_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_monster_type());
  }

  // uint32 guid = 10;
  if (this->_internal_guid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guid());
  }

  // int32 race_id = 11;
  if (this->_internal_race_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_race_id());
  }

  // int32 camp_id = 12;
  if (this->_internal_camp_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camp_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgNewMonster::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgNewMonster::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgNewMonster::GetClassData() const { return &_class_data_; }


void ServerMsgNewMonster::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgNewMonster*>(&to_msg);
  auto& from = static_cast<const ServerMsgNewMonster&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgNewMonster)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_positiion_y = from._internal_positiion_y();
  uint32_t raw_positiion_y;
  memcpy(&raw_positiion_y, &tmp_positiion_y, sizeof(tmp_positiion_y));
  if (raw_positiion_y != 0) {
    _this->_internal_set_positiion_y(from._internal_positiion_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = from._internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_move_speed = from._internal_move_speed();
  uint32_t raw_move_speed;
  memcpy(&raw_move_speed, &tmp_move_speed, sizeof(tmp_move_speed));
  if (raw_move_speed != 0) {
    _this->_internal_set_move_speed(from._internal_move_speed());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_horse_id = from._internal_horse_id();
  uint32_t raw_horse_id;
  memcpy(&raw_horse_id, &tmp_horse_id, sizeof(tmp_horse_id));
  if (raw_horse_id != 0) {
    _this->_internal_set_horse_id(from._internal_horse_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_weapon_id = from._internal_weapon_id();
  uint32_t raw_weapon_id;
  memcpy(&raw_weapon_id, &tmp_weapon_id, sizeof(tmp_weapon_id));
  if (raw_weapon_id != 0) {
    _this->_internal_set_weapon_id(from._internal_weapon_id());
  }
  if (from._internal_monster_type() != 0) {
    _this->_internal_set_monster_type(from._internal_monster_type());
  }
  if (from._internal_guid() != 0) {
    _this->_internal_set_guid(from._internal_guid());
  }
  if (from._internal_race_id() != 0) {
    _this->_internal_set_race_id(from._internal_race_id());
  }
  if (from._internal_camp_id() != 0) {
    _this->_internal_set_camp_id(from._internal_camp_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgNewMonster::CopyFrom(const ServerMsgNewMonster& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgNewMonster)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgNewMonster::IsInitialized() const {
  return true;
}

void ServerMsgNewMonster::InternalSwap(ServerMsgNewMonster* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgNewMonster, _impl_.camp_id_)
      + sizeof(ServerMsgNewMonster::_impl_.camp_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgNewMonster, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgNewMonster::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[32]);
}

// ===================================================================

class ServerMsgNotifyEquip::_Internal {
 public:
  static const ::base::SItem& item(const ServerMsgNotifyEquip* msg);
};

const ::base::SItem&
ServerMsgNotifyEquip::_Internal::item(const ServerMsgNotifyEquip* msg) {
  return *msg->_impl_.item_;
}
void ServerMsgNotifyEquip::clear_item() {
  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
}
ServerMsgNotifyEquip::ServerMsgNotifyEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgNotifyEquip)
}
ServerMsgNotifyEquip::ServerMsgNotifyEquip(const ServerMsgNotifyEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgNotifyEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.bag_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item()) {
    _this->_impl_.item_ = new ::base::SItem(*from._impl_.item_);
  }
  _this->_impl_.bag_index_ = from._impl_.bag_index_;
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgNotifyEquip)
}

inline void ServerMsgNotifyEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_){nullptr}
    , decltype(_impl_.bag_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgNotifyEquip::~ServerMsgNotifyEquip() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgNotifyEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgNotifyEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_;
}

void ServerMsgNotifyEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgNotifyEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgNotifyEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_ != nullptr) {
    delete _impl_.item_;
  }
  _impl_.item_ = nullptr;
  _impl_.bag_index_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgNotifyEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 bag_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.bag_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SItem item = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgNotifyEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgNotifyEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 bag_index = 1;
  if (this->_internal_bag_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_bag_index(), target);
  }

  // .base.SItem item = 2;
  if (this->_internal_has_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::item(this),
        _Internal::item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgNotifyEquip)
  return target;
}

size_t ServerMsgNotifyEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgNotifyEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.SItem item = 2;
  if (this->_internal_has_item()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_);
  }

  // int32 bag_index = 1;
  if (this->_internal_bag_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bag_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgNotifyEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgNotifyEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgNotifyEquip::GetClassData() const { return &_class_data_; }


void ServerMsgNotifyEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgNotifyEquip*>(&to_msg);
  auto& from = static_cast<const ServerMsgNotifyEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgNotifyEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item()) {
    _this->_internal_mutable_item()->::base::SItem::MergeFrom(
        from._internal_item());
  }
  if (from._internal_bag_index() != 0) {
    _this->_internal_set_bag_index(from._internal_bag_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgNotifyEquip::CopyFrom(const ServerMsgNotifyEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgNotifyEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgNotifyEquip::IsInitialized() const {
  return true;
}

void ServerMsgNotifyEquip::InternalSwap(ServerMsgNotifyEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgNotifyEquip, _impl_.bag_index_)
      + sizeof(ServerMsgNotifyEquip::_impl_.bag_index_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgNotifyEquip, _impl_.item_)>(
          reinterpret_cast<char*>(&_impl_.item_),
          reinterpret_cast<char*>(&other->_impl_.item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgNotifyEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[33]);
}

// ===================================================================

class ServerMsgOperateResult::_Internal {
 public:
};

ServerMsgOperateResult::ServerMsgOperateResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgOperateResult)
}
ServerMsgOperateResult::ServerMsgOperateResult(const ServerMsgOperateResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgOperateResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.res_type_){}
    , decltype(_impl_.result_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_code_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.result_code_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgOperateResult)
}

inline void ServerMsgOperateResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.res_type_){0}
    , decltype(_impl_.result_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgOperateResult::~ServerMsgOperateResult() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgOperateResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgOperateResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgOperateResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgOperateResult::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgOperateResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_code_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.result_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgOperateResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 res_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.res_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result_code = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgOperateResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgOperateResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 res_type = 3;
  if (this->_internal_res_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_res_type(), target);
  }

  // int32 result_code = 4;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgOperateResult)
  return target;
}

size_t ServerMsgOperateResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgOperateResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 res_type = 3;
  if (this->_internal_res_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_res_type());
  }

  // int32 result_code = 4;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgOperateResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgOperateResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgOperateResult::GetClassData() const { return &_class_data_; }


void ServerMsgOperateResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgOperateResult*>(&to_msg);
  auto& from = static_cast<const ServerMsgOperateResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgOperateResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_res_type() != 0) {
    _this->_internal_set_res_type(from._internal_res_type());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgOperateResult::CopyFrom(const ServerMsgOperateResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgOperateResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgOperateResult::IsInitialized() const {
  return true;
}

void ServerMsgOperateResult::InternalSwap(ServerMsgOperateResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgOperateResult, _impl_.result_code_)
      + sizeof(ServerMsgOperateResult::_impl_.result_code_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgOperateResult, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgOperateResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[34]);
}

// ===================================================================

class ServerMsgPickItemResult::_Internal {
 public:
};

ServerMsgPickItemResult::ServerMsgPickItemResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgPickItemResult)
}
ServerMsgPickItemResult::ServerMsgPickItemResult(const ServerMsgPickItemResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgPickItemResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.result_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.result_code_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.result_code_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgPickItemResult)
}

inline void ServerMsgPickItemResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.result_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgPickItemResult::~ServerMsgPickItemResult() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgPickItemResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgPickItemResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgPickItemResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgPickItemResult::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgPickItemResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.result_code_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.result_code_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgPickItemResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 result_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.result_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgPickItemResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgPickItemResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_result_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgPickItemResult)
  return target;
}

size_t ServerMsgPickItemResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgPickItemResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 result_code = 2;
  if (this->_internal_result_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgPickItemResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgPickItemResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgPickItemResult::GetClassData() const { return &_class_data_; }


void ServerMsgPickItemResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgPickItemResult*>(&to_msg);
  auto& from = static_cast<const ServerMsgPickItemResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgPickItemResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_result_code() != 0) {
    _this->_internal_set_result_code(from._internal_result_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgPickItemResult::CopyFrom(const ServerMsgPickItemResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgPickItemResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgPickItemResult::IsInitialized() const {
  return true;
}

void ServerMsgPickItemResult::InternalSwap(ServerMsgPickItemResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgPickItemResult, _impl_.result_code_)
      + sizeof(ServerMsgPickItemResult::_impl_.result_code_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgPickItemResult, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgPickItemResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[35]);
}

// ===================================================================

class ServerMsgQueryEventResult::_Internal {
 public:
};

ServerMsgQueryEventResult::ServerMsgQueryEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgQueryEventResult)
}
ServerMsgQueryEventResult::ServerMsgQueryEventResult(const ServerMsgQueryEventResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgQueryEventResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.object_id_ = from._impl_.object_id_;
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgQueryEventResult)
}

inline void ServerMsgQueryEventResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgQueryEventResult::~ServerMsgQueryEventResult() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgQueryEventResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgQueryEventResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgQueryEventResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgQueryEventResult::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgQueryEventResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgQueryEventResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgQueryEventResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgQueryEventResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgQueryEventResult)
  return target;
}

size_t ServerMsgQueryEventResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgQueryEventResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgQueryEventResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgQueryEventResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgQueryEventResult::GetClassData() const { return &_class_data_; }


void ServerMsgQueryEventResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgQueryEventResult*>(&to_msg);
  auto& from = static_cast<const ServerMsgQueryEventResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgQueryEventResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgQueryEventResult::CopyFrom(const ServerMsgQueryEventResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgQueryEventResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgQueryEventResult::IsInitialized() const {
  return true;
}

void ServerMsgQueryEventResult::InternalSwap(ServerMsgQueryEventResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.object_id_, other->_impl_.object_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgQueryEventResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[36]);
}

// ===================================================================

class ServerMsgQuestList::_Internal {
 public:
  static const ::base::SArchiveLoader_Quest& quest_list(const ServerMsgQuestList* msg);
};

const ::base::SArchiveLoader_Quest&
ServerMsgQuestList::_Internal::quest_list(const ServerMsgQuestList* msg) {
  return *msg->_impl_.quest_list_;
}
void ServerMsgQuestList::clear_quest_list() {
  if (GetArenaForAllocation() == nullptr && _impl_.quest_list_ != nullptr) {
    delete _impl_.quest_list_;
  }
  _impl_.quest_list_ = nullptr;
}
ServerMsgQuestList::ServerMsgQuestList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgQuestList)
}
ServerMsgQuestList::ServerMsgQuestList(const ServerMsgQuestList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgQuestList* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quest_list_){nullptr}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quest_list()) {
    _this->_impl_.quest_list_ = new ::base::SArchiveLoader_Quest(*from._impl_.quest_list_);
  }
  _this->_impl_.player_id_ = from._impl_.player_id_;
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgQuestList)
}

inline void ServerMsgQuestList::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quest_list_){nullptr}
    , decltype(_impl_.player_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgQuestList::~ServerMsgQuestList() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgQuestList)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgQuestList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.quest_list_;
}

void ServerMsgQuestList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgQuestList::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgQuestList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.quest_list_ != nullptr) {
    delete _impl_.quest_list_;
  }
  _impl_.quest_list_ = nullptr;
  _impl_.player_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgQuestList::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SArchiveLoader_Quest quest_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest_list(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgQuestList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgQuestList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // .base.SArchiveLoader_Quest quest_list = 2;
  if (this->_internal_has_quest_list()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::quest_list(this),
        _Internal::quest_list(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgQuestList)
  return target;
}

size_t ServerMsgQuestList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgQuestList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.SArchiveLoader_Quest quest_list = 2;
  if (this->_internal_has_quest_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quest_list_);
  }

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgQuestList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgQuestList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgQuestList::GetClassData() const { return &_class_data_; }


void ServerMsgQuestList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgQuestList*>(&to_msg);
  auto& from = static_cast<const ServerMsgQuestList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgQuestList)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quest_list()) {
    _this->_internal_mutable_quest_list()->::base::SArchiveLoader_Quest::MergeFrom(
        from._internal_quest_list());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgQuestList::CopyFrom(const ServerMsgQuestList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgQuestList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgQuestList::IsInitialized() const {
  return true;
}

void ServerMsgQuestList::InternalSwap(ServerMsgQuestList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgQuestList, _impl_.player_id_)
      + sizeof(ServerMsgQuestList::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgQuestList, _impl_.quest_list_)>(
          reinterpret_cast<char*>(&_impl_.quest_list_),
          reinterpret_cast<char*>(&other->_impl_.quest_list_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgQuestList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[37]);
}

// ===================================================================

class ServerMsgQuestListRefresh::_Internal {
 public:
};

ServerMsgQuestListRefresh::ServerMsgQuestListRefresh(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgQuestListRefresh)
}
ServerMsgQuestListRefresh::ServerMsgQuestListRefresh(const ServerMsgQuestListRefresh& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgQuestListRefresh* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.scene_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.scene_id_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.scene_id_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgQuestListRefresh)
}

inline void ServerMsgQuestListRefresh::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.scene_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgQuestListRefresh::~ServerMsgQuestListRefresh() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgQuestListRefresh)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgQuestListRefresh::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgQuestListRefresh::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgQuestListRefresh::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgQuestListRefresh)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.scene_id_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgQuestListRefresh::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgQuestListRefresh::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgQuestListRefresh)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgQuestListRefresh)
  return target;
}

size_t ServerMsgQuestListRefresh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgQuestListRefresh)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 scene_id = 2;
  if (this->_internal_scene_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_scene_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgQuestListRefresh::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgQuestListRefresh::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgQuestListRefresh::GetClassData() const { return &_class_data_; }


void ServerMsgQuestListRefresh::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgQuestListRefresh*>(&to_msg);
  auto& from = static_cast<const ServerMsgQuestListRefresh&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgQuestListRefresh)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_scene_id() != 0) {
    _this->_internal_set_scene_id(from._internal_scene_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgQuestListRefresh::CopyFrom(const ServerMsgQuestListRefresh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgQuestListRefresh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgQuestListRefresh::IsInitialized() const {
  return true;
}

void ServerMsgQuestListRefresh::InternalSwap(ServerMsgQuestListRefresh* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgQuestListRefresh, _impl_.scene_id_)
      + sizeof(ServerMsgQuestListRefresh::_impl_.scene_id_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgQuestListRefresh, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgQuestListRefresh::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[38]);
}

// ===================================================================

class ServerMsgSkillSettingResult::_Internal {
 public:
  static const ::base::Player_Setting& setting(const ServerMsgSkillSettingResult* msg);
};

const ::base::Player_Setting&
ServerMsgSkillSettingResult::_Internal::setting(const ServerMsgSkillSettingResult* msg) {
  return *msg->_impl_.setting_;
}
void ServerMsgSkillSettingResult::clear_setting() {
  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
}
ServerMsgSkillSettingResult::ServerMsgSkillSettingResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgSkillSettingResult)
}
ServerMsgSkillSettingResult::ServerMsgSkillSettingResult(const ServerMsgSkillSettingResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgSkillSettingResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.setting_){nullptr}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_setting()) {
    _this->_impl_.setting_ = new ::base::Player_Setting(*from._impl_.setting_);
  }
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgSkillSettingResult)
}

inline void ServerMsgSkillSettingResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.setting_){nullptr}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgSkillSettingResult::~ServerMsgSkillSettingResult() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgSkillSettingResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgSkillSettingResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.setting_;
}

void ServerMsgSkillSettingResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgSkillSettingResult::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgSkillSettingResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgSkillSettingResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.Player_Setting setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgSkillSettingResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgSkillSettingResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // .base.Player_Setting setting = 2;
  if (this->_internal_has_setting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::setting(this),
        _Internal::setting(this).GetCachedSize(), target, stream);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgSkillSettingResult)
  return target;
}

size_t ServerMsgSkillSettingResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgSkillSettingResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.Player_Setting setting = 2;
  if (this->_internal_has_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setting_);
  }

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgSkillSettingResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgSkillSettingResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgSkillSettingResult::GetClassData() const { return &_class_data_; }


void ServerMsgSkillSettingResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgSkillSettingResult*>(&to_msg);
  auto& from = static_cast<const ServerMsgSkillSettingResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgSkillSettingResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_setting()) {
    _this->_internal_mutable_setting()->::base::Player_Setting::MergeFrom(
        from._internal_setting());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgSkillSettingResult::CopyFrom(const ServerMsgSkillSettingResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgSkillSettingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgSkillSettingResult::IsInitialized() const {
  return true;
}

void ServerMsgSkillSettingResult::InternalSwap(ServerMsgSkillSettingResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgSkillSettingResult, _impl_.index_)
      + sizeof(ServerMsgSkillSettingResult::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgSkillSettingResult, _impl_.setting_)>(
          reinterpret_cast<char*>(&_impl_.setting_),
          reinterpret_cast<char*>(&other->_impl_.setting_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgSkillSettingResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[39]);
}

// ===================================================================

class ServerMsgScriptCommand::_Internal {
 public:
  static const ::base::Player_Setting& setting(const ServerMsgScriptCommand* msg);
  static const ::base::ScriptParam_QuestInfo& continue_param(const ServerMsgScriptCommand* msg);
  static const ::base::ScriptParam_QuestInfo& quest_info(const ServerMsgScriptCommand* msg);
};

const ::base::Player_Setting&
ServerMsgScriptCommand::_Internal::setting(const ServerMsgScriptCommand* msg) {
  return *msg->_impl_.setting_;
}
const ::base::ScriptParam_QuestInfo&
ServerMsgScriptCommand::_Internal::continue_param(const ServerMsgScriptCommand* msg) {
  return *msg->_impl_.continue_param_;
}
const ::base::ScriptParam_QuestInfo&
ServerMsgScriptCommand::_Internal::quest_info(const ServerMsgScriptCommand* msg) {
  return *msg->_impl_.quest_info_;
}
void ServerMsgScriptCommand::clear_setting() {
  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
}
void ServerMsgScriptCommand::clear_continue_param() {
  if (GetArenaForAllocation() == nullptr && _impl_.continue_param_ != nullptr) {
    delete _impl_.continue_param_;
  }
  _impl_.continue_param_ = nullptr;
}
void ServerMsgScriptCommand::clear_quest_info() {
  if (GetArenaForAllocation() == nullptr && _impl_.quest_info_ != nullptr) {
    delete _impl_.quest_info_;
  }
  _impl_.quest_info_ = nullptr;
}
ServerMsgScriptCommand::ServerMsgScriptCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgScriptCommand)
}
ServerMsgScriptCommand::ServerMsgScriptCommand(const ServerMsgScriptCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgScriptCommand* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quest_tips_){}
    , decltype(_impl_.setting_){nullptr}
    , decltype(_impl_.continue_param_){nullptr}
    , decltype(_impl_.quest_info_){nullptr}
    , decltype(_impl_.cmd_id_){}
    , decltype(_impl_.index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.quest_tips_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quest_tips_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_quest_tips().empty()) {
    _this->_impl_.quest_tips_.Set(from._internal_quest_tips(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_setting()) {
    _this->_impl_.setting_ = new ::base::Player_Setting(*from._impl_.setting_);
  }
  if (from._internal_has_continue_param()) {
    _this->_impl_.continue_param_ = new ::base::ScriptParam_QuestInfo(*from._impl_.continue_param_);
  }
  if (from._internal_has_quest_info()) {
    _this->_impl_.quest_info_ = new ::base::ScriptParam_QuestInfo(*from._impl_.quest_info_);
  }
  ::memcpy(&_impl_.cmd_id_, &from._impl_.cmd_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.index_) -
    reinterpret_cast<char*>(&_impl_.cmd_id_)) + sizeof(_impl_.index_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgScriptCommand)
}

inline void ServerMsgScriptCommand::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quest_tips_){}
    , decltype(_impl_.setting_){nullptr}
    , decltype(_impl_.continue_param_){nullptr}
    , decltype(_impl_.quest_info_){nullptr}
    , decltype(_impl_.cmd_id_){0}
    , decltype(_impl_.index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.quest_tips_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.quest_tips_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServerMsgScriptCommand::~ServerMsgScriptCommand() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgScriptCommand)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgScriptCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quest_tips_.Destroy();
  if (this != internal_default_instance()) delete _impl_.setting_;
  if (this != internal_default_instance()) delete _impl_.continue_param_;
  if (this != internal_default_instance()) delete _impl_.quest_info_;
}

void ServerMsgScriptCommand::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgScriptCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgScriptCommand)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quest_tips_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.setting_ != nullptr) {
    delete _impl_.setting_;
  }
  _impl_.setting_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.continue_param_ != nullptr) {
    delete _impl_.continue_param_;
  }
  _impl_.continue_param_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.quest_info_ != nullptr) {
    delete _impl_.quest_info_;
  }
  _impl_.quest_info_ = nullptr;
  ::memset(&_impl_.cmd_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.index_) -
      reinterpret_cast<char*>(&_impl_.cmd_id_)) + sizeof(_impl_.index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgScriptCommand::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 cmd_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.cmd_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.Player_Setting setting = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_setting(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.ScriptParam_QuestInfo continue_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_continue_param(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.ScriptParam_QuestInfo quest_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_quest_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string quest_tips = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_quest_tips();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "servermessage.ServerMsgScriptCommand.quest_tips"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgScriptCommand::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgScriptCommand)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 cmd_id = 1;
  if (this->_internal_cmd_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_cmd_id(), target);
  }

  // .base.Player_Setting setting = 2;
  if (this->_internal_has_setting()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::setting(this),
        _Internal::setting(this).GetCachedSize(), target, stream);
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_index(), target);
  }

  // .base.ScriptParam_QuestInfo continue_param = 4;
  if (this->_internal_has_continue_param()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::continue_param(this),
        _Internal::continue_param(this).GetCachedSize(), target, stream);
  }

  // .base.ScriptParam_QuestInfo quest_info = 5;
  if (this->_internal_has_quest_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::quest_info(this),
        _Internal::quest_info(this).GetCachedSize(), target, stream);
  }

  // string quest_tips = 6;
  if (!this->_internal_quest_tips().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_quest_tips().data(), static_cast<int>(this->_internal_quest_tips().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "servermessage.ServerMsgScriptCommand.quest_tips");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_quest_tips(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgScriptCommand)
  return target;
}

size_t ServerMsgScriptCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgScriptCommand)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string quest_tips = 6;
  if (!this->_internal_quest_tips().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_quest_tips());
  }

  // .base.Player_Setting setting = 2;
  if (this->_internal_has_setting()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.setting_);
  }

  // .base.ScriptParam_QuestInfo continue_param = 4;
  if (this->_internal_has_continue_param()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.continue_param_);
  }

  // .base.ScriptParam_QuestInfo quest_info = 5;
  if (this->_internal_has_quest_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.quest_info_);
  }

  // int32 cmd_id = 1;
  if (this->_internal_cmd_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cmd_id());
  }

  // int32 index = 3;
  if (this->_internal_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgScriptCommand::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgScriptCommand::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgScriptCommand::GetClassData() const { return &_class_data_; }


void ServerMsgScriptCommand::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgScriptCommand*>(&to_msg);
  auto& from = static_cast<const ServerMsgScriptCommand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgScriptCommand)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_quest_tips().empty()) {
    _this->_internal_set_quest_tips(from._internal_quest_tips());
  }
  if (from._internal_has_setting()) {
    _this->_internal_mutable_setting()->::base::Player_Setting::MergeFrom(
        from._internal_setting());
  }
  if (from._internal_has_continue_param()) {
    _this->_internal_mutable_continue_param()->::base::ScriptParam_QuestInfo::MergeFrom(
        from._internal_continue_param());
  }
  if (from._internal_has_quest_info()) {
    _this->_internal_mutable_quest_info()->::base::ScriptParam_QuestInfo::MergeFrom(
        from._internal_quest_info());
  }
  if (from._internal_cmd_id() != 0) {
    _this->_internal_set_cmd_id(from._internal_cmd_id());
  }
  if (from._internal_index() != 0) {
    _this->_internal_set_index(from._internal_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgScriptCommand::CopyFrom(const ServerMsgScriptCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgScriptCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgScriptCommand::IsInitialized() const {
  return true;
}

void ServerMsgScriptCommand::InternalSwap(ServerMsgScriptCommand* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.quest_tips_, lhs_arena,
      &other->_impl_.quest_tips_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgScriptCommand, _impl_.index_)
      + sizeof(ServerMsgScriptCommand::_impl_.index_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgScriptCommand, _impl_.setting_)>(
          reinterpret_cast<char*>(&_impl_.setting_),
          reinterpret_cast<char*>(&other->_impl_.setting_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgScriptCommand::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[40]);
}

// ===================================================================

class ServerMsgSkillUpgrade::_Internal {
 public:
};

ServerMsgSkillUpgrade::ServerMsgSkillUpgrade(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgSkillUpgrade)
}
ServerMsgSkillUpgrade::ServerMsgSkillUpgrade(const ServerMsgSkillUpgrade& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgSkillUpgrade* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.skill_level_){}
    , decltype(_impl_.sucess_){}
    , decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.type_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.type_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgSkillUpgrade)
}

inline void ServerMsgSkillUpgrade::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.skill_id_){0}
    , decltype(_impl_.skill_level_){0}
    , decltype(_impl_.sucess_){false}
    , decltype(_impl_.type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgSkillUpgrade::~ServerMsgSkillUpgrade() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgSkillUpgrade)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgSkillUpgrade::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgSkillUpgrade::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgSkillUpgrade::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgSkillUpgrade)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.type_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgSkillUpgrade::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.skill_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool sucess = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sucess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgSkillUpgrade::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgSkillUpgrade)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 skill_id = 2;
  if (this->_internal_skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_skill_id(), target);
  }

  // int32 skill_level = 3;
  if (this->_internal_skill_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_skill_level(), target);
  }

  // bool sucess = 4;
  if (this->_internal_sucess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_sucess(), target);
  }

  // int32 type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgSkillUpgrade)
  return target;
}

size_t ServerMsgSkillUpgrade::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgSkillUpgrade)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 skill_id = 2;
  if (this->_internal_skill_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_id());
  }

  // int32 skill_level = 3;
  if (this->_internal_skill_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_level());
  }

  // bool sucess = 4;
  if (this->_internal_sucess() != 0) {
    total_size += 1 + 1;
  }

  // int32 type = 5;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgSkillUpgrade::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgSkillUpgrade::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgSkillUpgrade::GetClassData() const { return &_class_data_; }


void ServerMsgSkillUpgrade::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgSkillUpgrade*>(&to_msg);
  auto& from = static_cast<const ServerMsgSkillUpgrade&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgSkillUpgrade)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_skill_id() != 0) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_skill_level() != 0) {
    _this->_internal_set_skill_level(from._internal_skill_level());
  }
  if (from._internal_sucess() != 0) {
    _this->_internal_set_sucess(from._internal_sucess());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgSkillUpgrade::CopyFrom(const ServerMsgSkillUpgrade& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgSkillUpgrade)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgSkillUpgrade::IsInitialized() const {
  return true;
}

void ServerMsgSkillUpgrade::InternalSwap(ServerMsgSkillUpgrade* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgSkillUpgrade, _impl_.type_)
      + sizeof(ServerMsgSkillUpgrade::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgSkillUpgrade, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgSkillUpgrade::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[41]);
}

// ===================================================================

class ServerMsgSwapItem::_Internal {
 public:
};

ServerMsgSwapItem::ServerMsgSwapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgSwapItem)
}
ServerMsgSwapItem::ServerMsgSwapItem(const ServerMsgSwapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgSwapItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.source_pos_){}
    , decltype(_impl_.dest_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dest_pos_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.dest_pos_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgSwapItem)
}

inline void ServerMsgSwapItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.source_pos_){0}
    , decltype(_impl_.dest_pos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgSwapItem::~ServerMsgSwapItem() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgSwapItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgSwapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgSwapItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgSwapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgSwapItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dest_pos_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.dest_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgSwapItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 source_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.source_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dest_pos = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.dest_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgSwapItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgSwapItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 source_pos = 2;
  if (this->_internal_source_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_source_pos(), target);
  }

  // int32 dest_pos = 3;
  if (this->_internal_dest_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_dest_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgSwapItem)
  return target;
}

size_t ServerMsgSwapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgSwapItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 source_pos = 2;
  if (this->_internal_source_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_pos());
  }

  // int32 dest_pos = 3;
  if (this->_internal_dest_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dest_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgSwapItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgSwapItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgSwapItem::GetClassData() const { return &_class_data_; }


void ServerMsgSwapItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgSwapItem*>(&to_msg);
  auto& from = static_cast<const ServerMsgSwapItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgSwapItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_source_pos() != 0) {
    _this->_internal_set_source_pos(from._internal_source_pos());
  }
  if (from._internal_dest_pos() != 0) {
    _this->_internal_set_dest_pos(from._internal_dest_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgSwapItem::CopyFrom(const ServerMsgSwapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgSwapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgSwapItem::IsInitialized() const {
  return true;
}

void ServerMsgSwapItem::InternalSwap(ServerMsgSwapItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgSwapItem, _impl_.dest_pos_)
      + sizeof(ServerMsgSwapItem::_impl_.dest_pos_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgSwapItem, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgSwapItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[42]);
}

// ===================================================================

class ServerMsgTargetListAndHitFlags::_Internal {
 public:
};

ServerMsgTargetListAndHitFlags::ServerMsgTargetListAndHitFlags(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgTargetListAndHitFlags)
}
ServerMsgTargetListAndHitFlags::ServerMsgTargetListAndHitFlags(const ServerMsgTargetListAndHitFlags& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgTargetListAndHitFlags* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_list_){from._impl_.target_list_}
    , /*decltype(_impl_._target_list_cached_byte_size_)*/{0}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.logic_count_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_z_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.position_z_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.position_z_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgTargetListAndHitFlags)
}

inline void ServerMsgTargetListAndHitFlags::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_list_){arena}
    , /*decltype(_impl_._target_list_cached_byte_size_)*/{0}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.logic_count_){0}
    , decltype(_impl_.skill_id_){0}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_z_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgTargetListAndHitFlags::~ServerMsgTargetListAndHitFlags() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgTargetListAndHitFlags)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgTargetListAndHitFlags::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.target_list_.~RepeatedField();
}

void ServerMsgTargetListAndHitFlags::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgTargetListAndHitFlags::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgTargetListAndHitFlags)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.target_list_.Clear();
  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.position_z_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.position_z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgTargetListAndHitFlags::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 logic_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.logic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 target_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_target_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_target_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_z = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgTargetListAndHitFlags::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgTargetListAndHitFlags)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 logic_count = 2;
  if (this->_internal_logic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_logic_count(), target);
  }

  // int32 skill_id = 3;
  if (this->_internal_skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_skill_id(), target);
  }

  // repeated int32 target_list = 4;
  {
    int byte_size = _impl_._target_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_target_list(), byte_size, target);
    }
  }

  // float position_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_position_x(), target);
  }

  // float position_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = this->_internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_position_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgTargetListAndHitFlags)
  return target;
}

size_t ServerMsgTargetListAndHitFlags::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgTargetListAndHitFlags)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 target_list = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.target_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._target_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 logic_count = 2;
  if (this->_internal_logic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_logic_count());
  }

  // int32 skill_id = 3;
  if (this->_internal_skill_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_id());
  }

  // float position_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // float position_z = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = this->_internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgTargetListAndHitFlags::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgTargetListAndHitFlags::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgTargetListAndHitFlags::GetClassData() const { return &_class_data_; }


void ServerMsgTargetListAndHitFlags::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgTargetListAndHitFlags*>(&to_msg);
  auto& from = static_cast<const ServerMsgTargetListAndHitFlags&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgTargetListAndHitFlags)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.target_list_.MergeFrom(from._impl_.target_list_);
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_logic_count() != 0) {
    _this->_internal_set_logic_count(from._internal_logic_count());
  }
  if (from._internal_skill_id() != 0) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = from._internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    _this->_internal_set_position_z(from._internal_position_z());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgTargetListAndHitFlags::CopyFrom(const ServerMsgTargetListAndHitFlags& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgTargetListAndHitFlags)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgTargetListAndHitFlags::IsInitialized() const {
  return true;
}

void ServerMsgTargetListAndHitFlags::InternalSwap(ServerMsgTargetListAndHitFlags* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.target_list_.InternalSwap(&other->_impl_.target_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgTargetListAndHitFlags, _impl_.position_z_)
      + sizeof(ServerMsgTargetListAndHitFlags::_impl_.position_z_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgTargetListAndHitFlags, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgTargetListAndHitFlags::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[43]);
}

// ===================================================================

class ServerMsgTaskDownEquipResult::_Internal {
 public:
};

ServerMsgTaskDownEquipResult::ServerMsgTaskDownEquipResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgTaskDownEquipResult)
}
ServerMsgTaskDownEquipResult::ServerMsgTaskDownEquipResult(const ServerMsgTaskDownEquipResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgTaskDownEquipResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.equip_point_){}
    , decltype(_impl_.bag_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bag_index_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.bag_index_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgTaskDownEquipResult)
}

inline void ServerMsgTaskDownEquipResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.equip_point_){0}
    , decltype(_impl_.bag_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgTaskDownEquipResult::~ServerMsgTaskDownEquipResult() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgTaskDownEquipResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgTaskDownEquipResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgTaskDownEquipResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgTaskDownEquipResult::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgTaskDownEquipResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bag_index_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.bag_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgTaskDownEquipResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 equip_point = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.equip_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bag_index = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.bag_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgTaskDownEquipResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgTaskDownEquipResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // int32 map_id = 3;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_map_id(), target);
  }

  // int32 equip_point = 4;
  if (this->_internal_equip_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_equip_point(), target);
  }

  // int32 bag_index = 5;
  if (this->_internal_bag_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_bag_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgTaskDownEquipResult)
  return target;
}

size_t ServerMsgTaskDownEquipResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgTaskDownEquipResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 3;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 equip_point = 4;
  if (this->_internal_equip_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equip_point());
  }

  // int32 bag_index = 5;
  if (this->_internal_bag_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bag_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgTaskDownEquipResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgTaskDownEquipResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgTaskDownEquipResult::GetClassData() const { return &_class_data_; }


void ServerMsgTaskDownEquipResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgTaskDownEquipResult*>(&to_msg);
  auto& from = static_cast<const ServerMsgTaskDownEquipResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgTaskDownEquipResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_equip_point() != 0) {
    _this->_internal_set_equip_point(from._internal_equip_point());
  }
  if (from._internal_bag_index() != 0) {
    _this->_internal_set_bag_index(from._internal_bag_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgTaskDownEquipResult::CopyFrom(const ServerMsgTaskDownEquipResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgTaskDownEquipResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgTaskDownEquipResult::IsInitialized() const {
  return true;
}

void ServerMsgTaskDownEquipResult::InternalSwap(ServerMsgTaskDownEquipResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgTaskDownEquipResult, _impl_.bag_index_)
      + sizeof(ServerMsgTaskDownEquipResult::_impl_.bag_index_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgTaskDownEquipResult, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgTaskDownEquipResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[44]);
}

// ===================================================================

class ServerMsgUseEquipResult::_Internal {
 public:
};

ServerMsgUseEquipResult::ServerMsgUseEquipResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:servermessage.ServerMsgUseEquipResult)
}
ServerMsgUseEquipResult::ServerMsgUseEquipResult(const ServerMsgUseEquipResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ServerMsgUseEquipResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){}
    , decltype(_impl_.equip_point_){}
    , decltype(_impl_.bag_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.result_, &from._impl_.result_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bag_index_) -
    reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.bag_index_));
  // @@protoc_insertion_point(copy_constructor:servermessage.ServerMsgUseEquipResult)
}

inline void ServerMsgUseEquipResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.result_){0}
    , decltype(_impl_.equip_point_){0}
    , decltype(_impl_.bag_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ServerMsgUseEquipResult::~ServerMsgUseEquipResult() {
  // @@protoc_insertion_point(destructor:servermessage.ServerMsgUseEquipResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ServerMsgUseEquipResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ServerMsgUseEquipResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ServerMsgUseEquipResult::Clear() {
// @@protoc_insertion_point(message_clear_start:servermessage.ServerMsgUseEquipResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.result_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bag_index_) -
      reinterpret_cast<char*>(&_impl_.result_)) + sizeof(_impl_.bag_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerMsgUseEquipResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 equip_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.equip_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bag_index = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.bag_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServerMsgUseEquipResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:servermessage.ServerMsgUseEquipResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_result(), target);
  }

  // int32 equip_point = 2;
  if (this->_internal_equip_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_equip_point(), target);
  }

  // int32 bag_index = 3;
  if (this->_internal_bag_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_bag_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:servermessage.ServerMsgUseEquipResult)
  return target;
}

size_t ServerMsgUseEquipResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:servermessage.ServerMsgUseEquipResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_result());
  }

  // int32 equip_point = 2;
  if (this->_internal_equip_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equip_point());
  }

  // int32 bag_index = 3;
  if (this->_internal_bag_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bag_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServerMsgUseEquipResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ServerMsgUseEquipResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServerMsgUseEquipResult::GetClassData() const { return &_class_data_; }


void ServerMsgUseEquipResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ServerMsgUseEquipResult*>(&to_msg);
  auto& from = static_cast<const ServerMsgUseEquipResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:servermessage.ServerMsgUseEquipResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _this->_internal_set_result(from._internal_result());
  }
  if (from._internal_equip_point() != 0) {
    _this->_internal_set_equip_point(from._internal_equip_point());
  }
  if (from._internal_bag_index() != 0) {
    _this->_internal_set_bag_index(from._internal_bag_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServerMsgUseEquipResult::CopyFrom(const ServerMsgUseEquipResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:servermessage.ServerMsgUseEquipResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMsgUseEquipResult::IsInitialized() const {
  return true;
}

void ServerMsgUseEquipResult::InternalSwap(ServerMsgUseEquipResult* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerMsgUseEquipResult, _impl_.bag_index_)
      + sizeof(ServerMsgUseEquipResult::_impl_.bag_index_)
      - PROTOBUF_FIELD_OFFSET(ServerMsgUseEquipResult, _impl_.result_)>(
          reinterpret_cast<char*>(&_impl_.result_),
          reinterpret_cast<char*>(&other->_impl_.result_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerMsgUseEquipResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_server_5fmessage_2eproto_getter, &descriptor_table_server_5fmessage_2eproto_once,
      file_level_metadata_server_5fmessage_2eproto[45]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace servermessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgAbilityAction*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgAbilityAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgAbilityAction >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgAbilityResult*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgAbilityResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgAbilityResult >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgAbilitySuccess*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgAbilitySuccess >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgAbilitySuccess >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgAddQuest*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgAddQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgAddQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgAddSkillToSkillList*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgAddSkillToSkillList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgAddSkillToSkillList >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgCharEquipment*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgCharEquipment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgCharEquipment >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerHumanBaseAttrib*
Arena::CreateMaybeMessage< ::servermessage::ServerHumanBaseAttrib >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerHumanBaseAttrib >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgCharImpactListUpdate*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgCharImpactListUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgCharImpactListUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgCharMove*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgCharMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgCharMove >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgCharSkillGather*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgCharSkillGather >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgCharSkillGather >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgCharStopAction*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgCharStopAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgCharStopAction >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgChat*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgChat >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgCommand*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgCooldownUpdate*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgCooldownUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgCooldownUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDelObject*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDelObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDelObject >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDelQuest*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDelQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDelQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDeltailOfHealsAndDamage*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDeltailOfHealsAndDamage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDeltailOfHealsAndDamage >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDetailAbilityInfo*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDetailAbilityInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDetailAbilityInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDetailAttrib*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDetailAttrib >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDetailAttrib >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDetailAttribPet*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDetailAttribPet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDetailAttribPet >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDetailBuff*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDetailBuff >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDetailBuff >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDetailEquipList*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDetailEquipList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDetailEquipList >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDetailDetailItemList*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDetailDetailItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDetailDetailItemList >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgDetailSkillList*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgDetailSkillList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgDetailSkillList >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgEnterMap*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgEnterMap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgEnterMap >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgItemInfo*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgItemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgItemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgManipulatePetResult*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgManipulatePetResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgManipulatePetResult >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgModifyQuest*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgModifyQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgModifyQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgMonsterAttribute*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgMonsterAttribute >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgMonsterAttribute >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgNewBeastie*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgNewBeastie >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgNewBeastie >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgNewItem*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgNewItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgNewItem >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgNewItemBox*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgNewItemBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgNewItemBox >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgNewMonster*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgNewMonster >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgNewMonster >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgNotifyEquip*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgNotifyEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgNotifyEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgOperateResult*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgOperateResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgOperateResult >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgPickItemResult*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgPickItemResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgPickItemResult >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgQueryEventResult*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgQueryEventResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgQueryEventResult >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgQuestList*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgQuestList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgQuestList >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgQuestListRefresh*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgQuestListRefresh >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgQuestListRefresh >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgSkillSettingResult*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgSkillSettingResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgSkillSettingResult >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgScriptCommand*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgScriptCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgScriptCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgSkillUpgrade*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgSkillUpgrade >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgSkillUpgrade >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgSwapItem*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgSwapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgSwapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgTargetListAndHitFlags*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgTargetListAndHitFlags >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgTargetListAndHitFlags >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgTaskDownEquipResult*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgTaskDownEquipResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgTaskDownEquipResult >(arena);
}
template<> PROTOBUF_NOINLINE ::servermessage::ServerMsgUseEquipResult*
Arena::CreateMaybeMessage< ::servermessage::ServerMsgUseEquipResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::servermessage::ServerMsgUseEquipResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
