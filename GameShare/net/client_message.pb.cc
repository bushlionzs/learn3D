// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client_message.proto

#include "client_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace clientmessage {
PROTOBUF_CONSTEXPR MsgLogin::MsgLogin(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.username_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.passwd_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgLoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgLoginDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgLoginDefaultTypeInternal() {}
  union {
    MsgLogin _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgLoginDefaultTypeInternal _MsgLogin_default_instance_;
PROTOBUF_CONSTEXPR MsgQueryEvent::MsgQueryEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgQueryEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgQueryEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgQueryEventDefaultTypeInternal() {}
  union {
    MsgQueryEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgQueryEventDefaultTypeInternal _MsgQueryEvent_default_instance_;
PROTOBUF_CONSTEXPR MsgQueryQuest::MsgQueryQuest(
    ::_pbi::ConstantInitialized) {}
struct MsgQueryQuestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgQueryQuestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgQueryQuestDefaultTypeInternal() {}
  union {
    MsgQueryQuest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgQueryQuestDefaultTypeInternal _MsgQueryQuest_default_instance_;
PROTOBUF_CONSTEXPR MsgCharMove::MsgCharMove(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.handle_id_)*/0
  , /*decltype(_impl_.stop_logic_count_)*/0
  , /*decltype(_impl_.target_x_)*/0
  , /*decltype(_impl_.target_y_)*/0
  , /*decltype(_impl_.world_x_)*/0
  , /*decltype(_impl_.world_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgCharMoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgCharMoveDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgCharMoveDefaultTypeInternal() {}
  union {
    MsgCharMove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgCharMoveDefaultTypeInternal _MsgCharMove_default_instance_;
PROTOBUF_CONSTEXPR MsgUseSkill::MsgUseSkill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.skill_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.target_x_)*/0
  , /*decltype(_impl_.target_y_)*/0
  , /*decltype(_impl_.dir_)*/0
  , /*decltype(_impl_.guid_)*/0u
  , /*decltype(_impl_.hurt_delay_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgUseSkillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUseSkillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUseSkillDefaultTypeInternal() {}
  union {
    MsgUseSkill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUseSkillDefaultTypeInternal _MsgUseSkill_default_instance_;
PROTOBUF_CONSTEXPR MsgEventRequest::MsgEventRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.ex_index_)*/0
  , /*decltype(_impl_.mid_script_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgEventRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgEventRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgEventRequestDefaultTypeInternal() {}
  union {
    MsgEventRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgEventRequestDefaultTypeInternal _MsgEventRequest_default_instance_;
PROTOBUF_CONSTEXPR MsgManipulatePet::MsgManipulatePet(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.high_section_horse_)*/0u
  , /*decltype(_impl_.low_section_horse_)*/0u
  , /*decltype(_impl_.manipulate_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgManipulatePetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgManipulatePetDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgManipulatePetDefaultTypeInternal() {}
  union {
    MsgManipulatePet _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgManipulatePetDefaultTypeInternal _MsgManipulatePet_default_instance_;
PROTOBUF_CONSTEXPR MsgPickItem::MsgPickItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgPickItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgPickItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgPickItemDefaultTypeInternal() {}
  union {
    MsgPickItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgPickItemDefaultTypeInternal _MsgPickItem_default_instance_;
PROTOBUF_CONSTEXPR MsgRequestBaseAttrib::MsgRequestBaseAttrib(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgRequestBaseAttribDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgRequestBaseAttribDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgRequestBaseAttribDefaultTypeInternal() {}
  union {
    MsgRequestBaseAttrib _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgRequestBaseAttribDefaultTypeInternal _MsgRequestBaseAttrib_default_instance_;
PROTOBUF_CONSTEXPR MsgQuestAbandon::MsgQuestAbandon(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.script_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgQuestAbandonDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgQuestAbandonDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgQuestAbandonDefaultTypeInternal() {}
  union {
    MsgQuestAbandon _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgQuestAbandonDefaultTypeInternal _MsgQuestAbandon_default_instance_;
PROTOBUF_CONSTEXPR MsgQuestAccept::MsgQuestAccept(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.script_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgQuestAcceptDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgQuestAcceptDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgQuestAcceptDefaultTypeInternal() {}
  union {
    MsgQuestAccept _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgQuestAcceptDefaultTypeInternal _MsgQuestAccept_default_instance_;
PROTOBUF_CONSTEXPR MsgQuestContinue::MsgQuestContinue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.script_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgQuestContinueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgQuestContinueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgQuestContinueDefaultTypeInternal() {}
  union {
    MsgQuestContinue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgQuestContinueDefaultTypeInternal _MsgQuestContinue_default_instance_;
PROTOBUF_CONSTEXPR MsgQuestRefuse::MsgQuestRefuse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.script_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgQuestRefuseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgQuestRefuseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgQuestRefuseDefaultTypeInternal() {}
  union {
    MsgQuestRefuse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgQuestRefuseDefaultTypeInternal _MsgQuestRefuse_default_instance_;
PROTOBUF_CONSTEXPR MsgQuestSubmit::MsgQuestSubmit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.target_id_)*/0
  , /*decltype(_impl_.script_id_)*/0
  , /*decltype(_impl_.radio_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgQuestSubmitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgQuestSubmitDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgQuestSubmitDefaultTypeInternal() {}
  union {
    MsgQuestSubmit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgQuestSubmitDefaultTypeInternal _MsgQuestSubmit_default_instance_;
PROTOBUF_CONSTEXPR MsgSwapItem::MsgSwapItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.source_pos_)*/0
  , /*decltype(_impl_.dest_pos_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgSwapItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgSwapItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgSwapItemDefaultTypeInternal() {}
  union {
    MsgSwapItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgSwapItemDefaultTypeInternal _MsgSwapItem_default_instance_;
PROTOBUF_CONSTEXPR MsgTick::MsgTick(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.position_x_)*/0
  , /*decltype(_impl_.position_z_)*/0
  , /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.player_pos_x_)*/0
  , /*decltype(_impl_.player_pos_y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgTickDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgTickDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgTickDefaultTypeInternal() {}
  union {
    MsgTick _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgTickDefaultTypeInternal _MsgTick_default_instance_;
PROTOBUF_CONSTEXPR MsgTakeDownEquip::MsgTakeDownEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.equip_point_)*/0
  , /*decltype(_impl_.bag_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgTakeDownEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgTakeDownEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgTakeDownEquipDefaultTypeInternal() {}
  union {
    MsgTakeDownEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgTakeDownEquipDefaultTypeInternal _MsgTakeDownEquip_default_instance_;
PROTOBUF_CONSTEXPR MsgUseAbility::MsgUseAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.ability_id_)*/0
  , /*decltype(_impl_.object_guid_)*/0
  , /*decltype(_impl_.prescription_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgUseAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUseAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUseAbilityDefaultTypeInternal() {}
  union {
    MsgUseAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUseAbilityDefaultTypeInternal _MsgUseAbility_default_instance_;
PROTOBUF_CONSTEXPR MsgUseEquip::MsgUseEquip(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.player_id_)*/0
  , /*decltype(_impl_.map_id_)*/0
  , /*decltype(_impl_.equip_point_)*/0
  , /*decltype(_impl_.bag_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MsgUseEquipDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MsgUseEquipDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MsgUseEquipDefaultTypeInternal() {}
  union {
    MsgUseEquip _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MsgUseEquipDefaultTypeInternal _MsgUseEquip_default_instance_;
}  // namespace clientmessage
static ::_pb::Metadata file_level_metadata_client_5fmessage_2eproto[19];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_client_5fmessage_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_client_5fmessage_2eproto = nullptr;

const uint32_t TableStruct_client_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgLogin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgLogin, _impl_.username_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgLogin, _impl_.passwd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQueryEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQueryEvent, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQueryEvent, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQueryEvent, _impl_.object_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQueryQuest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _impl_.handle_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _impl_.stop_logic_count_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _impl_.target_x_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _impl_.target_y_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _impl_.world_x_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgCharMove, _impl_.world_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.target_x_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.target_y_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.dir_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.guid_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseSkill, _impl_.hurt_delay_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgEventRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgEventRequest, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgEventRequest, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgEventRequest, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgEventRequest, _impl_.ex_index_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgEventRequest, _impl_.mid_script_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgManipulatePet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgManipulatePet, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgManipulatePet, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgManipulatePet, _impl_.high_section_horse_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgManipulatePet, _impl_.low_section_horse_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgManipulatePet, _impl_.manipulate_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgPickItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgPickItem, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgPickItem, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgPickItem, _impl_.player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgRequestBaseAttrib, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgRequestBaseAttrib, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgRequestBaseAttrib, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgRequestBaseAttrib, _impl_.map_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAbandon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAbandon, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAbandon, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAbandon, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAbandon, _impl_.script_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAccept, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAccept, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAccept, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAccept, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestAccept, _impl_.script_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestContinue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestContinue, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestContinue, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestContinue, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestContinue, _impl_.script_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestRefuse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestRefuse, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestRefuse, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestRefuse, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestRefuse, _impl_.script_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestSubmit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestSubmit, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestSubmit, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestSubmit, _impl_.target_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestSubmit, _impl_.script_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgQuestSubmit, _impl_.radio_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgSwapItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgSwapItem, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgSwapItem, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgSwapItem, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgSwapItem, _impl_.source_pos_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgSwapItem, _impl_.dest_pos_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTick, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTick, _impl_.object_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTick, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTick, _impl_.position_x_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTick, _impl_.position_z_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTick, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTick, _impl_.player_pos_x_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTick, _impl_.player_pos_y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTakeDownEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTakeDownEquip, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTakeDownEquip, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTakeDownEquip, _impl_.equip_point_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgTakeDownEquip, _impl_.bag_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseAbility, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseAbility, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseAbility, _impl_.ability_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseAbility, _impl_.object_guid_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseAbility, _impl_.prescription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseEquip, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseEquip, _impl_.player_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseEquip, _impl_.map_id_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseEquip, _impl_.equip_point_),
  PROTOBUF_FIELD_OFFSET(::clientmessage::MsgUseEquip, _impl_.bag_index_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::clientmessage::MsgLogin)},
  { 8, -1, -1, sizeof(::clientmessage::MsgQueryEvent)},
  { 17, -1, -1, sizeof(::clientmessage::MsgQueryQuest)},
  { 23, -1, -1, sizeof(::clientmessage::MsgCharMove)},
  { 37, -1, -1, sizeof(::clientmessage::MsgUseSkill)},
  { 52, -1, -1, sizeof(::clientmessage::MsgEventRequest)},
  { 63, -1, -1, sizeof(::clientmessage::MsgManipulatePet)},
  { 74, -1, -1, sizeof(::clientmessage::MsgPickItem)},
  { 83, -1, -1, sizeof(::clientmessage::MsgRequestBaseAttrib)},
  { 92, -1, -1, sizeof(::clientmessage::MsgQuestAbandon)},
  { 102, -1, -1, sizeof(::clientmessage::MsgQuestAccept)},
  { 112, -1, -1, sizeof(::clientmessage::MsgQuestContinue)},
  { 122, -1, -1, sizeof(::clientmessage::MsgQuestRefuse)},
  { 132, -1, -1, sizeof(::clientmessage::MsgQuestSubmit)},
  { 143, -1, -1, sizeof(::clientmessage::MsgSwapItem)},
  { 154, -1, -1, sizeof(::clientmessage::MsgTick)},
  { 167, -1, -1, sizeof(::clientmessage::MsgTakeDownEquip)},
  { 177, -1, -1, sizeof(::clientmessage::MsgUseAbility)},
  { 188, -1, -1, sizeof(::clientmessage::MsgUseEquip)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::clientmessage::_MsgLogin_default_instance_._instance,
  &::clientmessage::_MsgQueryEvent_default_instance_._instance,
  &::clientmessage::_MsgQueryQuest_default_instance_._instance,
  &::clientmessage::_MsgCharMove_default_instance_._instance,
  &::clientmessage::_MsgUseSkill_default_instance_._instance,
  &::clientmessage::_MsgEventRequest_default_instance_._instance,
  &::clientmessage::_MsgManipulatePet_default_instance_._instance,
  &::clientmessage::_MsgPickItem_default_instance_._instance,
  &::clientmessage::_MsgRequestBaseAttrib_default_instance_._instance,
  &::clientmessage::_MsgQuestAbandon_default_instance_._instance,
  &::clientmessage::_MsgQuestAccept_default_instance_._instance,
  &::clientmessage::_MsgQuestContinue_default_instance_._instance,
  &::clientmessage::_MsgQuestRefuse_default_instance_._instance,
  &::clientmessage::_MsgQuestSubmit_default_instance_._instance,
  &::clientmessage::_MsgSwapItem_default_instance_._instance,
  &::clientmessage::_MsgTick_default_instance_._instance,
  &::clientmessage::_MsgTakeDownEquip_default_instance_._instance,
  &::clientmessage::_MsgUseAbility_default_instance_._instance,
  &::clientmessage::_MsgUseEquip_default_instance_._instance,
};

const char descriptor_table_protodef_client_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024client_message.proto\022\rclientmessage\",\n"
  "\010MsgLogin\022\020\n\010username\030\001 \001(\t\022\016\n\006passwd\030\002 "
  "\001(\t\"E\n\rMsgQueryEvent\022\021\n\tplayer_id\030\001 \001(\005\022"
  "\016\n\006map_id\030\002 \001(\005\022\021\n\tobject_id\030\003 \001(\005\"\017\n\rMs"
  "gQueryQuest\"\243\001\n\013MsgCharMove\022\021\n\tobject_id"
  "\030\001 \001(\005\022\016\n\006map_id\030\002 \001(\005\022\021\n\thandle_id\030\003 \001("
  "\005\022\030\n\020stop_logic_count\030\004 \001(\005\022\020\n\010target_x\030"
  "\005 \001(\002\022\020\n\010target_y\030\006 \001(\002\022\017\n\007world_x\030\007 \001(\002"
  "\022\017\n\007world_y\030\010 \001(\002\"\255\001\n\013MsgUseSkill\022\021\n\tpla"
  "yer_id\030\001 \001(\005\022\020\n\010skill_id\030\002 \001(\005\022\021\n\ttarget"
  "_id\030\003 \001(\005\022\016\n\006map_id\030\004 \001(\005\022\020\n\010target_x\030\005 "
  "\001(\002\022\020\n\010target_y\030\006 \001(\002\022\013\n\003dir\030\007 \001(\002\022\014\n\004gu"
  "id\030\010 \001(\r\022\027\n\017hurt_delay_time\030\t \001(\005\"m\n\017Msg"
  "EventRequest\022\021\n\tplayer_id\030\001 \001(\005\022\016\n\006map_i"
  "d\030\002 \001(\005\022\021\n\ttarget_id\030\003 \001(\005\022\020\n\010ex_index\030\004"
  " \001(\005\022\022\n\nmid_script\030\005 \001(\005\"\205\001\n\020MsgManipula"
  "tePet\022\021\n\tplayer_id\030\001 \001(\005\022\016\n\006map_id\030\002 \001(\005"
  "\022\032\n\022high_section_horse\030\003 \001(\r\022\031\n\021low_sect"
  "ion_horse\030\004 \001(\r\022\027\n\017manipulate_type\030\005 \001(\005"
  "\"C\n\013MsgPickItem\022\021\n\tobject_id\030\001 \001(\005\022\016\n\006ma"
  "p_id\030\002 \001(\005\022\021\n\tplayer_id\030\003 \001(\005\"L\n\024MsgRequ"
  "estBaseAttrib\022\021\n\ttarget_id\030\001 \001(\005\022\021\n\tplay"
  "er_id\030\002 \001(\005\022\016\n\006map_id\030\003 \001(\005\"Z\n\017MsgQuestA"
  "bandon\022\021\n\tplayer_id\030\001 \001(\005\022\016\n\006map_id\030\002 \001("
  "\005\022\021\n\ttarget_id\030\003 \001(\005\022\021\n\tscript_id\030\004 \001(\005\""
  "Y\n\016MsgQuestAccept\022\021\n\tplayer_id\030\001 \001(\005\022\016\n\006"
  "map_id\030\002 \001(\005\022\021\n\ttarget_id\030\003 \001(\005\022\021\n\tscrip"
  "t_id\030\004 \001(\005\"[\n\020MsgQuestContinue\022\021\n\tplayer"
  "_id\030\001 \001(\005\022\016\n\006map_id\030\002 \001(\005\022\021\n\ttarget_id\030\003"
  " \001(\005\022\021\n\tscript_id\030\004 \001(\005\"Y\n\016MsgQuestRefus"
  "e\022\021\n\tplayer_id\030\001 \001(\005\022\016\n\006map_id\030\002 \001(\005\022\021\n\t"
  "target_id\030\003 \001(\005\022\021\n\tscript_id\030\004 \001(\005\"k\n\016Ms"
  "gQuestSubmit\022\021\n\tplayer_id\030\001 \001(\005\022\016\n\006map_i"
  "d\030\002 \001(\005\022\021\n\ttarget_id\030\003 \001(\005\022\021\n\tscript_id\030"
  "\004 \001(\005\022\020\n\010radio_id\030\005 \001(\005\"i\n\013MsgSwapItem\022\021"
  "\n\tplayer_id\030\001 \001(\005\022\016\n\006map_id\030\002 \001(\005\022\021\n\tobj"
  "ect_id\030\003 \001(\005\022\022\n\nsource_pos\030\004 \001(\005\022\020\n\010dest"
  "_pos\030\005 \001(\005\"\223\001\n\007MsgTick\022\021\n\tobject_id\030\001 \001("
  "\005\022\016\n\006map_id\030\002 \001(\005\022\022\n\nposition_x\030\003 \001(\002\022\022\n"
  "\nposition_z\030\004 \001(\002\022\021\n\tplayer_id\030\005 \001(\005\022\024\n\014"
  "player_pos_x\030\006 \001(\002\022\024\n\014player_pos_y\030\007 \001(\002"
  "\"]\n\020MsgTakeDownEquip\022\021\n\tplayer_id\030\001 \001(\005\022"
  "\016\n\006map_id\030\002 \001(\005\022\023\n\013equip_point\030\003 \001(\005\022\021\n\t"
  "bag_index\030\004 \001(\005\"t\n\rMsgUseAbility\022\021\n\tplay"
  "er_id\030\001 \001(\005\022\016\n\006map_id\030\002 \001(\005\022\022\n\nability_i"
  "d\030\003 \001(\005\022\023\n\013object_guid\030\004 \001(\005\022\027\n\017prescrip"
  "tion_id\030\005 \001(\005\"X\n\013MsgUseEquip\022\021\n\tplayer_i"
  "d\030\001 \001(\005\022\016\n\006map_id\030\002 \001(\005\022\023\n\013equip_point\030\003"
  " \001(\005\022\021\n\tbag_index\030\004 \001(\005*\242\003\n\tMessageID\022\017\n"
  "\013CS_MSG_NONE\020\000\022\r\n\010CS_LOGIN\020\350\007\022\023\n\016CS_QUER"
  "Y_EVENT\020\314\010\022\023\n\016CS_QUERY_QUEST\020\315\010\022\021\n\014CS_US"
  "E_SKILL\020\316\010\022\021\n\014CS_CHAR_MOVE\020\317\010\022\014\n\007CS_TICK"
  "\020\320\010\022\021\n\014CS_PICK_ITEM\020\321\010\022\021\n\014CS_SWAP_ITEM\020\322"
  "\010\022\017\n\nCS_UNEQUIP\020\323\010\022\021\n\014CS_USE_EQUIP\020\324\010\022\025\n"
  "\020CS_EVENT_REQUEST\020\325\010\022\024\n\017CS_QUEST_ACCEPT\020"
  "\326\010\022\024\n\017CS_QUEST_REFUSE\020\327\010\022\026\n\021CS_QUEST_CON"
  "TINUE\020\330\010\022\025\n\020CS_QUEST_ABANDON\020\331\010\022\024\n\017CS_QU"
  "EST_SUBMIT\020\332\010\022\030\n\023CS_REQUEST_BASEATTR\020\333\010\022"
  "\026\n\021CS_MANIPULATE_PET\020\334\010\022\023\n\016CS_USE_ABILIT"
  "Y\020\335\010b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_client_5fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_client_5fmessage_2eproto = {
    false, false, 2372, descriptor_table_protodef_client_5fmessage_2eproto,
    "client_message.proto",
    &descriptor_table_client_5fmessage_2eproto_once, nullptr, 0, 19,
    schemas, file_default_instances, TableStruct_client_5fmessage_2eproto::offsets,
    file_level_metadata_client_5fmessage_2eproto, file_level_enum_descriptors_client_5fmessage_2eproto,
    file_level_service_descriptors_client_5fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_client_5fmessage_2eproto_getter() {
  return &descriptor_table_client_5fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_client_5fmessage_2eproto(&descriptor_table_client_5fmessage_2eproto);
namespace clientmessage {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageID_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_client_5fmessage_2eproto);
  return file_level_enum_descriptors_client_5fmessage_2eproto[0];
}
bool MessageID_IsValid(int value) {
  switch (value) {
    case 0:
    case 1000:
    case 1100:
    case 1101:
    case 1102:
    case 1103:
    case 1104:
    case 1105:
    case 1106:
    case 1107:
    case 1108:
    case 1109:
    case 1110:
    case 1111:
    case 1112:
    case 1113:
    case 1114:
    case 1115:
    case 1116:
    case 1117:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class MsgLogin::_Internal {
 public:
};

MsgLogin::MsgLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgLogin)
}
MsgLogin::MsgLogin(const MsgLogin& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgLogin* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.passwd_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    _this->_impl_.username_.Set(from._internal_username(), 
      _this->GetArenaForAllocation());
  }
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_passwd().empty()) {
    _this->_impl_.passwd_.Set(from._internal_passwd(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgLogin)
}

inline void MsgLogin::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.username_){}
    , decltype(_impl_.passwd_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.username_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.username_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.passwd_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.passwd_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MsgLogin::~MsgLogin() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgLogin)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgLogin::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.username_.Destroy();
  _impl_.passwd_.Destroy();
}

void MsgLogin::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgLogin::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgLogin)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.username_.ClearToEmpty();
  _impl_.passwd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgLogin::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string username = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_username();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clientmessage.MsgLogin.username"));
        } else
          goto handle_unusual;
        continue;
      // string passwd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_passwd();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "clientmessage.MsgLogin.passwd"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgLogin::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgLogin)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clientmessage.MsgLogin.username");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_username(), target);
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_passwd().data(), static_cast<int>(this->_internal_passwd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "clientmessage.MsgLogin.passwd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_passwd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgLogin)
  return target;
}

size_t MsgLogin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgLogin)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string username = 1;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // string passwd = 2;
  if (!this->_internal_passwd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_passwd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgLogin::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgLogin::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgLogin::GetClassData() const { return &_class_data_; }


void MsgLogin::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgLogin*>(&to_msg);
  auto& from = static_cast<const MsgLogin&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgLogin)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_username().empty()) {
    _this->_internal_set_username(from._internal_username());
  }
  if (!from._internal_passwd().empty()) {
    _this->_internal_set_passwd(from._internal_passwd());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgLogin::CopyFrom(const MsgLogin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgLogin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgLogin::IsInitialized() const {
  return true;
}

void MsgLogin::InternalSwap(MsgLogin* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.username_, lhs_arena,
      &other->_impl_.username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.passwd_, lhs_arena,
      &other->_impl_.passwd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgLogin::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[0]);
}

// ===================================================================

class MsgQueryEvent::_Internal {
 public:
};

MsgQueryEvent::MsgQueryEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgQueryEvent)
}
MsgQueryEvent::MsgQueryEvent(const MsgQueryEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgQueryEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.object_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.object_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.object_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgQueryEvent)
}

inline void MsgQueryEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.object_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgQueryEvent::~MsgQueryEvent() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgQueryEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgQueryEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgQueryEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgQueryEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgQueryEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.object_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.object_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgQueryEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgQueryEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgQueryEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 object_id = 3;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_object_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgQueryEvent)
  return target;
}

size_t MsgQueryEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgQueryEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 object_id = 3;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgQueryEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgQueryEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgQueryEvent::GetClassData() const { return &_class_data_; }


void MsgQueryEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgQueryEvent*>(&to_msg);
  auto& from = static_cast<const MsgQueryEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgQueryEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgQueryEvent::CopyFrom(const MsgQueryEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgQueryEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQueryEvent::IsInitialized() const {
  return true;
}

void MsgQueryEvent::InternalSwap(MsgQueryEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgQueryEvent, _impl_.object_id_)
      + sizeof(MsgQueryEvent::_impl_.object_id_)
      - PROTOBUF_FIELD_OFFSET(MsgQueryEvent, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgQueryEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[1]);
}

// ===================================================================

class MsgQueryQuest::_Internal {
 public:
};

MsgQueryQuest::MsgQueryQuest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgQueryQuest)
}
MsgQueryQuest::MsgQueryQuest(const MsgQueryQuest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MsgQueryQuest* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgQueryQuest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgQueryQuest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgQueryQuest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MsgQueryQuest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[2]);
}

// ===================================================================

class MsgCharMove::_Internal {
 public:
};

MsgCharMove::MsgCharMove(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgCharMove)
}
MsgCharMove::MsgCharMove(const MsgCharMove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgCharMove* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.handle_id_){}
    , decltype(_impl_.stop_logic_count_){}
    , decltype(_impl_.target_x_){}
    , decltype(_impl_.target_y_){}
    , decltype(_impl_.world_x_){}
    , decltype(_impl_.world_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.world_y_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.world_y_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgCharMove)
}

inline void MsgCharMove::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.handle_id_){0}
    , decltype(_impl_.stop_logic_count_){0}
    , decltype(_impl_.target_x_){0}
    , decltype(_impl_.target_y_){0}
    , decltype(_impl_.world_x_){0}
    , decltype(_impl_.world_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgCharMove::~MsgCharMove() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgCharMove)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgCharMove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgCharMove::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgCharMove::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgCharMove)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.world_y_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.world_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgCharMove::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 handle_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.handle_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 stop_logic_count = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.stop_logic_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float target_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float target_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float world_x = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.world_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float world_y = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 69)) {
          _impl_.world_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgCharMove::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgCharMove)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 handle_id = 3;
  if (this->_internal_handle_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_handle_id(), target);
  }

  // int32 stop_logic_count = 4;
  if (this->_internal_stop_logic_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_stop_logic_count(), target);
  }

  // float target_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_target_x(), target);
  }

  // float target_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = this->_internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_target_y(), target);
  }

  // float world_x = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_x = this->_internal_world_x();
  uint32_t raw_world_x;
  memcpy(&raw_world_x, &tmp_world_x, sizeof(tmp_world_x));
  if (raw_world_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_world_x(), target);
  }

  // float world_y = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_y = this->_internal_world_y();
  uint32_t raw_world_y;
  memcpy(&raw_world_y, &tmp_world_y, sizeof(tmp_world_y));
  if (raw_world_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(8, this->_internal_world_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgCharMove)
  return target;
}

size_t MsgCharMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgCharMove)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 handle_id = 3;
  if (this->_internal_handle_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_handle_id());
  }

  // int32 stop_logic_count = 4;
  if (this->_internal_stop_logic_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_stop_logic_count());
  }

  // float target_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    total_size += 1 + 4;
  }

  // float target_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = this->_internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    total_size += 1 + 4;
  }

  // float world_x = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_x = this->_internal_world_x();
  uint32_t raw_world_x;
  memcpy(&raw_world_x, &tmp_world_x, sizeof(tmp_world_x));
  if (raw_world_x != 0) {
    total_size += 1 + 4;
  }

  // float world_y = 8;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_y = this->_internal_world_y();
  uint32_t raw_world_y;
  memcpy(&raw_world_y, &tmp_world_y, sizeof(tmp_world_y));
  if (raw_world_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgCharMove::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgCharMove::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgCharMove::GetClassData() const { return &_class_data_; }


void MsgCharMove::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgCharMove*>(&to_msg);
  auto& from = static_cast<const MsgCharMove&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgCharMove)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_handle_id() != 0) {
    _this->_internal_set_handle_id(from._internal_handle_id());
  }
  if (from._internal_stop_logic_count() != 0) {
    _this->_internal_set_stop_logic_count(from._internal_stop_logic_count());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = from._internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    _this->_internal_set_target_x(from._internal_target_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = from._internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    _this->_internal_set_target_y(from._internal_target_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_x = from._internal_world_x();
  uint32_t raw_world_x;
  memcpy(&raw_world_x, &tmp_world_x, sizeof(tmp_world_x));
  if (raw_world_x != 0) {
    _this->_internal_set_world_x(from._internal_world_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_world_y = from._internal_world_y();
  uint32_t raw_world_y;
  memcpy(&raw_world_y, &tmp_world_y, sizeof(tmp_world_y));
  if (raw_world_y != 0) {
    _this->_internal_set_world_y(from._internal_world_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgCharMove::CopyFrom(const MsgCharMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgCharMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgCharMove::IsInitialized() const {
  return true;
}

void MsgCharMove::InternalSwap(MsgCharMove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgCharMove, _impl_.world_y_)
      + sizeof(MsgCharMove::_impl_.world_y_)
      - PROTOBUF_FIELD_OFFSET(MsgCharMove, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgCharMove::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[3]);
}

// ===================================================================

class MsgUseSkill::_Internal {
 public:
};

MsgUseSkill::MsgUseSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgUseSkill)
}
MsgUseSkill::MsgUseSkill(const MsgUseSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUseSkill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.skill_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.target_x_){}
    , decltype(_impl_.target_y_){}
    , decltype(_impl_.dir_){}
    , decltype(_impl_.guid_){}
    , decltype(_impl_.hurt_delay_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.hurt_delay_time_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.hurt_delay_time_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgUseSkill)
}

inline void MsgUseSkill::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.skill_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.target_x_){0}
    , decltype(_impl_.target_y_){0}
    , decltype(_impl_.dir_){0}
    , decltype(_impl_.guid_){0u}
    , decltype(_impl_.hurt_delay_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgUseSkill::~MsgUseSkill() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgUseSkill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUseSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgUseSkill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgUseSkill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.hurt_delay_time_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.hurt_delay_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUseSkill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 skill_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float target_x = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.target_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float target_y = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.target_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float dir = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.dir_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // uint32 guid = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 hurt_delay_time = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.hurt_delay_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgUseSkill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgUseSkill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 skill_id = 2;
  if (this->_internal_skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_skill_id(), target);
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_id(), target);
  }

  // int32 map_id = 4;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_map_id(), target);
  }

  // float target_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_target_x(), target);
  }

  // float target_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = this->_internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_target_y(), target);
  }

  // float dir = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_dir(), target);
  }

  // uint32 guid = 8;
  if (this->_internal_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_guid(), target);
  }

  // int32 hurt_delay_time = 9;
  if (this->_internal_hurt_delay_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_hurt_delay_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgUseSkill)
  return target;
}

size_t MsgUseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgUseSkill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 skill_id = 2;
  if (this->_internal_skill_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_id());
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 map_id = 4;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // float target_x = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = this->_internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    total_size += 1 + 4;
  }

  // float target_y = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = this->_internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    total_size += 1 + 4;
  }

  // float dir = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = this->_internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    total_size += 1 + 4;
  }

  // uint32 guid = 8;
  if (this->_internal_guid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_guid());
  }

  // int32 hurt_delay_time = 9;
  if (this->_internal_hurt_delay_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_hurt_delay_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUseSkill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUseSkill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUseSkill::GetClassData() const { return &_class_data_; }


void MsgUseSkill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUseSkill*>(&to_msg);
  auto& from = static_cast<const MsgUseSkill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgUseSkill)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_skill_id() != 0) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_x = from._internal_target_x();
  uint32_t raw_target_x;
  memcpy(&raw_target_x, &tmp_target_x, sizeof(tmp_target_x));
  if (raw_target_x != 0) {
    _this->_internal_set_target_x(from._internal_target_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_target_y = from._internal_target_y();
  uint32_t raw_target_y;
  memcpy(&raw_target_y, &tmp_target_y, sizeof(tmp_target_y));
  if (raw_target_y != 0) {
    _this->_internal_set_target_y(from._internal_target_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_dir = from._internal_dir();
  uint32_t raw_dir;
  memcpy(&raw_dir, &tmp_dir, sizeof(tmp_dir));
  if (raw_dir != 0) {
    _this->_internal_set_dir(from._internal_dir());
  }
  if (from._internal_guid() != 0) {
    _this->_internal_set_guid(from._internal_guid());
  }
  if (from._internal_hurt_delay_time() != 0) {
    _this->_internal_set_hurt_delay_time(from._internal_hurt_delay_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUseSkill::CopyFrom(const MsgUseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgUseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseSkill::IsInitialized() const {
  return true;
}

void MsgUseSkill::InternalSwap(MsgUseSkill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgUseSkill, _impl_.hurt_delay_time_)
      + sizeof(MsgUseSkill::_impl_.hurt_delay_time_)
      - PROTOBUF_FIELD_OFFSET(MsgUseSkill, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUseSkill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[4]);
}

// ===================================================================

class MsgEventRequest::_Internal {
 public:
};

MsgEventRequest::MsgEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgEventRequest)
}
MsgEventRequest::MsgEventRequest(const MsgEventRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgEventRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.ex_index_){}
    , decltype(_impl_.mid_script_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mid_script_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.mid_script_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgEventRequest)
}

inline void MsgEventRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.ex_index_){0}
    , decltype(_impl_.mid_script_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgEventRequest::~MsgEventRequest() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgEventRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgEventRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgEventRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgEventRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgEventRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mid_script_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.mid_script_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgEventRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ex_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.ex_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mid_script = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.mid_script_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgEventRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgEventRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_id(), target);
  }

  // int32 ex_index = 4;
  if (this->_internal_ex_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_ex_index(), target);
  }

  // int32 mid_script = 5;
  if (this->_internal_mid_script() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_mid_script(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgEventRequest)
  return target;
}

size_t MsgEventRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgEventRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 ex_index = 4;
  if (this->_internal_ex_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ex_index());
  }

  // int32 mid_script = 5;
  if (this->_internal_mid_script() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mid_script());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgEventRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgEventRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgEventRequest::GetClassData() const { return &_class_data_; }


void MsgEventRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgEventRequest*>(&to_msg);
  auto& from = static_cast<const MsgEventRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgEventRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_ex_index() != 0) {
    _this->_internal_set_ex_index(from._internal_ex_index());
  }
  if (from._internal_mid_script() != 0) {
    _this->_internal_set_mid_script(from._internal_mid_script());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgEventRequest::CopyFrom(const MsgEventRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgEventRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgEventRequest::IsInitialized() const {
  return true;
}

void MsgEventRequest::InternalSwap(MsgEventRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgEventRequest, _impl_.mid_script_)
      + sizeof(MsgEventRequest::_impl_.mid_script_)
      - PROTOBUF_FIELD_OFFSET(MsgEventRequest, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgEventRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[5]);
}

// ===================================================================

class MsgManipulatePet::_Internal {
 public:
};

MsgManipulatePet::MsgManipulatePet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgManipulatePet)
}
MsgManipulatePet::MsgManipulatePet(const MsgManipulatePet& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgManipulatePet* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.high_section_horse_){}
    , decltype(_impl_.low_section_horse_){}
    , decltype(_impl_.manipulate_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.manipulate_type_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.manipulate_type_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgManipulatePet)
}

inline void MsgManipulatePet::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.high_section_horse_){0u}
    , decltype(_impl_.low_section_horse_){0u}
    , decltype(_impl_.manipulate_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgManipulatePet::~MsgManipulatePet() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgManipulatePet)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgManipulatePet::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgManipulatePet::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgManipulatePet::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgManipulatePet)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.manipulate_type_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.manipulate_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgManipulatePet::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 high_section_horse = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.high_section_horse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 low_section_horse = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.low_section_horse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 manipulate_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.manipulate_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgManipulatePet::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgManipulatePet)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // uint32 high_section_horse = 3;
  if (this->_internal_high_section_horse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_high_section_horse(), target);
  }

  // uint32 low_section_horse = 4;
  if (this->_internal_low_section_horse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_low_section_horse(), target);
  }

  // int32 manipulate_type = 5;
  if (this->_internal_manipulate_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_manipulate_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgManipulatePet)
  return target;
}

size_t MsgManipulatePet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgManipulatePet)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // uint32 high_section_horse = 3;
  if (this->_internal_high_section_horse() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_high_section_horse());
  }

  // uint32 low_section_horse = 4;
  if (this->_internal_low_section_horse() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_low_section_horse());
  }

  // int32 manipulate_type = 5;
  if (this->_internal_manipulate_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_manipulate_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgManipulatePet::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgManipulatePet::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgManipulatePet::GetClassData() const { return &_class_data_; }


void MsgManipulatePet::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgManipulatePet*>(&to_msg);
  auto& from = static_cast<const MsgManipulatePet&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgManipulatePet)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_high_section_horse() != 0) {
    _this->_internal_set_high_section_horse(from._internal_high_section_horse());
  }
  if (from._internal_low_section_horse() != 0) {
    _this->_internal_set_low_section_horse(from._internal_low_section_horse());
  }
  if (from._internal_manipulate_type() != 0) {
    _this->_internal_set_manipulate_type(from._internal_manipulate_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgManipulatePet::CopyFrom(const MsgManipulatePet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgManipulatePet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgManipulatePet::IsInitialized() const {
  return true;
}

void MsgManipulatePet::InternalSwap(MsgManipulatePet* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgManipulatePet, _impl_.manipulate_type_)
      + sizeof(MsgManipulatePet::_impl_.manipulate_type_)
      - PROTOBUF_FIELD_OFFSET(MsgManipulatePet, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgManipulatePet::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[6]);
}

// ===================================================================

class MsgPickItem::_Internal {
 public:
};

MsgPickItem::MsgPickItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgPickItem)
}
MsgPickItem::MsgPickItem(const MsgPickItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgPickItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.player_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_id_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.player_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgPickItem)
}

inline void MsgPickItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.player_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgPickItem::~MsgPickItem() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgPickItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgPickItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgPickItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgPickItem::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgPickItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_id_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.player_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgPickItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgPickItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgPickItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 player_id = 3;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_player_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgPickItem)
  return target;
}

size_t MsgPickItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgPickItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 player_id = 3;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgPickItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgPickItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgPickItem::GetClassData() const { return &_class_data_; }


void MsgPickItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgPickItem*>(&to_msg);
  auto& from = static_cast<const MsgPickItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgPickItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgPickItem::CopyFrom(const MsgPickItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgPickItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgPickItem::IsInitialized() const {
  return true;
}

void MsgPickItem::InternalSwap(MsgPickItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgPickItem, _impl_.player_id_)
      + sizeof(MsgPickItem::_impl_.player_id_)
      - PROTOBUF_FIELD_OFFSET(MsgPickItem, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgPickItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[7]);
}

// ===================================================================

class MsgRequestBaseAttrib::_Internal {
 public:
};

MsgRequestBaseAttrib::MsgRequestBaseAttrib(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgRequestBaseAttrib)
}
MsgRequestBaseAttrib::MsgRequestBaseAttrib(const MsgRequestBaseAttrib& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgRequestBaseAttrib* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.target_id_, &from._impl_.target_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.map_id_) -
    reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.map_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgRequestBaseAttrib)
}

inline void MsgRequestBaseAttrib::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.target_id_){0}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgRequestBaseAttrib::~MsgRequestBaseAttrib() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgRequestBaseAttrib)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgRequestBaseAttrib::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgRequestBaseAttrib::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgRequestBaseAttrib::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgRequestBaseAttrib)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.target_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.map_id_) -
      reinterpret_cast<char*>(&_impl_.target_id_)) + sizeof(_impl_.map_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgRequestBaseAttrib::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 target_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgRequestBaseAttrib::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgRequestBaseAttrib)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 target_id = 1;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_target_id(), target);
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_player_id(), target);
  }

  // int32 map_id = 3;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_map_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgRequestBaseAttrib)
  return target;
}

size_t MsgRequestBaseAttrib::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgRequestBaseAttrib)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 target_id = 1;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 player_id = 2;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 3;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgRequestBaseAttrib::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgRequestBaseAttrib::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgRequestBaseAttrib::GetClassData() const { return &_class_data_; }


void MsgRequestBaseAttrib::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgRequestBaseAttrib*>(&to_msg);
  auto& from = static_cast<const MsgRequestBaseAttrib&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgRequestBaseAttrib)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgRequestBaseAttrib::CopyFrom(const MsgRequestBaseAttrib& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgRequestBaseAttrib)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgRequestBaseAttrib::IsInitialized() const {
  return true;
}

void MsgRequestBaseAttrib::InternalSwap(MsgRequestBaseAttrib* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgRequestBaseAttrib, _impl_.map_id_)
      + sizeof(MsgRequestBaseAttrib::_impl_.map_id_)
      - PROTOBUF_FIELD_OFFSET(MsgRequestBaseAttrib, _impl_.target_id_)>(
          reinterpret_cast<char*>(&_impl_.target_id_),
          reinterpret_cast<char*>(&other->_impl_.target_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgRequestBaseAttrib::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[8]);
}

// ===================================================================

class MsgQuestAbandon::_Internal {
 public:
};

MsgQuestAbandon::MsgQuestAbandon(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgQuestAbandon)
}
MsgQuestAbandon::MsgQuestAbandon(const MsgQuestAbandon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgQuestAbandon* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.script_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.script_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.script_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgQuestAbandon)
}

inline void MsgQuestAbandon::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.script_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgQuestAbandon::~MsgQuestAbandon() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgQuestAbandon)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgQuestAbandon::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgQuestAbandon::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgQuestAbandon::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgQuestAbandon)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.script_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.script_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgQuestAbandon::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 script_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.script_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgQuestAbandon::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgQuestAbandon)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_id(), target);
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_script_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgQuestAbandon)
  return target;
}

size_t MsgQuestAbandon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgQuestAbandon)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_script_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgQuestAbandon::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgQuestAbandon::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgQuestAbandon::GetClassData() const { return &_class_data_; }


void MsgQuestAbandon::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgQuestAbandon*>(&to_msg);
  auto& from = static_cast<const MsgQuestAbandon&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgQuestAbandon)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_script_id() != 0) {
    _this->_internal_set_script_id(from._internal_script_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgQuestAbandon::CopyFrom(const MsgQuestAbandon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgQuestAbandon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuestAbandon::IsInitialized() const {
  return true;
}

void MsgQuestAbandon::InternalSwap(MsgQuestAbandon* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgQuestAbandon, _impl_.script_id_)
      + sizeof(MsgQuestAbandon::_impl_.script_id_)
      - PROTOBUF_FIELD_OFFSET(MsgQuestAbandon, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgQuestAbandon::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[9]);
}

// ===================================================================

class MsgQuestAccept::_Internal {
 public:
};

MsgQuestAccept::MsgQuestAccept(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgQuestAccept)
}
MsgQuestAccept::MsgQuestAccept(const MsgQuestAccept& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgQuestAccept* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.script_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.script_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.script_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgQuestAccept)
}

inline void MsgQuestAccept::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.script_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgQuestAccept::~MsgQuestAccept() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgQuestAccept)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgQuestAccept::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgQuestAccept::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgQuestAccept::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgQuestAccept)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.script_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.script_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgQuestAccept::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 script_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.script_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgQuestAccept::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgQuestAccept)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_id(), target);
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_script_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgQuestAccept)
  return target;
}

size_t MsgQuestAccept::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgQuestAccept)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_script_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgQuestAccept::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgQuestAccept::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgQuestAccept::GetClassData() const { return &_class_data_; }


void MsgQuestAccept::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgQuestAccept*>(&to_msg);
  auto& from = static_cast<const MsgQuestAccept&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgQuestAccept)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_script_id() != 0) {
    _this->_internal_set_script_id(from._internal_script_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgQuestAccept::CopyFrom(const MsgQuestAccept& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgQuestAccept)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuestAccept::IsInitialized() const {
  return true;
}

void MsgQuestAccept::InternalSwap(MsgQuestAccept* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgQuestAccept, _impl_.script_id_)
      + sizeof(MsgQuestAccept::_impl_.script_id_)
      - PROTOBUF_FIELD_OFFSET(MsgQuestAccept, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgQuestAccept::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[10]);
}

// ===================================================================

class MsgQuestContinue::_Internal {
 public:
};

MsgQuestContinue::MsgQuestContinue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgQuestContinue)
}
MsgQuestContinue::MsgQuestContinue(const MsgQuestContinue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgQuestContinue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.script_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.script_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.script_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgQuestContinue)
}

inline void MsgQuestContinue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.script_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgQuestContinue::~MsgQuestContinue() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgQuestContinue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgQuestContinue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgQuestContinue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgQuestContinue::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgQuestContinue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.script_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.script_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgQuestContinue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 script_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.script_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgQuestContinue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgQuestContinue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_id(), target);
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_script_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgQuestContinue)
  return target;
}

size_t MsgQuestContinue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgQuestContinue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_script_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgQuestContinue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgQuestContinue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgQuestContinue::GetClassData() const { return &_class_data_; }


void MsgQuestContinue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgQuestContinue*>(&to_msg);
  auto& from = static_cast<const MsgQuestContinue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgQuestContinue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_script_id() != 0) {
    _this->_internal_set_script_id(from._internal_script_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgQuestContinue::CopyFrom(const MsgQuestContinue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgQuestContinue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuestContinue::IsInitialized() const {
  return true;
}

void MsgQuestContinue::InternalSwap(MsgQuestContinue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgQuestContinue, _impl_.script_id_)
      + sizeof(MsgQuestContinue::_impl_.script_id_)
      - PROTOBUF_FIELD_OFFSET(MsgQuestContinue, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgQuestContinue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[11]);
}

// ===================================================================

class MsgQuestRefuse::_Internal {
 public:
};

MsgQuestRefuse::MsgQuestRefuse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgQuestRefuse)
}
MsgQuestRefuse::MsgQuestRefuse(const MsgQuestRefuse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgQuestRefuse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.script_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.script_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.script_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgQuestRefuse)
}

inline void MsgQuestRefuse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.script_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgQuestRefuse::~MsgQuestRefuse() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgQuestRefuse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgQuestRefuse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgQuestRefuse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgQuestRefuse::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgQuestRefuse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.script_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.script_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgQuestRefuse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 script_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.script_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgQuestRefuse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgQuestRefuse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_id(), target);
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_script_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgQuestRefuse)
  return target;
}

size_t MsgQuestRefuse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgQuestRefuse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_script_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgQuestRefuse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgQuestRefuse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgQuestRefuse::GetClassData() const { return &_class_data_; }


void MsgQuestRefuse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgQuestRefuse*>(&to_msg);
  auto& from = static_cast<const MsgQuestRefuse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgQuestRefuse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_script_id() != 0) {
    _this->_internal_set_script_id(from._internal_script_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgQuestRefuse::CopyFrom(const MsgQuestRefuse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgQuestRefuse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuestRefuse::IsInitialized() const {
  return true;
}

void MsgQuestRefuse::InternalSwap(MsgQuestRefuse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgQuestRefuse, _impl_.script_id_)
      + sizeof(MsgQuestRefuse::_impl_.script_id_)
      - PROTOBUF_FIELD_OFFSET(MsgQuestRefuse, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgQuestRefuse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[12]);
}

// ===================================================================

class MsgQuestSubmit::_Internal {
 public:
};

MsgQuestSubmit::MsgQuestSubmit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgQuestSubmit)
}
MsgQuestSubmit::MsgQuestSubmit(const MsgQuestSubmit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgQuestSubmit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.target_id_){}
    , decltype(_impl_.script_id_){}
    , decltype(_impl_.radio_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.radio_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.radio_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgQuestSubmit)
}

inline void MsgQuestSubmit::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.target_id_){0}
    , decltype(_impl_.script_id_){0}
    , decltype(_impl_.radio_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgQuestSubmit::~MsgQuestSubmit() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgQuestSubmit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgQuestSubmit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgQuestSubmit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgQuestSubmit::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgQuestSubmit)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.radio_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.radio_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgQuestSubmit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 target_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.target_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 script_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.script_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 radio_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.radio_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgQuestSubmit::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgQuestSubmit)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_target_id(), target);
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_script_id(), target);
  }

  // int32 radio_id = 5;
  if (this->_internal_radio_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_radio_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgQuestSubmit)
  return target;
}

size_t MsgQuestSubmit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgQuestSubmit)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 target_id = 3;
  if (this->_internal_target_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_target_id());
  }

  // int32 script_id = 4;
  if (this->_internal_script_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_script_id());
  }

  // int32 radio_id = 5;
  if (this->_internal_radio_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_radio_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgQuestSubmit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgQuestSubmit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgQuestSubmit::GetClassData() const { return &_class_data_; }


void MsgQuestSubmit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgQuestSubmit*>(&to_msg);
  auto& from = static_cast<const MsgQuestSubmit&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgQuestSubmit)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_target_id() != 0) {
    _this->_internal_set_target_id(from._internal_target_id());
  }
  if (from._internal_script_id() != 0) {
    _this->_internal_set_script_id(from._internal_script_id());
  }
  if (from._internal_radio_id() != 0) {
    _this->_internal_set_radio_id(from._internal_radio_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgQuestSubmit::CopyFrom(const MsgQuestSubmit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgQuestSubmit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgQuestSubmit::IsInitialized() const {
  return true;
}

void MsgQuestSubmit::InternalSwap(MsgQuestSubmit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgQuestSubmit, _impl_.radio_id_)
      + sizeof(MsgQuestSubmit::_impl_.radio_id_)
      - PROTOBUF_FIELD_OFFSET(MsgQuestSubmit, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgQuestSubmit::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[13]);
}

// ===================================================================

class MsgSwapItem::_Internal {
 public:
};

MsgSwapItem::MsgSwapItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgSwapItem)
}
MsgSwapItem::MsgSwapItem(const MsgSwapItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgSwapItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.object_id_){}
    , decltype(_impl_.source_pos_){}
    , decltype(_impl_.dest_pos_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.dest_pos_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.dest_pos_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgSwapItem)
}

inline void MsgSwapItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.object_id_){0}
    , decltype(_impl_.source_pos_){0}
    , decltype(_impl_.dest_pos_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgSwapItem::~MsgSwapItem() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgSwapItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgSwapItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgSwapItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgSwapItem::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgSwapItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.dest_pos_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.dest_pos_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgSwapItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 object_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 source_pos = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.source_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 dest_pos = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.dest_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgSwapItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgSwapItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 object_id = 3;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_object_id(), target);
  }

  // int32 source_pos = 4;
  if (this->_internal_source_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_source_pos(), target);
  }

  // int32 dest_pos = 5;
  if (this->_internal_dest_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_dest_pos(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgSwapItem)
  return target;
}

size_t MsgSwapItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgSwapItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 object_id = 3;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 source_pos = 4;
  if (this->_internal_source_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_source_pos());
  }

  // int32 dest_pos = 5;
  if (this->_internal_dest_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_dest_pos());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgSwapItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgSwapItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgSwapItem::GetClassData() const { return &_class_data_; }


void MsgSwapItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgSwapItem*>(&to_msg);
  auto& from = static_cast<const MsgSwapItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgSwapItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_source_pos() != 0) {
    _this->_internal_set_source_pos(from._internal_source_pos());
  }
  if (from._internal_dest_pos() != 0) {
    _this->_internal_set_dest_pos(from._internal_dest_pos());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgSwapItem::CopyFrom(const MsgSwapItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgSwapItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgSwapItem::IsInitialized() const {
  return true;
}

void MsgSwapItem::InternalSwap(MsgSwapItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgSwapItem, _impl_.dest_pos_)
      + sizeof(MsgSwapItem::_impl_.dest_pos_)
      - PROTOBUF_FIELD_OFFSET(MsgSwapItem, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgSwapItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[14]);
}

// ===================================================================

class MsgTick::_Internal {
 public:
};

MsgTick::MsgTick(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgTick)
}
MsgTick::MsgTick(const MsgTick& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgTick* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.position_x_){}
    , decltype(_impl_.position_z_){}
    , decltype(_impl_.player_id_){}
    , decltype(_impl_.player_pos_x_){}
    , decltype(_impl_.player_pos_y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.object_id_, &from._impl_.object_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.player_pos_y_) -
    reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.player_pos_y_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgTick)
}

inline void MsgTick::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.position_x_){0}
    , decltype(_impl_.position_z_){0}
    , decltype(_impl_.player_id_){0}
    , decltype(_impl_.player_pos_x_){0}
    , decltype(_impl_.player_pos_y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgTick::~MsgTick() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgTick)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgTick::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgTick::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgTick::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgTick)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.object_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.player_pos_y_) -
      reinterpret_cast<char*>(&_impl_.object_id_)) + sizeof(_impl_.player_pos_y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTick::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 object_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.object_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float position_x = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.position_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float position_z = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.position_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int32 player_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float player_pos_x = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 53)) {
          _impl_.player_pos_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float player_pos_y = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 61)) {
          _impl_.player_pos_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgTick::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgTick)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_object_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // float position_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_position_x(), target);
  }

  // float position_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = this->_internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_position_z(), target);
  }

  // int32 player_id = 5;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_player_id(), target);
  }

  // float player_pos_x = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_pos_x = this->_internal_player_pos_x();
  uint32_t raw_player_pos_x;
  memcpy(&raw_player_pos_x, &tmp_player_pos_x, sizeof(tmp_player_pos_x));
  if (raw_player_pos_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(6, this->_internal_player_pos_x(), target);
  }

  // float player_pos_y = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_pos_y = this->_internal_player_pos_y();
  uint32_t raw_player_pos_y;
  memcpy(&raw_player_pos_y, &tmp_player_pos_y, sizeof(tmp_player_pos_y));
  if (raw_player_pos_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(7, this->_internal_player_pos_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgTick)
  return target;
}

size_t MsgTick::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgTick)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 object_id = 1;
  if (this->_internal_object_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // float position_x = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = this->_internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    total_size += 1 + 4;
  }

  // float position_z = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = this->_internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    total_size += 1 + 4;
  }

  // int32 player_id = 5;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // float player_pos_x = 6;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_pos_x = this->_internal_player_pos_x();
  uint32_t raw_player_pos_x;
  memcpy(&raw_player_pos_x, &tmp_player_pos_x, sizeof(tmp_player_pos_x));
  if (raw_player_pos_x != 0) {
    total_size += 1 + 4;
  }

  // float player_pos_y = 7;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_pos_y = this->_internal_player_pos_y();
  uint32_t raw_player_pos_y;
  memcpy(&raw_player_pos_y, &tmp_player_pos_y, sizeof(tmp_player_pos_y));
  if (raw_player_pos_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgTick::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgTick::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgTick::GetClassData() const { return &_class_data_; }


void MsgTick::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgTick*>(&to_msg);
  auto& from = static_cast<const MsgTick&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgTick)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_object_id() != 0) {
    _this->_internal_set_object_id(from._internal_object_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_x = from._internal_position_x();
  uint32_t raw_position_x;
  memcpy(&raw_position_x, &tmp_position_x, sizeof(tmp_position_x));
  if (raw_position_x != 0) {
    _this->_internal_set_position_x(from._internal_position_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_position_z = from._internal_position_z();
  uint32_t raw_position_z;
  memcpy(&raw_position_z, &tmp_position_z, sizeof(tmp_position_z));
  if (raw_position_z != 0) {
    _this->_internal_set_position_z(from._internal_position_z());
  }
  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_pos_x = from._internal_player_pos_x();
  uint32_t raw_player_pos_x;
  memcpy(&raw_player_pos_x, &tmp_player_pos_x, sizeof(tmp_player_pos_x));
  if (raw_player_pos_x != 0) {
    _this->_internal_set_player_pos_x(from._internal_player_pos_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_player_pos_y = from._internal_player_pos_y();
  uint32_t raw_player_pos_y;
  memcpy(&raw_player_pos_y, &tmp_player_pos_y, sizeof(tmp_player_pos_y));
  if (raw_player_pos_y != 0) {
    _this->_internal_set_player_pos_y(from._internal_player_pos_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgTick::CopyFrom(const MsgTick& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgTick)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTick::IsInitialized() const {
  return true;
}

void MsgTick::InternalSwap(MsgTick* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTick, _impl_.player_pos_y_)
      + sizeof(MsgTick::_impl_.player_pos_y_)
      - PROTOBUF_FIELD_OFFSET(MsgTick, _impl_.object_id_)>(
          reinterpret_cast<char*>(&_impl_.object_id_),
          reinterpret_cast<char*>(&other->_impl_.object_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTick::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[15]);
}

// ===================================================================

class MsgTakeDownEquip::_Internal {
 public:
};

MsgTakeDownEquip::MsgTakeDownEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgTakeDownEquip)
}
MsgTakeDownEquip::MsgTakeDownEquip(const MsgTakeDownEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgTakeDownEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.equip_point_){}
    , decltype(_impl_.bag_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bag_index_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.bag_index_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgTakeDownEquip)
}

inline void MsgTakeDownEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.equip_point_){0}
    , decltype(_impl_.bag_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgTakeDownEquip::~MsgTakeDownEquip() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgTakeDownEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgTakeDownEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgTakeDownEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgTakeDownEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgTakeDownEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bag_index_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.bag_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgTakeDownEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 equip_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.equip_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bag_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bag_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgTakeDownEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgTakeDownEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 equip_point = 3;
  if (this->_internal_equip_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_equip_point(), target);
  }

  // int32 bag_index = 4;
  if (this->_internal_bag_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bag_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgTakeDownEquip)
  return target;
}

size_t MsgTakeDownEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgTakeDownEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 equip_point = 3;
  if (this->_internal_equip_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equip_point());
  }

  // int32 bag_index = 4;
  if (this->_internal_bag_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bag_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgTakeDownEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgTakeDownEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgTakeDownEquip::GetClassData() const { return &_class_data_; }


void MsgTakeDownEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgTakeDownEquip*>(&to_msg);
  auto& from = static_cast<const MsgTakeDownEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgTakeDownEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_equip_point() != 0) {
    _this->_internal_set_equip_point(from._internal_equip_point());
  }
  if (from._internal_bag_index() != 0) {
    _this->_internal_set_bag_index(from._internal_bag_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgTakeDownEquip::CopyFrom(const MsgTakeDownEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgTakeDownEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgTakeDownEquip::IsInitialized() const {
  return true;
}

void MsgTakeDownEquip::InternalSwap(MsgTakeDownEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgTakeDownEquip, _impl_.bag_index_)
      + sizeof(MsgTakeDownEquip::_impl_.bag_index_)
      - PROTOBUF_FIELD_OFFSET(MsgTakeDownEquip, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgTakeDownEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[16]);
}

// ===================================================================

class MsgUseAbility::_Internal {
 public:
};

MsgUseAbility::MsgUseAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgUseAbility)
}
MsgUseAbility::MsgUseAbility(const MsgUseAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUseAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.ability_id_){}
    , decltype(_impl_.object_guid_){}
    , decltype(_impl_.prescription_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.prescription_id_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.prescription_id_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgUseAbility)
}

inline void MsgUseAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.ability_id_){0}
    , decltype(_impl_.object_guid_){0}
    , decltype(_impl_.prescription_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgUseAbility::~MsgUseAbility() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgUseAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUseAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgUseAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUseAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgUseAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.prescription_id_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.prescription_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUseAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ability_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.ability_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 object_guid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.object_guid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 prescription_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.prescription_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgUseAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgUseAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 ability_id = 3;
  if (this->_internal_ability_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_ability_id(), target);
  }

  // int32 object_guid = 4;
  if (this->_internal_object_guid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_object_guid(), target);
  }

  // int32 prescription_id = 5;
  if (this->_internal_prescription_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_prescription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgUseAbility)
  return target;
}

size_t MsgUseAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgUseAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 ability_id = 3;
  if (this->_internal_ability_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ability_id());
  }

  // int32 object_guid = 4;
  if (this->_internal_object_guid() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_object_guid());
  }

  // int32 prescription_id = 5;
  if (this->_internal_prescription_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_prescription_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUseAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUseAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUseAbility::GetClassData() const { return &_class_data_; }


void MsgUseAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUseAbility*>(&to_msg);
  auto& from = static_cast<const MsgUseAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgUseAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_ability_id() != 0) {
    _this->_internal_set_ability_id(from._internal_ability_id());
  }
  if (from._internal_object_guid() != 0) {
    _this->_internal_set_object_guid(from._internal_object_guid());
  }
  if (from._internal_prescription_id() != 0) {
    _this->_internal_set_prescription_id(from._internal_prescription_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUseAbility::CopyFrom(const MsgUseAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgUseAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseAbility::IsInitialized() const {
  return true;
}

void MsgUseAbility::InternalSwap(MsgUseAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgUseAbility, _impl_.prescription_id_)
      + sizeof(MsgUseAbility::_impl_.prescription_id_)
      - PROTOBUF_FIELD_OFFSET(MsgUseAbility, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUseAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[17]);
}

// ===================================================================

class MsgUseEquip::_Internal {
 public:
};

MsgUseEquip::MsgUseEquip(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:clientmessage.MsgUseEquip)
}
MsgUseEquip::MsgUseEquip(const MsgUseEquip& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MsgUseEquip* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){}
    , decltype(_impl_.map_id_){}
    , decltype(_impl_.equip_point_){}
    , decltype(_impl_.bag_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.player_id_, &from._impl_.player_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.bag_index_) -
    reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.bag_index_));
  // @@protoc_insertion_point(copy_constructor:clientmessage.MsgUseEquip)
}

inline void MsgUseEquip::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.player_id_){0}
    , decltype(_impl_.map_id_){0}
    , decltype(_impl_.equip_point_){0}
    , decltype(_impl_.bag_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

MsgUseEquip::~MsgUseEquip() {
  // @@protoc_insertion_point(destructor:clientmessage.MsgUseEquip)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MsgUseEquip::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MsgUseEquip::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MsgUseEquip::Clear() {
// @@protoc_insertion_point(message_clear_start:clientmessage.MsgUseEquip)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.player_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.bag_index_) -
      reinterpret_cast<char*>(&_impl_.player_id_)) + sizeof(_impl_.bag_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgUseEquip::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.player_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 map_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.map_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 equip_point = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.equip_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bag_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.bag_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MsgUseEquip::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:clientmessage.MsgUseEquip)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_player_id(), target);
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_map_id(), target);
  }

  // int32 equip_point = 3;
  if (this->_internal_equip_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_equip_point(), target);
  }

  // int32 bag_index = 4;
  if (this->_internal_bag_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_bag_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:clientmessage.MsgUseEquip)
  return target;
}

size_t MsgUseEquip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:clientmessage.MsgUseEquip)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 player_id = 1;
  if (this->_internal_player_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_player_id());
  }

  // int32 map_id = 2;
  if (this->_internal_map_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_map_id());
  }

  // int32 equip_point = 3;
  if (this->_internal_equip_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equip_point());
  }

  // int32 bag_index = 4;
  if (this->_internal_bag_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bag_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MsgUseEquip::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MsgUseEquip::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MsgUseEquip::GetClassData() const { return &_class_data_; }


void MsgUseEquip::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MsgUseEquip*>(&to_msg);
  auto& from = static_cast<const MsgUseEquip&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:clientmessage.MsgUseEquip)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_player_id() != 0) {
    _this->_internal_set_player_id(from._internal_player_id());
  }
  if (from._internal_map_id() != 0) {
    _this->_internal_set_map_id(from._internal_map_id());
  }
  if (from._internal_equip_point() != 0) {
    _this->_internal_set_equip_point(from._internal_equip_point());
  }
  if (from._internal_bag_index() != 0) {
    _this->_internal_set_bag_index(from._internal_bag_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MsgUseEquip::CopyFrom(const MsgUseEquip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:clientmessage.MsgUseEquip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgUseEquip::IsInitialized() const {
  return true;
}

void MsgUseEquip::InternalSwap(MsgUseEquip* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgUseEquip, _impl_.bag_index_)
      + sizeof(MsgUseEquip::_impl_.bag_index_)
      - PROTOBUF_FIELD_OFFSET(MsgUseEquip, _impl_.player_id_)>(
          reinterpret_cast<char*>(&_impl_.player_id_),
          reinterpret_cast<char*>(&other->_impl_.player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgUseEquip::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_client_5fmessage_2eproto_getter, &descriptor_table_client_5fmessage_2eproto_once,
      file_level_metadata_client_5fmessage_2eproto[18]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace clientmessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::clientmessage::MsgLogin*
Arena::CreateMaybeMessage< ::clientmessage::MsgLogin >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgLogin >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgQueryEvent*
Arena::CreateMaybeMessage< ::clientmessage::MsgQueryEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgQueryEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgQueryQuest*
Arena::CreateMaybeMessage< ::clientmessage::MsgQueryQuest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgQueryQuest >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgCharMove*
Arena::CreateMaybeMessage< ::clientmessage::MsgCharMove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgCharMove >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgUseSkill*
Arena::CreateMaybeMessage< ::clientmessage::MsgUseSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgUseSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgEventRequest*
Arena::CreateMaybeMessage< ::clientmessage::MsgEventRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgEventRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgManipulatePet*
Arena::CreateMaybeMessage< ::clientmessage::MsgManipulatePet >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgManipulatePet >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgPickItem*
Arena::CreateMaybeMessage< ::clientmessage::MsgPickItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgPickItem >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgRequestBaseAttrib*
Arena::CreateMaybeMessage< ::clientmessage::MsgRequestBaseAttrib >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgRequestBaseAttrib >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgQuestAbandon*
Arena::CreateMaybeMessage< ::clientmessage::MsgQuestAbandon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgQuestAbandon >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgQuestAccept*
Arena::CreateMaybeMessage< ::clientmessage::MsgQuestAccept >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgQuestAccept >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgQuestContinue*
Arena::CreateMaybeMessage< ::clientmessage::MsgQuestContinue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgQuestContinue >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgQuestRefuse*
Arena::CreateMaybeMessage< ::clientmessage::MsgQuestRefuse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgQuestRefuse >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgQuestSubmit*
Arena::CreateMaybeMessage< ::clientmessage::MsgQuestSubmit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgQuestSubmit >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgSwapItem*
Arena::CreateMaybeMessage< ::clientmessage::MsgSwapItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgSwapItem >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgTick*
Arena::CreateMaybeMessage< ::clientmessage::MsgTick >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgTick >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgTakeDownEquip*
Arena::CreateMaybeMessage< ::clientmessage::MsgTakeDownEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgTakeDownEquip >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgUseAbility*
Arena::CreateMaybeMessage< ::clientmessage::MsgUseAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgUseAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::clientmessage::MsgUseEquip*
Arena::CreateMaybeMessage< ::clientmessage::MsgUseEquip >(Arena* arena) {
  return Arena::CreateMessageInternal< ::clientmessage::MsgUseEquip >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
