// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: base.proto

#include "base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace base {
PROTOBUF_CONSTEXPR Flag64::Flag64(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.low_flags_)*/0u
  , /*decltype(_impl_.high_flags_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Flag64DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Flag64DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Flag64DefaultTypeInternal() {}
  union {
    Flag64 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Flag64DefaultTypeInternal _Flag64_default_instance_;
PROTOBUF_CONSTEXPR SCampData::SCampData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.camp_id_)*/0
  , /*decltype(_impl_.pk_mode_)*/0
  , /*decltype(_impl_.reserve1_)*/0
  , /*decltype(_impl_.reserve2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SCampDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCampDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCampDataDefaultTypeInternal() {}
  union {
    SCampData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCampDataDefaultTypeInternal _SCampData_default_instance_;
PROTOBUF_CONSTEXPR SHorseGuid::SHorseGuid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.high_section_)*/0u
  , /*decltype(_impl_.low_section_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SHorseGuidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SHorseGuidDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SHorseGuidDefaultTypeInternal() {}
  union {
    SHorseGuid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SHorseGuidDefaultTypeInternal _SHorseGuid_default_instance_;
PROTOBUF_CONSTEXPR ImpactStruct::ImpactStruct(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.buff_id_)*/0
  , /*decltype(_impl_.sn_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ImpactStructDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ImpactStructDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ImpactStructDefaultTypeInternal() {}
  union {
    ImpactStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ImpactStructDefaultTypeInternal _ImpactStruct_default_instance_;
PROTOBUF_CONSTEXPR GLPos::GLPos(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.fx_)*/0
  , /*decltype(_impl_.fz_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct GLPosDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GLPosDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GLPosDefaultTypeInternal() {}
  union {
    GLPos _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GLPosDefaultTypeInternal _GLPos_default_instance_;
PROTOBUF_CONSTEXPR SXParam::SXParam(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.int_value_)*/{}
  , /*decltype(_impl_._int_value_cached_byte_size_)*/{0}
  , /*decltype(_impl_.str_offset_)*/{}
  , /*decltype(_impl_._str_offset_cached_byte_size_)*/{0}
  , /*decltype(_impl_.str_value_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SXParamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SXParamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SXParamDefaultTypeInternal() {}
  union {
    SXParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SXParamDefaultTypeInternal _SXParam_default_instance_;
PROTOBUF_CONSTEXPR PlayerAbility::PlayerAbility(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.id_)*/0u
  , /*decltype(_impl_.level_)*/0u
  , /*decltype(_impl_.exp_)*/0u
  , /*decltype(_impl_.need_level_)*/0
  , /*decltype(_impl_.need_exp_)*/0
  , /*decltype(_impl_.need_money_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerAbilityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerAbilityDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerAbilityDefaultTypeInternal() {}
  union {
    PlayerAbility _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerAbilityDefaultTypeInternal _PlayerAbility_default_instance_;
PROTOBUF_CONSTEXPR HorseSkill::HorseSkill(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_id_)*/0
  , /*decltype(_impl_.can_use_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct HorseSkillDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HorseSkillDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~HorseSkillDefaultTypeInternal() {}
  union {
    HorseSkill _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HorseSkillDefaultTypeInternal _HorseSkill_default_instance_;
PROTOBUF_CONSTEXPR SItemGuid::SItemGuid(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.world_)*/0
  , /*decltype(_impl_.server_)*/0
  , /*decltype(_impl_.serial_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SItemGuidDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SItemGuidDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SItemGuidDefaultTypeInternal() {}
  union {
    SItemGuid _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SItemGuidDefaultTypeInternal _SItemGuid_default_instance_;
PROTOBUF_CONSTEXPR SItemGemInfo::SItemGemInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gem_index_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SItemGemInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SItemGemInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SItemGemInfoDefaultTypeInternal() {}
  union {
    SItemGemInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SItemGemInfoDefaultTypeInternal _SItemGemInfo_default_instance_;
PROTOBUF_CONSTEXPR SItemValue::SItemValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SItemValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SItemValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SItemValueDefaultTypeInternal() {}
  union {
    SItemValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SItemValueDefaultTypeInternal _SItemValue_default_instance_;
PROTOBUF_CONSTEXPR SItemProperty::SItemProperty(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.item_value_)*/nullptr
  , /*decltype(_impl_.attr_type_)*/0
  , /*decltype(_impl_.intensify_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SItemPropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SItemPropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SItemPropertyDefaultTypeInternal() {}
  union {
    SItemProperty _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SItemPropertyDefaultTypeInternal _SItemProperty_default_instance_;
PROTOBUF_CONSTEXPR SItemConstInfo::SItemConstInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.const_attrs_)*/{}
  , /*decltype(_impl_.const_id_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SItemConstInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SItemConstInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SItemConstInfoDefaultTypeInternal() {}
  union {
    SItemConstInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SItemConstInfoDefaultTypeInternal _SItemConstInfo_default_instance_;
PROTOBUF_CONSTEXPR SEquipInfo::SEquipInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gems_)*/{}
  , /*decltype(_impl_.propertys_)*/{}
  , /*decltype(_impl_.consts_)*/{}
  , /*decltype(_impl_.equip_level_)*/0
  , /*decltype(_impl_.bind_)*/0
  , /*decltype(_impl_.pai_type_)*/0
  , /*decltype(_impl_.equip_type_)*/0
  , /*decltype(_impl_.equip_score_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_.curr_max_dur_)*/0
  , /*decltype(_impl_.curr_dur_point_)*/0
  , /*decltype(_impl_.curr_damage_point_)*/0
  , /*decltype(_impl_.curr_gem_hole_)*/0
  , /*decltype(_impl_.lock_)*/0
  , /*decltype(_impl_.lock_time_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SEquipInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SEquipInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SEquipInfoDefaultTypeInternal() {}
  union {
    SEquipInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SEquipInfoDefaultTypeInternal _SEquipInfo_default_instance_;
PROTOBUF_CONSTEXPR SMedicInfo::SMedicInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.count_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SMedicInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SMedicInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SMedicInfoDefaultTypeInternal() {}
  union {
    SMedicInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SMedicInfoDefaultTypeInternal _SMedicInfo_default_instance_;
PROTOBUF_CONSTEXPR ExtraBagInfo::ExtraBagInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.begin_time_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ExtraBagInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ExtraBagInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ExtraBagInfoDefaultTypeInternal() {}
  union {
    ExtraBagInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ExtraBagInfoDefaultTypeInternal _ExtraBagInfo_default_instance_;
PROTOBUF_CONSTEXPR SItem::SItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.params_)*/{}
  , /*decltype(_impl_._params_cached_byte_size_)*/{0}
  , /*decltype(_impl_.creator_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.item_guid_)*/nullptr
  , /*decltype(_impl_.equip_info_)*/nullptr
  , /*decltype(_impl_.medic_info_)*/nullptr
  , /*decltype(_impl_.extra_bag_)*/nullptr
  , /*decltype(_impl_.item_id_)*/0
  , /*decltype(_impl_.item_pos_)*/0
  , /*decltype(_impl_.item_index_)*/0u
  , /*decltype(_impl_.ns_bind_)*/0
  , /*decltype(_impl_.term_endtime_)*/0u} {}
struct SItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SItemDefaultTypeInternal() {}
  union {
    SItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SItemDefaultTypeInternal _SItem_default_instance_;
PROTOBUF_CONSTEXPR PlayerSpell::PlayerSpell(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.skill_id_)*/0
  , /*decltype(_impl_.state_)*/0
  , /*decltype(_impl_.level_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PlayerSpellDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerSpellDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerSpellDefaultTypeInternal() {}
  union {
    PlayerSpell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerSpellDefaultTypeInternal _PlayerSpell_default_instance_;
PROTOBUF_CONSTEXPR Quest::Quest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a_param_)*/{}
  , /*decltype(_impl_._a_param_cached_byte_size_)*/{0}
  , /*decltype(_impl_.af_param_)*/{}
  , /*decltype(_impl_.an_param_)*/{}
  , /*decltype(_impl_._an_param_cached_byte_size_)*/{0}
  , /*decltype(_impl_.ab_param_)*/{}
  , /*decltype(_impl_._ab_param_cached_byte_size_)*/{0}
  , /*decltype(_impl_.quest_id_)*/0
  , /*decltype(_impl_.script_id_)*/0
  , /*decltype(_impl_.y_flag_)*/0
  , /*decltype(_impl_.have_done_)*/0u
  , /*decltype(_impl_.quest_data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct QuestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR QuestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~QuestDefaultTypeInternal() {}
  union {
    Quest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 QuestDefaultTypeInternal _Quest_default_instance_;
PROTOBUF_CONSTEXPR SArchiveLoader_Quest::SArchiveLoader_Quest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.quests_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SArchiveLoader_QuestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SArchiveLoader_QuestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SArchiveLoader_QuestDefaultTypeInternal() {}
  union {
    SArchiveLoader_Quest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SArchiveLoader_QuestDefaultTypeInternal _SArchiveLoader_Quest_default_instance_;
PROTOBUF_CONSTEXPR Player_Setting::Player_Setting(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.setting_type_)*/0
  , /*decltype(_impl_.setting_data_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Player_SettingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Player_SettingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Player_SettingDefaultTypeInternal() {}
  union {
    Player_Setting _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Player_SettingDefaultTypeInternal _Player_Setting_default_instance_;
PROTOBUF_CONSTEXPR SQuestBonusItem::SQuestBonusItem(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ycount_)*/0
  , /*decltype(_impl_.item_id_)*/0u
  , /*decltype(_impl_.yindex_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SQuestBonusItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SQuestBonusItemDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SQuestBonusItemDefaultTypeInternal() {}
  union {
    SQuestBonusItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SQuestBonusItemDefaultTypeInternal _SQuestBonusItem_default_instance_;
PROTOBUF_CONSTEXPR SQuestBonus::SQuestBonus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.bonus_item_)*/nullptr
  , /*decltype(_impl_.type_)*/0
  , /*decltype(_impl_.money_)*/0u
  , /*decltype(_impl_.exp_)*/0u} {}
struct SQuestBonusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SQuestBonusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SQuestBonusDefaultTypeInternal() {}
  union {
    SQuestBonus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SQuestBonusDefaultTypeInternal _SQuestBonus_default_instance_;
PROTOBUF_CONSTEXPR ScriptParam_QuestInfo::ScriptParam_QuestInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.bonus_)*/{}
  , /*decltype(_impl_.text_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.npc_id_)*/0
  , /*decltype(_impl_.script_id_)*/0
  , /*decltype(_impl_.quest_id_)*/0
  , /*decltype(_impl_.yflags_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScriptParam_QuestInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScriptParam_QuestInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScriptParam_QuestInfoDefaultTypeInternal() {}
  union {
    ScriptParam_QuestInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScriptParam_QuestInfoDefaultTypeInternal _ScriptParam_QuestInfo_default_instance_;
}  // namespace base
static ::_pb::Metadata file_level_metadata_base_2eproto[24];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_base_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_base_2eproto = nullptr;

const uint32_t TableStruct_base_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::Flag64, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::Flag64, _impl_.low_flags_),
  PROTOBUF_FIELD_OFFSET(::base::Flag64, _impl_.high_flags_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SCampData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SCampData, _impl_.camp_id_),
  PROTOBUF_FIELD_OFFSET(::base::SCampData, _impl_.pk_mode_),
  PROTOBUF_FIELD_OFFSET(::base::SCampData, _impl_.reserve1_),
  PROTOBUF_FIELD_OFFSET(::base::SCampData, _impl_.reserve2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SHorseGuid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SHorseGuid, _impl_.high_section_),
  PROTOBUF_FIELD_OFFSET(::base::SHorseGuid, _impl_.low_section_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::ImpactStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::ImpactStruct, _impl_.buff_id_),
  PROTOBUF_FIELD_OFFSET(::base::ImpactStruct, _impl_.sn_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::GLPos, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::GLPos, _impl_.fx_),
  PROTOBUF_FIELD_OFFSET(::base::GLPos, _impl_.fz_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SXParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SXParam, _impl_.int_value_),
  PROTOBUF_FIELD_OFFSET(::base::SXParam, _impl_.str_offset_),
  PROTOBUF_FIELD_OFFSET(::base::SXParam, _impl_.str_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::PlayerAbility, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::PlayerAbility, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::base::PlayerAbility, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::base::PlayerAbility, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::base::PlayerAbility, _impl_.need_level_),
  PROTOBUF_FIELD_OFFSET(::base::PlayerAbility, _impl_.need_exp_),
  PROTOBUF_FIELD_OFFSET(::base::PlayerAbility, _impl_.need_money_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::HorseSkill, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::HorseSkill, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::base::HorseSkill, _impl_.can_use_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SItemGuid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SItemGuid, _impl_.world_),
  PROTOBUF_FIELD_OFFSET(::base::SItemGuid, _impl_.server_),
  PROTOBUF_FIELD_OFFSET(::base::SItemGuid, _impl_.serial_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SItemGemInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SItemGemInfo, _impl_.gem_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SItemValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SItemValue, _impl_.value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SItemProperty, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SItemProperty, _impl_.attr_type_),
  PROTOBUF_FIELD_OFFSET(::base::SItemProperty, _impl_.intensify_count_),
  PROTOBUF_FIELD_OFFSET(::base::SItemProperty, _impl_.item_value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SItemConstInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SItemConstInfo, _impl_.const_id_),
  PROTOBUF_FIELD_OFFSET(::base::SItemConstInfo, _impl_.const_attrs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.equip_level_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.bind_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.pai_type_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.equip_type_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.equip_score_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.level_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.curr_max_dur_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.curr_dur_point_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.curr_damage_point_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.curr_gem_hole_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.gems_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.propertys_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.lock_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.lock_time_),
  PROTOBUF_FIELD_OFFSET(::base::SEquipInfo, _impl_.consts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SMedicInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SMedicInfo, _impl_.count_),
  PROTOBUF_FIELD_OFFSET(::base::SMedicInfo, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::ExtraBagInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::ExtraBagInfo, _impl_.begin_time_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.item_pos_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.item_guid_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.item_index_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.ns_bind_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.creator_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.params_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.term_endtime_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.equip_info_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.medic_info_),
  PROTOBUF_FIELD_OFFSET(::base::SItem, _impl_.extra_bag_),
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::PlayerSpell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::PlayerSpell, _impl_.skill_id_),
  PROTOBUF_FIELD_OFFSET(::base::PlayerSpell, _impl_.state_),
  PROTOBUF_FIELD_OFFSET(::base::PlayerSpell, _impl_.level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::Quest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.quest_id_),
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.script_id_),
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.y_flag_),
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.a_param_),
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.af_param_),
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.an_param_),
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.ab_param_),
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.have_done_),
  PROTOBUF_FIELD_OFFSET(::base::Quest, _impl_.quest_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SArchiveLoader_Quest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SArchiveLoader_Quest, _impl_.quests_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::Player_Setting, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::Player_Setting, _impl_.setting_type_),
  PROTOBUF_FIELD_OFFSET(::base::Player_Setting, _impl_.setting_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonusItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonusItem, _impl_.ycount_),
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonusItem, _impl_.item_id_),
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonusItem, _impl_.yindex_),
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonus, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonus, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonus, _impl_.money_),
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonus, _impl_.exp_),
  PROTOBUF_FIELD_OFFSET(::base::SQuestBonus, _impl_.bonus_item_),
  ~0u,
  1,
  2,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::base::ScriptParam_QuestInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::base::ScriptParam_QuestInfo, _impl_.npc_id_),
  PROTOBUF_FIELD_OFFSET(::base::ScriptParam_QuestInfo, _impl_.script_id_),
  PROTOBUF_FIELD_OFFSET(::base::ScriptParam_QuestInfo, _impl_.quest_id_),
  PROTOBUF_FIELD_OFFSET(::base::ScriptParam_QuestInfo, _impl_.yflags_),
  PROTOBUF_FIELD_OFFSET(::base::ScriptParam_QuestInfo, _impl_.text_),
  PROTOBUF_FIELD_OFFSET(::base::ScriptParam_QuestInfo, _impl_.bonus_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::base::Flag64)},
  { 8, -1, -1, sizeof(::base::SCampData)},
  { 18, -1, -1, sizeof(::base::SHorseGuid)},
  { 26, -1, -1, sizeof(::base::ImpactStruct)},
  { 34, -1, -1, sizeof(::base::GLPos)},
  { 42, -1, -1, sizeof(::base::SXParam)},
  { 51, -1, -1, sizeof(::base::PlayerAbility)},
  { 63, -1, -1, sizeof(::base::HorseSkill)},
  { 71, -1, -1, sizeof(::base::SItemGuid)},
  { 80, -1, -1, sizeof(::base::SItemGemInfo)},
  { 87, -1, -1, sizeof(::base::SItemValue)},
  { 94, -1, -1, sizeof(::base::SItemProperty)},
  { 103, -1, -1, sizeof(::base::SItemConstInfo)},
  { 111, -1, -1, sizeof(::base::SEquipInfo)},
  { 132, -1, -1, sizeof(::base::SMedicInfo)},
  { 140, -1, -1, sizeof(::base::ExtraBagInfo)},
  { 147, 164, -1, sizeof(::base::SItem)},
  { 175, -1, -1, sizeof(::base::PlayerSpell)},
  { 184, -1, -1, sizeof(::base::Quest)},
  { 199, -1, -1, sizeof(::base::SArchiveLoader_Quest)},
  { 206, -1, -1, sizeof(::base::Player_Setting)},
  { 214, -1, -1, sizeof(::base::SQuestBonusItem)},
  { 223, 233, -1, sizeof(::base::SQuestBonus)},
  { 237, -1, -1, sizeof(::base::ScriptParam_QuestInfo)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::base::_Flag64_default_instance_._instance,
  &::base::_SCampData_default_instance_._instance,
  &::base::_SHorseGuid_default_instance_._instance,
  &::base::_ImpactStruct_default_instance_._instance,
  &::base::_GLPos_default_instance_._instance,
  &::base::_SXParam_default_instance_._instance,
  &::base::_PlayerAbility_default_instance_._instance,
  &::base::_HorseSkill_default_instance_._instance,
  &::base::_SItemGuid_default_instance_._instance,
  &::base::_SItemGemInfo_default_instance_._instance,
  &::base::_SItemValue_default_instance_._instance,
  &::base::_SItemProperty_default_instance_._instance,
  &::base::_SItemConstInfo_default_instance_._instance,
  &::base::_SEquipInfo_default_instance_._instance,
  &::base::_SMedicInfo_default_instance_._instance,
  &::base::_ExtraBagInfo_default_instance_._instance,
  &::base::_SItem_default_instance_._instance,
  &::base::_PlayerSpell_default_instance_._instance,
  &::base::_Quest_default_instance_._instance,
  &::base::_SArchiveLoader_Quest_default_instance_._instance,
  &::base::_Player_Setting_default_instance_._instance,
  &::base::_SQuestBonusItem_default_instance_._instance,
  &::base::_SQuestBonus_default_instance_._instance,
  &::base::_ScriptParam_QuestInfo_default_instance_._instance,
};

const char descriptor_table_protodef_base_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nbase.proto\022\004base\"/\n\006Flag64\022\021\n\tlow_flag"
  "s\030\001 \001(\r\022\022\n\nhigh_flags\030\002 \001(\r\"Q\n\tSCampData"
  "\022\017\n\007camp_id\030\001 \001(\005\022\017\n\007pk_mode\030\002 \001(\005\022\020\n\010re"
  "serve1\030\003 \001(\005\022\020\n\010reserve2\030\004 \001(\005\"7\n\nSHorse"
  "Guid\022\024\n\014high_section\030\001 \001(\r\022\023\n\013low_sectio"
  "n\030\002 \001(\r\"+\n\014ImpactStruct\022\017\n\007buff_id\030\001 \001(\005"
  "\022\n\n\002sn\030\002 \001(\r\"\037\n\005GLPos\022\n\n\002fx\030\001 \001(\002\022\n\n\002fz\030"
  "\002 \001(\002\"C\n\007SXParam\022\021\n\tint_value\030\001 \003(\005\022\022\n\ns"
  "tr_offset\030\002 \003(\005\022\021\n\tstr_value\030\003 \001(\t\"q\n\rPl"
  "ayerAbility\022\n\n\002id\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\022\013"
  "\n\003exp\030\003 \001(\r\022\022\n\nneed_level\030\004 \001(\005\022\020\n\010need_"
  "exp\030\005 \001(\005\022\022\n\nneed_money\030\006 \001(\005\"/\n\nHorseSk"
  "ill\022\020\n\010skill_id\030\001 \001(\005\022\017\n\007can_use\030\002 \001(\010\":"
  "\n\tSItemGuid\022\r\n\005world\030\001 \001(\005\022\016\n\006server\030\002 \001"
  "(\005\022\016\n\006serial\030\003 \001(\005\"!\n\014SItemGemInfo\022\021\n\tge"
  "m_index\030\001 \001(\r\"\033\n\nSItemValue\022\r\n\005value\030\001 \001"
  "(\005\"a\n\rSItemProperty\022\021\n\tattr_type\030\001 \001(\005\022\027"
  "\n\017intensify_count\030\002 \001(\005\022$\n\nitem_value\030\003 "
  "\001(\0132\020.base.SItemValue\"L\n\016SItemConstInfo\022"
  "\020\n\010const_id\030\001 \001(\005\022(\n\013const_attrs\030\002 \003(\0132\023"
  ".base.SItemProperty\"\352\002\n\nSEquipInfo\022\023\n\013eq"
  "uip_level\030\001 \001(\005\022\014\n\004bind\030\002 \001(\005\022\020\n\010pai_typ"
  "e\030\003 \001(\005\022\022\n\nequip_type\030\004 \001(\005\022\023\n\013equip_sco"
  "re\030\005 \001(\005\022\r\n\005level\030\006 \001(\005\022\024\n\014curr_max_dur\030"
  "\007 \001(\005\022\026\n\016curr_dur_point\030\010 \001(\005\022\031\n\021curr_da"
  "mage_point\030\t \001(\005\022\025\n\rcurr_gem_hole\030\n \001(\005\022"
  " \n\004gems\030\013 \003(\0132\022.base.SItemGemInfo\022&\n\tpro"
  "pertys\030\014 \003(\0132\023.base.SItemProperty\022\014\n\004loc"
  "k\030\r \001(\005\022\021\n\tlock_time\030\016 \001(\005\022$\n\006consts\030\017 \003"
  "(\0132\024.base.SItemConstInfo\"*\n\nSMedicInfo\022\r"
  "\n\005count\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\"\"\n\014ExtraBag"
  "Info\022\022\n\nbegin_time\030\001 \001(\r\"\330\002\n\005SItem\022\017\n\007it"
  "em_id\030\001 \001(\005\022\020\n\010item_pos\030\002 \001(\005\022\"\n\titem_gu"
  "id\030\003 \001(\0132\017.base.SItemGuid\022\022\n\nitem_index\030"
  "\004 \001(\r\022\017\n\007ns_bind\030\005 \001(\005\022\017\n\007creator\030\006 \001(\t\022"
  "\016\n\006params\030\007 \003(\005\022\024\n\014term_endtime\030\010 \001(\r\022)\n"
  "\nequip_info\030\t \001(\0132\020.base.SEquipInfoH\000\210\001\001"
  "\022)\n\nmedic_info\030\n \001(\0132\020.base.SMedicInfoH\001"
  "\210\001\001\022*\n\textra_bag\030\013 \001(\0132\022.base.ExtraBagIn"
  "foH\002\210\001\001B\r\n\013_equip_infoB\r\n\013_medic_infoB\014\n"
  "\n_extra_bag\"=\n\013PlayerSpell\022\020\n\010skill_id\030\001"
  " \001(\005\022\r\n\005state\030\002 \001(\005\022\r\n\005level\030\003 \001(\005\"\252\001\n\005Q"
  "uest\022\020\n\010quest_id\030\001 \001(\005\022\021\n\tscript_id\030\002 \001("
  "\005\022\016\n\006y_flag\030\003 \001(\005\022\017\n\007a_param\030\004 \003(\r\022\020\n\010af"
  "_param\030\005 \003(\002\022\020\n\010an_param\030\006 \003(\005\022\020\n\010ab_par"
  "am\030\007 \003(\005\022\021\n\thave_done\030\010 \001(\r\022\022\n\nquest_dat"
  "a\030\t \001(\005\"3\n\024SArchiveLoader_Quest\022\033\n\006quest"
  "s\030\001 \003(\0132\013.base.Quest\"<\n\016Player_Setting\022\024"
  "\n\014setting_type\030\001 \001(\005\022\024\n\014setting_data\030\002 \001"
  "(\005\"B\n\017SQuestBonusItem\022\016\n\006ycount\030\001 \001(\005\022\017\n"
  "\007item_id\030\002 \001(\r\022\016\n\006yindex\030\003 \001(\005\"\222\001\n\013SQues"
  "tBonus\022\014\n\004type\030\001 \001(\005\022\022\n\005money\030\002 \001(\rH\000\210\001\001"
  "\022\020\n\003exp\030\003 \001(\rH\001\210\001\001\022.\n\nbonus_item\030\004 \001(\0132\025"
  ".base.SQuestBonusItemH\002\210\001\001B\010\n\006_moneyB\006\n\004"
  "_expB\r\n\013_bonus_item\"\214\001\n\025ScriptParam_Ques"
  "tInfo\022\016\n\006npc_id\030\001 \001(\005\022\021\n\tscript_id\030\002 \001(\005"
  "\022\020\n\010quest_id\030\003 \001(\005\022\016\n\006yflags\030\004 \001(\005\022\014\n\004te"
  "xt\030\005 \001(\t\022 \n\005bonus\030\006 \003(\0132\021.base.SQuestBon"
  "usb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_base_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_base_2eproto = {
    false, false, 2330, descriptor_table_protodef_base_2eproto,
    "base.proto",
    &descriptor_table_base_2eproto_once, nullptr, 0, 24,
    schemas, file_default_instances, TableStruct_base_2eproto::offsets,
    file_level_metadata_base_2eproto, file_level_enum_descriptors_base_2eproto,
    file_level_service_descriptors_base_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_base_2eproto_getter() {
  return &descriptor_table_base_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_base_2eproto(&descriptor_table_base_2eproto);
namespace base {

// ===================================================================

class Flag64::_Internal {
 public:
};

Flag64::Flag64(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.Flag64)
}
Flag64::Flag64(const Flag64& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Flag64* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.low_flags_){}
    , decltype(_impl_.high_flags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.low_flags_, &from._impl_.low_flags_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.high_flags_) -
    reinterpret_cast<char*>(&_impl_.low_flags_)) + sizeof(_impl_.high_flags_));
  // @@protoc_insertion_point(copy_constructor:base.Flag64)
}

inline void Flag64::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.low_flags_){0u}
    , decltype(_impl_.high_flags_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Flag64::~Flag64() {
  // @@protoc_insertion_point(destructor:base.Flag64)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Flag64::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Flag64::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Flag64::Clear() {
// @@protoc_insertion_point(message_clear_start:base.Flag64)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.low_flags_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.high_flags_) -
      reinterpret_cast<char*>(&_impl_.low_flags_)) + sizeof(_impl_.high_flags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Flag64::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 low_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.low_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 high_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.high_flags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Flag64::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.Flag64)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 low_flags = 1;
  if (this->_internal_low_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_low_flags(), target);
  }

  // uint32 high_flags = 2;
  if (this->_internal_high_flags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_high_flags(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.Flag64)
  return target;
}

size_t Flag64::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.Flag64)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 low_flags = 1;
  if (this->_internal_low_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_low_flags());
  }

  // uint32 high_flags = 2;
  if (this->_internal_high_flags() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_high_flags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Flag64::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Flag64::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Flag64::GetClassData() const { return &_class_data_; }


void Flag64::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Flag64*>(&to_msg);
  auto& from = static_cast<const Flag64&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.Flag64)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_low_flags() != 0) {
    _this->_internal_set_low_flags(from._internal_low_flags());
  }
  if (from._internal_high_flags() != 0) {
    _this->_internal_set_high_flags(from._internal_high_flags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Flag64::CopyFrom(const Flag64& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.Flag64)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Flag64::IsInitialized() const {
  return true;
}

void Flag64::InternalSwap(Flag64* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Flag64, _impl_.high_flags_)
      + sizeof(Flag64::_impl_.high_flags_)
      - PROTOBUF_FIELD_OFFSET(Flag64, _impl_.low_flags_)>(
          reinterpret_cast<char*>(&_impl_.low_flags_),
          reinterpret_cast<char*>(&other->_impl_.low_flags_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Flag64::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[0]);
}

// ===================================================================

class SCampData::_Internal {
 public:
};

SCampData::SCampData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SCampData)
}
SCampData::SCampData(const SCampData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SCampData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_id_){}
    , decltype(_impl_.pk_mode_){}
    , decltype(_impl_.reserve1_){}
    , decltype(_impl_.reserve2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.camp_id_, &from._impl_.camp_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.reserve2_) -
    reinterpret_cast<char*>(&_impl_.camp_id_)) + sizeof(_impl_.reserve2_));
  // @@protoc_insertion_point(copy_constructor:base.SCampData)
}

inline void SCampData::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.camp_id_){0}
    , decltype(_impl_.pk_mode_){0}
    , decltype(_impl_.reserve1_){0}
    , decltype(_impl_.reserve2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SCampData::~SCampData() {
  // @@protoc_insertion_point(destructor:base.SCampData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SCampData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SCampData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SCampData::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SCampData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.camp_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.reserve2_) -
      reinterpret_cast<char*>(&_impl_.camp_id_)) + sizeof(_impl_.reserve2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SCampData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 camp_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.camp_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pk_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.pk_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reserve1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.reserve1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 reserve2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.reserve2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SCampData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SCampData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 camp_id = 1;
  if (this->_internal_camp_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_camp_id(), target);
  }

  // int32 pk_mode = 2;
  if (this->_internal_pk_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_pk_mode(), target);
  }

  // int32 reserve1 = 3;
  if (this->_internal_reserve1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_reserve1(), target);
  }

  // int32 reserve2 = 4;
  if (this->_internal_reserve2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_reserve2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SCampData)
  return target;
}

size_t SCampData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SCampData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 camp_id = 1;
  if (this->_internal_camp_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_camp_id());
  }

  // int32 pk_mode = 2;
  if (this->_internal_pk_mode() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pk_mode());
  }

  // int32 reserve1 = 3;
  if (this->_internal_reserve1() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reserve1());
  }

  // int32 reserve2 = 4;
  if (this->_internal_reserve2() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_reserve2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SCampData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SCampData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SCampData::GetClassData() const { return &_class_data_; }


void SCampData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SCampData*>(&to_msg);
  auto& from = static_cast<const SCampData&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SCampData)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_camp_id() != 0) {
    _this->_internal_set_camp_id(from._internal_camp_id());
  }
  if (from._internal_pk_mode() != 0) {
    _this->_internal_set_pk_mode(from._internal_pk_mode());
  }
  if (from._internal_reserve1() != 0) {
    _this->_internal_set_reserve1(from._internal_reserve1());
  }
  if (from._internal_reserve2() != 0) {
    _this->_internal_set_reserve2(from._internal_reserve2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SCampData::CopyFrom(const SCampData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SCampData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SCampData::IsInitialized() const {
  return true;
}

void SCampData::InternalSwap(SCampData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCampData, _impl_.reserve2_)
      + sizeof(SCampData::_impl_.reserve2_)
      - PROTOBUF_FIELD_OFFSET(SCampData, _impl_.camp_id_)>(
          reinterpret_cast<char*>(&_impl_.camp_id_),
          reinterpret_cast<char*>(&other->_impl_.camp_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SCampData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[1]);
}

// ===================================================================

class SHorseGuid::_Internal {
 public:
};

SHorseGuid::SHorseGuid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SHorseGuid)
}
SHorseGuid::SHorseGuid(const SHorseGuid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SHorseGuid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.high_section_){}
    , decltype(_impl_.low_section_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.high_section_, &from._impl_.high_section_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.low_section_) -
    reinterpret_cast<char*>(&_impl_.high_section_)) + sizeof(_impl_.low_section_));
  // @@protoc_insertion_point(copy_constructor:base.SHorseGuid)
}

inline void SHorseGuid::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.high_section_){0u}
    , decltype(_impl_.low_section_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SHorseGuid::~SHorseGuid() {
  // @@protoc_insertion_point(destructor:base.SHorseGuid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SHorseGuid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SHorseGuid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SHorseGuid::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SHorseGuid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.high_section_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.low_section_) -
      reinterpret_cast<char*>(&_impl_.high_section_)) + sizeof(_impl_.low_section_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SHorseGuid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 high_section = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.high_section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 low_section = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.low_section_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SHorseGuid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SHorseGuid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 high_section = 1;
  if (this->_internal_high_section() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_high_section(), target);
  }

  // uint32 low_section = 2;
  if (this->_internal_low_section() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_low_section(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SHorseGuid)
  return target;
}

size_t SHorseGuid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SHorseGuid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 high_section = 1;
  if (this->_internal_high_section() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_high_section());
  }

  // uint32 low_section = 2;
  if (this->_internal_low_section() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_low_section());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SHorseGuid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SHorseGuid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SHorseGuid::GetClassData() const { return &_class_data_; }


void SHorseGuid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SHorseGuid*>(&to_msg);
  auto& from = static_cast<const SHorseGuid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SHorseGuid)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_high_section() != 0) {
    _this->_internal_set_high_section(from._internal_high_section());
  }
  if (from._internal_low_section() != 0) {
    _this->_internal_set_low_section(from._internal_low_section());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SHorseGuid::CopyFrom(const SHorseGuid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SHorseGuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SHorseGuid::IsInitialized() const {
  return true;
}

void SHorseGuid::InternalSwap(SHorseGuid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SHorseGuid, _impl_.low_section_)
      + sizeof(SHorseGuid::_impl_.low_section_)
      - PROTOBUF_FIELD_OFFSET(SHorseGuid, _impl_.high_section_)>(
          reinterpret_cast<char*>(&_impl_.high_section_),
          reinterpret_cast<char*>(&other->_impl_.high_section_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SHorseGuid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[2]);
}

// ===================================================================

class ImpactStruct::_Internal {
 public:
};

ImpactStruct::ImpactStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.ImpactStruct)
}
ImpactStruct::ImpactStruct(const ImpactStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ImpactStruct* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.buff_id_){}
    , decltype(_impl_.sn_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.buff_id_, &from._impl_.buff_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sn_) -
    reinterpret_cast<char*>(&_impl_.buff_id_)) + sizeof(_impl_.sn_));
  // @@protoc_insertion_point(copy_constructor:base.ImpactStruct)
}

inline void ImpactStruct::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.buff_id_){0}
    , decltype(_impl_.sn_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ImpactStruct::~ImpactStruct() {
  // @@protoc_insertion_point(destructor:base.ImpactStruct)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ImpactStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ImpactStruct::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ImpactStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ImpactStruct)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.buff_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sn_) -
      reinterpret_cast<char*>(&_impl_.buff_id_)) + sizeof(_impl_.sn_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ImpactStruct::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 buff_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.buff_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sn = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.sn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ImpactStruct::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.ImpactStruct)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 buff_id = 1;
  if (this->_internal_buff_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_buff_id(), target);
  }

  // uint32 sn = 2;
  if (this->_internal_sn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_sn(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ImpactStruct)
  return target;
}

size_t ImpactStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.ImpactStruct)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 buff_id = 1;
  if (this->_internal_buff_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_buff_id());
  }

  // uint32 sn = 2;
  if (this->_internal_sn() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sn());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ImpactStruct::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ImpactStruct::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ImpactStruct::GetClassData() const { return &_class_data_; }


void ImpactStruct::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ImpactStruct*>(&to_msg);
  auto& from = static_cast<const ImpactStruct&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.ImpactStruct)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_buff_id() != 0) {
    _this->_internal_set_buff_id(from._internal_buff_id());
  }
  if (from._internal_sn() != 0) {
    _this->_internal_set_sn(from._internal_sn());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ImpactStruct::CopyFrom(const ImpactStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ImpactStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ImpactStruct::IsInitialized() const {
  return true;
}

void ImpactStruct::InternalSwap(ImpactStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ImpactStruct, _impl_.sn_)
      + sizeof(ImpactStruct::_impl_.sn_)
      - PROTOBUF_FIELD_OFFSET(ImpactStruct, _impl_.buff_id_)>(
          reinterpret_cast<char*>(&_impl_.buff_id_),
          reinterpret_cast<char*>(&other->_impl_.buff_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ImpactStruct::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[3]);
}

// ===================================================================

class GLPos::_Internal {
 public:
};

GLPos::GLPos(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.GLPos)
}
GLPos::GLPos(const GLPos& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  GLPos* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.fx_){}
    , decltype(_impl_.fz_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.fx_, &from._impl_.fx_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.fz_) -
    reinterpret_cast<char*>(&_impl_.fx_)) + sizeof(_impl_.fz_));
  // @@protoc_insertion_point(copy_constructor:base.GLPos)
}

inline void GLPos::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.fx_){0}
    , decltype(_impl_.fz_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

GLPos::~GLPos() {
  // @@protoc_insertion_point(destructor:base.GLPos)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GLPos::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GLPos::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GLPos::Clear() {
// @@protoc_insertion_point(message_clear_start:base.GLPos)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.fx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.fz_) -
      reinterpret_cast<char*>(&_impl_.fx_)) + sizeof(_impl_.fz_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GLPos::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float fx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.fx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float fz = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.fz_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GLPos::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.GLPos)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float fx = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = this->_internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_fx(), target);
  }

  // float fz = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fz = this->_internal_fz();
  uint32_t raw_fz;
  memcpy(&raw_fz, &tmp_fz, sizeof(tmp_fz));
  if (raw_fz != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_fz(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.GLPos)
  return target;
}

size_t GLPos::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.GLPos)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float fx = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = this->_internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    total_size += 1 + 4;
  }

  // float fz = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fz = this->_internal_fz();
  uint32_t raw_fz;
  memcpy(&raw_fz, &tmp_fz, sizeof(tmp_fz));
  if (raw_fz != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GLPos::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    GLPos::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GLPos::GetClassData() const { return &_class_data_; }


void GLPos::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<GLPos*>(&to_msg);
  auto& from = static_cast<const GLPos&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.GLPos)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fx = from._internal_fx();
  uint32_t raw_fx;
  memcpy(&raw_fx, &tmp_fx, sizeof(tmp_fx));
  if (raw_fx != 0) {
    _this->_internal_set_fx(from._internal_fx());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_fz = from._internal_fz();
  uint32_t raw_fz;
  memcpy(&raw_fz, &tmp_fz, sizeof(tmp_fz));
  if (raw_fz != 0) {
    _this->_internal_set_fz(from._internal_fz());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GLPos::CopyFrom(const GLPos& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.GLPos)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GLPos::IsInitialized() const {
  return true;
}

void GLPos::InternalSwap(GLPos* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GLPos, _impl_.fz_)
      + sizeof(GLPos::_impl_.fz_)
      - PROTOBUF_FIELD_OFFSET(GLPos, _impl_.fx_)>(
          reinterpret_cast<char*>(&_impl_.fx_),
          reinterpret_cast<char*>(&other->_impl_.fx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GLPos::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[4]);
}

// ===================================================================

class SXParam::_Internal {
 public:
};

SXParam::SXParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SXParam)
}
SXParam::SXParam(const SXParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SXParam* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.int_value_){from._impl_.int_value_}
    , /*decltype(_impl_._int_value_cached_byte_size_)*/{0}
    , decltype(_impl_.str_offset_){from._impl_.str_offset_}
    , /*decltype(_impl_._str_offset_cached_byte_size_)*/{0}
    , decltype(_impl_.str_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.str_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_str_value().empty()) {
    _this->_impl_.str_value_.Set(from._internal_str_value(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:base.SXParam)
}

inline void SXParam::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.int_value_){arena}
    , /*decltype(_impl_._int_value_cached_byte_size_)*/{0}
    , decltype(_impl_.str_offset_){arena}
    , /*decltype(_impl_._str_offset_cached_byte_size_)*/{0}
    , decltype(_impl_.str_value_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.str_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.str_value_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SXParam::~SXParam() {
  // @@protoc_insertion_point(destructor:base.SXParam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SXParam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.int_value_.~RepeatedField();
  _impl_.str_offset_.~RepeatedField();
  _impl_.str_value_.Destroy();
}

void SXParam::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SXParam::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SXParam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.int_value_.Clear();
  _impl_.str_offset_.Clear();
  _impl_.str_value_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SXParam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 int_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_int_value(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_int_value(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 str_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_str_offset(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 16) {
          _internal_add_str_offset(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string str_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_str_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "base.SXParam.str_value"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SXParam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SXParam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 int_value = 1;
  {
    int byte_size = _impl_._int_value_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_int_value(), byte_size, target);
    }
  }

  // repeated int32 str_offset = 2;
  {
    int byte_size = _impl_._str_offset_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          2, _internal_str_offset(), byte_size, target);
    }
  }

  // string str_value = 3;
  if (!this->_internal_str_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_str_value().data(), static_cast<int>(this->_internal_str_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "base.SXParam.str_value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_str_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SXParam)
  return target;
}

size_t SXParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SXParam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 int_value = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.int_value_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._int_value_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 str_offset = 2;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.str_offset_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._str_offset_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string str_value = 3;
  if (!this->_internal_str_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_str_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SXParam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SXParam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SXParam::GetClassData() const { return &_class_data_; }


void SXParam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SXParam*>(&to_msg);
  auto& from = static_cast<const SXParam&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SXParam)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.int_value_.MergeFrom(from._impl_.int_value_);
  _this->_impl_.str_offset_.MergeFrom(from._impl_.str_offset_);
  if (!from._internal_str_value().empty()) {
    _this->_internal_set_str_value(from._internal_str_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SXParam::CopyFrom(const SXParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SXParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SXParam::IsInitialized() const {
  return true;
}

void SXParam::InternalSwap(SXParam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.int_value_.InternalSwap(&other->_impl_.int_value_);
  _impl_.str_offset_.InternalSwap(&other->_impl_.str_offset_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.str_value_, lhs_arena,
      &other->_impl_.str_value_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SXParam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[5]);
}

// ===================================================================

class PlayerAbility::_Internal {
 public:
};

PlayerAbility::PlayerAbility(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.PlayerAbility)
}
PlayerAbility::PlayerAbility(const PlayerAbility& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerAbility* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.exp_){}
    , decltype(_impl_.need_level_){}
    , decltype(_impl_.need_exp_){}
    , decltype(_impl_.need_money_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.id_, &from._impl_.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.need_money_) -
    reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.need_money_));
  // @@protoc_insertion_point(copy_constructor:base.PlayerAbility)
}

inline void PlayerAbility::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.id_){0u}
    , decltype(_impl_.level_){0u}
    , decltype(_impl_.exp_){0u}
    , decltype(_impl_.need_level_){0}
    , decltype(_impl_.need_exp_){0}
    , decltype(_impl_.need_money_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerAbility::~PlayerAbility() {
  // @@protoc_insertion_point(destructor:base.PlayerAbility)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerAbility::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerAbility::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerAbility::Clear() {
// @@protoc_insertion_point(message_clear_start:base.PlayerAbility)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.need_money_) -
      reinterpret_cast<char*>(&_impl_.id_)) + sizeof(_impl_.need_money_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerAbility::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 need_level = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.need_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 need_exp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.need_exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 need_money = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.need_money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerAbility::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.PlayerAbility)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_level(), target);
  }

  // uint32 exp = 3;
  if (this->_internal_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_exp(), target);
  }

  // int32 need_level = 4;
  if (this->_internal_need_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_need_level(), target);
  }

  // int32 need_exp = 5;
  if (this->_internal_need_exp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_need_exp(), target);
  }

  // int32 need_money = 6;
  if (this->_internal_need_money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_need_money(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.PlayerAbility)
  return target;
}

size_t PlayerAbility::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.PlayerAbility)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // uint32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_level());
  }

  // uint32 exp = 3;
  if (this->_internal_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
  }

  // int32 need_level = 4;
  if (this->_internal_need_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_need_level());
  }

  // int32 need_exp = 5;
  if (this->_internal_need_exp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_need_exp());
  }

  // int32 need_money = 6;
  if (this->_internal_need_money() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_need_money());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerAbility::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerAbility::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerAbility::GetClassData() const { return &_class_data_; }


void PlayerAbility::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerAbility*>(&to_msg);
  auto& from = static_cast<const PlayerAbility&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.PlayerAbility)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_exp() != 0) {
    _this->_internal_set_exp(from._internal_exp());
  }
  if (from._internal_need_level() != 0) {
    _this->_internal_set_need_level(from._internal_need_level());
  }
  if (from._internal_need_exp() != 0) {
    _this->_internal_set_need_exp(from._internal_need_exp());
  }
  if (from._internal_need_money() != 0) {
    _this->_internal_set_need_money(from._internal_need_money());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerAbility::CopyFrom(const PlayerAbility& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.PlayerAbility)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerAbility::IsInitialized() const {
  return true;
}

void PlayerAbility::InternalSwap(PlayerAbility* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerAbility, _impl_.need_money_)
      + sizeof(PlayerAbility::_impl_.need_money_)
      - PROTOBUF_FIELD_OFFSET(PlayerAbility, _impl_.id_)>(
          reinterpret_cast<char*>(&_impl_.id_),
          reinterpret_cast<char*>(&other->_impl_.id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerAbility::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[6]);
}

// ===================================================================

class HorseSkill::_Internal {
 public:
};

HorseSkill::HorseSkill(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.HorseSkill)
}
HorseSkill::HorseSkill(const HorseSkill& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  HorseSkill* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_id_){}
    , decltype(_impl_.can_use_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.skill_id_, &from._impl_.skill_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.can_use_) -
    reinterpret_cast<char*>(&_impl_.skill_id_)) + sizeof(_impl_.can_use_));
  // @@protoc_insertion_point(copy_constructor:base.HorseSkill)
}

inline void HorseSkill::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_id_){0}
    , decltype(_impl_.can_use_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

HorseSkill::~HorseSkill() {
  // @@protoc_insertion_point(destructor:base.HorseSkill)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HorseSkill::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HorseSkill::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HorseSkill::Clear() {
// @@protoc_insertion_point(message_clear_start:base.HorseSkill)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.skill_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.can_use_) -
      reinterpret_cast<char*>(&_impl_.skill_id_)) + sizeof(_impl_.can_use_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HorseSkill::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skill_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool can_use = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.can_use_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HorseSkill::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.HorseSkill)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skill_id = 1;
  if (this->_internal_skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_skill_id(), target);
  }

  // bool can_use = 2;
  if (this->_internal_can_use() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_can_use(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.HorseSkill)
  return target;
}

size_t HorseSkill::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.HorseSkill)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 skill_id = 1;
  if (this->_internal_skill_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_id());
  }

  // bool can_use = 2;
  if (this->_internal_can_use() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HorseSkill::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    HorseSkill::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HorseSkill::GetClassData() const { return &_class_data_; }


void HorseSkill::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<HorseSkill*>(&to_msg);
  auto& from = static_cast<const HorseSkill&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.HorseSkill)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skill_id() != 0) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_can_use() != 0) {
    _this->_internal_set_can_use(from._internal_can_use());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HorseSkill::CopyFrom(const HorseSkill& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.HorseSkill)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseSkill::IsInitialized() const {
  return true;
}

void HorseSkill::InternalSwap(HorseSkill* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HorseSkill, _impl_.can_use_)
      + sizeof(HorseSkill::_impl_.can_use_)
      - PROTOBUF_FIELD_OFFSET(HorseSkill, _impl_.skill_id_)>(
          reinterpret_cast<char*>(&_impl_.skill_id_),
          reinterpret_cast<char*>(&other->_impl_.skill_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HorseSkill::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[7]);
}

// ===================================================================

class SItemGuid::_Internal {
 public:
};

SItemGuid::SItemGuid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SItemGuid)
}
SItemGuid::SItemGuid(const SItemGuid& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SItemGuid* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.world_){}
    , decltype(_impl_.server_){}
    , decltype(_impl_.serial_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.world_, &from._impl_.world_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.serial_) -
    reinterpret_cast<char*>(&_impl_.world_)) + sizeof(_impl_.serial_));
  // @@protoc_insertion_point(copy_constructor:base.SItemGuid)
}

inline void SItemGuid::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.world_){0}
    , decltype(_impl_.server_){0}
    , decltype(_impl_.serial_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SItemGuid::~SItemGuid() {
  // @@protoc_insertion_point(destructor:base.SItemGuid)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SItemGuid::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SItemGuid::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SItemGuid::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SItemGuid)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.world_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.serial_) -
      reinterpret_cast<char*>(&_impl_.world_)) + sizeof(_impl_.serial_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SItemGuid::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 world = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.world_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 server = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.server_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 serial = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.serial_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SItemGuid::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SItemGuid)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 world = 1;
  if (this->_internal_world() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_world(), target);
  }

  // int32 server = 2;
  if (this->_internal_server() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_server(), target);
  }

  // int32 serial = 3;
  if (this->_internal_serial() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_serial(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SItemGuid)
  return target;
}

size_t SItemGuid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SItemGuid)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 world = 1;
  if (this->_internal_world() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_world());
  }

  // int32 server = 2;
  if (this->_internal_server() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_server());
  }

  // int32 serial = 3;
  if (this->_internal_serial() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_serial());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SItemGuid::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SItemGuid::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SItemGuid::GetClassData() const { return &_class_data_; }


void SItemGuid::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SItemGuid*>(&to_msg);
  auto& from = static_cast<const SItemGuid&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SItemGuid)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_world() != 0) {
    _this->_internal_set_world(from._internal_world());
  }
  if (from._internal_server() != 0) {
    _this->_internal_set_server(from._internal_server());
  }
  if (from._internal_serial() != 0) {
    _this->_internal_set_serial(from._internal_serial());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SItemGuid::CopyFrom(const SItemGuid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SItemGuid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemGuid::IsInitialized() const {
  return true;
}

void SItemGuid::InternalSwap(SItemGuid* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SItemGuid, _impl_.serial_)
      + sizeof(SItemGuid::_impl_.serial_)
      - PROTOBUF_FIELD_OFFSET(SItemGuid, _impl_.world_)>(
          reinterpret_cast<char*>(&_impl_.world_),
          reinterpret_cast<char*>(&other->_impl_.world_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SItemGuid::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[8]);
}

// ===================================================================

class SItemGemInfo::_Internal {
 public:
};

SItemGemInfo::SItemGemInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SItemGemInfo)
}
SItemGemInfo::SItemGemInfo(const SItemGemInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SItemGemInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gem_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gem_index_ = from._impl_.gem_index_;
  // @@protoc_insertion_point(copy_constructor:base.SItemGemInfo)
}

inline void SItemGemInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gem_index_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SItemGemInfo::~SItemGemInfo() {
  // @@protoc_insertion_point(destructor:base.SItemGemInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SItemGemInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SItemGemInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SItemGemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SItemGemInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gem_index_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SItemGemInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 gem_index = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gem_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SItemGemInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SItemGemInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 gem_index = 1;
  if (this->_internal_gem_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_gem_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SItemGemInfo)
  return target;
}

size_t SItemGemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SItemGemInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 gem_index = 1;
  if (this->_internal_gem_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_gem_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SItemGemInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SItemGemInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SItemGemInfo::GetClassData() const { return &_class_data_; }


void SItemGemInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SItemGemInfo*>(&to_msg);
  auto& from = static_cast<const SItemGemInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SItemGemInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gem_index() != 0) {
    _this->_internal_set_gem_index(from._internal_gem_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SItemGemInfo::CopyFrom(const SItemGemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SItemGemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemGemInfo::IsInitialized() const {
  return true;
}

void SItemGemInfo::InternalSwap(SItemGemInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gem_index_, other->_impl_.gem_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SItemGemInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[9]);
}

// ===================================================================

class SItemValue::_Internal {
 public:
};

SItemValue::SItemValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SItemValue)
}
SItemValue::SItemValue(const SItemValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SItemValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.value_ = from._impl_.value_;
  // @@protoc_insertion_point(copy_constructor:base.SItemValue)
}

inline void SItemValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SItemValue::~SItemValue() {
  // @@protoc_insertion_point(destructor:base.SItemValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SItemValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SItemValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SItemValue::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SItemValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SItemValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SItemValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SItemValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SItemValue)
  return target;
}

size_t SItemValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SItemValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SItemValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SItemValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SItemValue::GetClassData() const { return &_class_data_; }


void SItemValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SItemValue*>(&to_msg);
  auto& from = static_cast<const SItemValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SItemValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _this->_internal_set_value(from._internal_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SItemValue::CopyFrom(const SItemValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SItemValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemValue::IsInitialized() const {
  return true;
}

void SItemValue::InternalSwap(SItemValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.value_, other->_impl_.value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SItemValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[10]);
}

// ===================================================================

class SItemProperty::_Internal {
 public:
  static const ::base::SItemValue& item_value(const SItemProperty* msg);
};

const ::base::SItemValue&
SItemProperty::_Internal::item_value(const SItemProperty* msg) {
  return *msg->_impl_.item_value_;
}
SItemProperty::SItemProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SItemProperty)
}
SItemProperty::SItemProperty(const SItemProperty& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SItemProperty* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.item_value_){nullptr}
    , decltype(_impl_.attr_type_){}
    , decltype(_impl_.intensify_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_item_value()) {
    _this->_impl_.item_value_ = new ::base::SItemValue(*from._impl_.item_value_);
  }
  ::memcpy(&_impl_.attr_type_, &from._impl_.attr_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.intensify_count_) -
    reinterpret_cast<char*>(&_impl_.attr_type_)) + sizeof(_impl_.intensify_count_));
  // @@protoc_insertion_point(copy_constructor:base.SItemProperty)
}

inline void SItemProperty::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.item_value_){nullptr}
    , decltype(_impl_.attr_type_){0}
    , decltype(_impl_.intensify_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SItemProperty::~SItemProperty() {
  // @@protoc_insertion_point(destructor:base.SItemProperty)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SItemProperty::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.item_value_;
}

void SItemProperty::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SItemProperty::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SItemProperty)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.item_value_ != nullptr) {
    delete _impl_.item_value_;
  }
  _impl_.item_value_ = nullptr;
  ::memset(&_impl_.attr_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.intensify_count_) -
      reinterpret_cast<char*>(&_impl_.attr_type_)) + sizeof(_impl_.intensify_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SItemProperty::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 attr_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.attr_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 intensify_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.intensify_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SItemValue item_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_value(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SItemProperty::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SItemProperty)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 attr_type = 1;
  if (this->_internal_attr_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_attr_type(), target);
  }

  // int32 intensify_count = 2;
  if (this->_internal_intensify_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_intensify_count(), target);
  }

  // .base.SItemValue item_value = 3;
  if (this->_internal_has_item_value()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item_value(this),
        _Internal::item_value(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SItemProperty)
  return target;
}

size_t SItemProperty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SItemProperty)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .base.SItemValue item_value = 3;
  if (this->_internal_has_item_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_value_);
  }

  // int32 attr_type = 1;
  if (this->_internal_attr_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_attr_type());
  }

  // int32 intensify_count = 2;
  if (this->_internal_intensify_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_intensify_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SItemProperty::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SItemProperty::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SItemProperty::GetClassData() const { return &_class_data_; }


void SItemProperty::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SItemProperty*>(&to_msg);
  auto& from = static_cast<const SItemProperty&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SItemProperty)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_item_value()) {
    _this->_internal_mutable_item_value()->::base::SItemValue::MergeFrom(
        from._internal_item_value());
  }
  if (from._internal_attr_type() != 0) {
    _this->_internal_set_attr_type(from._internal_attr_type());
  }
  if (from._internal_intensify_count() != 0) {
    _this->_internal_set_intensify_count(from._internal_intensify_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SItemProperty::CopyFrom(const SItemProperty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SItemProperty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemProperty::IsInitialized() const {
  return true;
}

void SItemProperty::InternalSwap(SItemProperty* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SItemProperty, _impl_.intensify_count_)
      + sizeof(SItemProperty::_impl_.intensify_count_)
      - PROTOBUF_FIELD_OFFSET(SItemProperty, _impl_.item_value_)>(
          reinterpret_cast<char*>(&_impl_.item_value_),
          reinterpret_cast<char*>(&other->_impl_.item_value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SItemProperty::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[11]);
}

// ===================================================================

class SItemConstInfo::_Internal {
 public:
};

SItemConstInfo::SItemConstInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SItemConstInfo)
}
SItemConstInfo::SItemConstInfo(const SItemConstInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SItemConstInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.const_attrs_){from._impl_.const_attrs_}
    , decltype(_impl_.const_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.const_id_ = from._impl_.const_id_;
  // @@protoc_insertion_point(copy_constructor:base.SItemConstInfo)
}

inline void SItemConstInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.const_attrs_){arena}
    , decltype(_impl_.const_id_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SItemConstInfo::~SItemConstInfo() {
  // @@protoc_insertion_point(destructor:base.SItemConstInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SItemConstInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.const_attrs_.~RepeatedPtrField();
}

void SItemConstInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SItemConstInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SItemConstInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.const_attrs_.Clear();
  _impl_.const_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SItemConstInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 const_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.const_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.SItemProperty const_attrs = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_const_attrs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SItemConstInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SItemConstInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 const_id = 1;
  if (this->_internal_const_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_const_id(), target);
  }

  // repeated .base.SItemProperty const_attrs = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_const_attrs_size()); i < n; i++) {
    const auto& repfield = this->_internal_const_attrs(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SItemConstInfo)
  return target;
}

size_t SItemConstInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SItemConstInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.SItemProperty const_attrs = 2;
  total_size += 1UL * this->_internal_const_attrs_size();
  for (const auto& msg : this->_impl_.const_attrs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 const_id = 1;
  if (this->_internal_const_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_const_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SItemConstInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SItemConstInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SItemConstInfo::GetClassData() const { return &_class_data_; }


void SItemConstInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SItemConstInfo*>(&to_msg);
  auto& from = static_cast<const SItemConstInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SItemConstInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.const_attrs_.MergeFrom(from._impl_.const_attrs_);
  if (from._internal_const_id() != 0) {
    _this->_internal_set_const_id(from._internal_const_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SItemConstInfo::CopyFrom(const SItemConstInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SItemConstInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItemConstInfo::IsInitialized() const {
  return true;
}

void SItemConstInfo::InternalSwap(SItemConstInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.const_attrs_.InternalSwap(&other->_impl_.const_attrs_);
  swap(_impl_.const_id_, other->_impl_.const_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SItemConstInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[12]);
}

// ===================================================================

class SEquipInfo::_Internal {
 public:
};

SEquipInfo::SEquipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SEquipInfo)
}
SEquipInfo::SEquipInfo(const SEquipInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SEquipInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gems_){from._impl_.gems_}
    , decltype(_impl_.propertys_){from._impl_.propertys_}
    , decltype(_impl_.consts_){from._impl_.consts_}
    , decltype(_impl_.equip_level_){}
    , decltype(_impl_.bind_){}
    , decltype(_impl_.pai_type_){}
    , decltype(_impl_.equip_type_){}
    , decltype(_impl_.equip_score_){}
    , decltype(_impl_.level_){}
    , decltype(_impl_.curr_max_dur_){}
    , decltype(_impl_.curr_dur_point_){}
    , decltype(_impl_.curr_damage_point_){}
    , decltype(_impl_.curr_gem_hole_){}
    , decltype(_impl_.lock_){}
    , decltype(_impl_.lock_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.equip_level_, &from._impl_.equip_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lock_time_) -
    reinterpret_cast<char*>(&_impl_.equip_level_)) + sizeof(_impl_.lock_time_));
  // @@protoc_insertion_point(copy_constructor:base.SEquipInfo)
}

inline void SEquipInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gems_){arena}
    , decltype(_impl_.propertys_){arena}
    , decltype(_impl_.consts_){arena}
    , decltype(_impl_.equip_level_){0}
    , decltype(_impl_.bind_){0}
    , decltype(_impl_.pai_type_){0}
    , decltype(_impl_.equip_type_){0}
    , decltype(_impl_.equip_score_){0}
    , decltype(_impl_.level_){0}
    , decltype(_impl_.curr_max_dur_){0}
    , decltype(_impl_.curr_dur_point_){0}
    , decltype(_impl_.curr_damage_point_){0}
    , decltype(_impl_.curr_gem_hole_){0}
    , decltype(_impl_.lock_){0}
    , decltype(_impl_.lock_time_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SEquipInfo::~SEquipInfo() {
  // @@protoc_insertion_point(destructor:base.SEquipInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SEquipInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.gems_.~RepeatedPtrField();
  _impl_.propertys_.~RepeatedPtrField();
  _impl_.consts_.~RepeatedPtrField();
}

void SEquipInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SEquipInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SEquipInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gems_.Clear();
  _impl_.propertys_.Clear();
  _impl_.consts_.Clear();
  ::memset(&_impl_.equip_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lock_time_) -
      reinterpret_cast<char*>(&_impl_.equip_level_)) + sizeof(_impl_.lock_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SEquipInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 equip_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.equip_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 bind = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pai_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.pai_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 equip_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.equip_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 equip_score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.equip_score_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curr_max_dur = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.curr_max_dur_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curr_dur_point = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.curr_dur_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curr_damage_point = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.curr_damage_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 curr_gem_hole = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.curr_gem_hole_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.SItemGemInfo gems = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_gems(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .base.SItemProperty propertys = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_propertys(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 lock = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _impl_.lock_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lock_time = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          _impl_.lock_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .base.SItemConstInfo consts = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_consts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SEquipInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SEquipInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 equip_level = 1;
  if (this->_internal_equip_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_equip_level(), target);
  }

  // int32 bind = 2;
  if (this->_internal_bind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_bind(), target);
  }

  // int32 pai_type = 3;
  if (this->_internal_pai_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_pai_type(), target);
  }

  // int32 equip_type = 4;
  if (this->_internal_equip_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_equip_type(), target);
  }

  // int32 equip_score = 5;
  if (this->_internal_equip_score() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_equip_score(), target);
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_level(), target);
  }

  // int32 curr_max_dur = 7;
  if (this->_internal_curr_max_dur() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_curr_max_dur(), target);
  }

  // int32 curr_dur_point = 8;
  if (this->_internal_curr_dur_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_curr_dur_point(), target);
  }

  // int32 curr_damage_point = 9;
  if (this->_internal_curr_damage_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_curr_damage_point(), target);
  }

  // int32 curr_gem_hole = 10;
  if (this->_internal_curr_gem_hole() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(10, this->_internal_curr_gem_hole(), target);
  }

  // repeated .base.SItemGemInfo gems = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_gems_size()); i < n; i++) {
    const auto& repfield = this->_internal_gems(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .base.SItemProperty propertys = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_propertys_size()); i < n; i++) {
    const auto& repfield = this->_internal_propertys(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 lock = 13;
  if (this->_internal_lock() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(13, this->_internal_lock(), target);
  }

  // int32 lock_time = 14;
  if (this->_internal_lock_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(14, this->_internal_lock_time(), target);
  }

  // repeated .base.SItemConstInfo consts = 15;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_consts_size()); i < n; i++) {
    const auto& repfield = this->_internal_consts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(15, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SEquipInfo)
  return target;
}

size_t SEquipInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SEquipInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.SItemGemInfo gems = 11;
  total_size += 1UL * this->_internal_gems_size();
  for (const auto& msg : this->_impl_.gems_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .base.SItemProperty propertys = 12;
  total_size += 1UL * this->_internal_propertys_size();
  for (const auto& msg : this->_impl_.propertys_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .base.SItemConstInfo consts = 15;
  total_size += 1UL * this->_internal_consts_size();
  for (const auto& msg : this->_impl_.consts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 equip_level = 1;
  if (this->_internal_equip_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equip_level());
  }

  // int32 bind = 2;
  if (this->_internal_bind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_bind());
  }

  // int32 pai_type = 3;
  if (this->_internal_pai_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pai_type());
  }

  // int32 equip_type = 4;
  if (this->_internal_equip_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equip_type());
  }

  // int32 equip_score = 5;
  if (this->_internal_equip_score() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_equip_score());
  }

  // int32 level = 6;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  // int32 curr_max_dur = 7;
  if (this->_internal_curr_max_dur() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curr_max_dur());
  }

  // int32 curr_dur_point = 8;
  if (this->_internal_curr_dur_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curr_dur_point());
  }

  // int32 curr_damage_point = 9;
  if (this->_internal_curr_damage_point() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curr_damage_point());
  }

  // int32 curr_gem_hole = 10;
  if (this->_internal_curr_gem_hole() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_curr_gem_hole());
  }

  // int32 lock = 13;
  if (this->_internal_lock() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lock());
  }

  // int32 lock_time = 14;
  if (this->_internal_lock_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lock_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SEquipInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SEquipInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SEquipInfo::GetClassData() const { return &_class_data_; }


void SEquipInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SEquipInfo*>(&to_msg);
  auto& from = static_cast<const SEquipInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SEquipInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.gems_.MergeFrom(from._impl_.gems_);
  _this->_impl_.propertys_.MergeFrom(from._impl_.propertys_);
  _this->_impl_.consts_.MergeFrom(from._impl_.consts_);
  if (from._internal_equip_level() != 0) {
    _this->_internal_set_equip_level(from._internal_equip_level());
  }
  if (from._internal_bind() != 0) {
    _this->_internal_set_bind(from._internal_bind());
  }
  if (from._internal_pai_type() != 0) {
    _this->_internal_set_pai_type(from._internal_pai_type());
  }
  if (from._internal_equip_type() != 0) {
    _this->_internal_set_equip_type(from._internal_equip_type());
  }
  if (from._internal_equip_score() != 0) {
    _this->_internal_set_equip_score(from._internal_equip_score());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  if (from._internal_curr_max_dur() != 0) {
    _this->_internal_set_curr_max_dur(from._internal_curr_max_dur());
  }
  if (from._internal_curr_dur_point() != 0) {
    _this->_internal_set_curr_dur_point(from._internal_curr_dur_point());
  }
  if (from._internal_curr_damage_point() != 0) {
    _this->_internal_set_curr_damage_point(from._internal_curr_damage_point());
  }
  if (from._internal_curr_gem_hole() != 0) {
    _this->_internal_set_curr_gem_hole(from._internal_curr_gem_hole());
  }
  if (from._internal_lock() != 0) {
    _this->_internal_set_lock(from._internal_lock());
  }
  if (from._internal_lock_time() != 0) {
    _this->_internal_set_lock_time(from._internal_lock_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SEquipInfo::CopyFrom(const SEquipInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SEquipInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SEquipInfo::IsInitialized() const {
  return true;
}

void SEquipInfo::InternalSwap(SEquipInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.gems_.InternalSwap(&other->_impl_.gems_);
  _impl_.propertys_.InternalSwap(&other->_impl_.propertys_);
  _impl_.consts_.InternalSwap(&other->_impl_.consts_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SEquipInfo, _impl_.lock_time_)
      + sizeof(SEquipInfo::_impl_.lock_time_)
      - PROTOBUF_FIELD_OFFSET(SEquipInfo, _impl_.equip_level_)>(
          reinterpret_cast<char*>(&_impl_.equip_level_),
          reinterpret_cast<char*>(&other->_impl_.equip_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SEquipInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[13]);
}

// ===================================================================

class SMedicInfo::_Internal {
 public:
};

SMedicInfo::SMedicInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SMedicInfo)
}
SMedicInfo::SMedicInfo(const SMedicInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SMedicInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.count_, &from._impl_.count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:base.SMedicInfo)
}

inline void SMedicInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.count_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SMedicInfo::~SMedicInfo() {
  // @@protoc_insertion_point(destructor:base.SMedicInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SMedicInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SMedicInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SMedicInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SMedicInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.count_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SMedicInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SMedicInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SMedicInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_count(), target);
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SMedicInfo)
  return target;
}

size_t SMedicInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SMedicInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->_internal_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_count());
  }

  // int32 level = 2;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SMedicInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SMedicInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SMedicInfo::GetClassData() const { return &_class_data_; }


void SMedicInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SMedicInfo*>(&to_msg);
  auto& from = static_cast<const SMedicInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SMedicInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_count() != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SMedicInfo::CopyFrom(const SMedicInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SMedicInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMedicInfo::IsInitialized() const {
  return true;
}

void SMedicInfo::InternalSwap(SMedicInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SMedicInfo, _impl_.level_)
      + sizeof(SMedicInfo::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(SMedicInfo, _impl_.count_)>(
          reinterpret_cast<char*>(&_impl_.count_),
          reinterpret_cast<char*>(&other->_impl_.count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SMedicInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[14]);
}

// ===================================================================

class ExtraBagInfo::_Internal {
 public:
};

ExtraBagInfo::ExtraBagInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.ExtraBagInfo)
}
ExtraBagInfo::ExtraBagInfo(const ExtraBagInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ExtraBagInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.begin_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.begin_time_ = from._impl_.begin_time_;
  // @@protoc_insertion_point(copy_constructor:base.ExtraBagInfo)
}

inline void ExtraBagInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.begin_time_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ExtraBagInfo::~ExtraBagInfo() {
  // @@protoc_insertion_point(destructor:base.ExtraBagInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ExtraBagInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ExtraBagInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ExtraBagInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ExtraBagInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.begin_time_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ExtraBagInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 begin_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.begin_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ExtraBagInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.ExtraBagInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 begin_time = 1;
  if (this->_internal_begin_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_begin_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ExtraBagInfo)
  return target;
}

size_t ExtraBagInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.ExtraBagInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 begin_time = 1;
  if (this->_internal_begin_time() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_begin_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ExtraBagInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ExtraBagInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ExtraBagInfo::GetClassData() const { return &_class_data_; }


void ExtraBagInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ExtraBagInfo*>(&to_msg);
  auto& from = static_cast<const ExtraBagInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.ExtraBagInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_begin_time() != 0) {
    _this->_internal_set_begin_time(from._internal_begin_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ExtraBagInfo::CopyFrom(const ExtraBagInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ExtraBagInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtraBagInfo::IsInitialized() const {
  return true;
}

void ExtraBagInfo::InternalSwap(ExtraBagInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.begin_time_, other->_impl_.begin_time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ExtraBagInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[15]);
}

// ===================================================================

class SItem::_Internal {
 public:
  using HasBits = decltype(std::declval<SItem>()._impl_._has_bits_);
  static const ::base::SItemGuid& item_guid(const SItem* msg);
  static const ::base::SEquipInfo& equip_info(const SItem* msg);
  static void set_has_equip_info(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::base::SMedicInfo& medic_info(const SItem* msg);
  static void set_has_medic_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::base::ExtraBagInfo& extra_bag(const SItem* msg);
  static void set_has_extra_bag(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::base::SItemGuid&
SItem::_Internal::item_guid(const SItem* msg) {
  return *msg->_impl_.item_guid_;
}
const ::base::SEquipInfo&
SItem::_Internal::equip_info(const SItem* msg) {
  return *msg->_impl_.equip_info_;
}
const ::base::SMedicInfo&
SItem::_Internal::medic_info(const SItem* msg) {
  return *msg->_impl_.medic_info_;
}
const ::base::ExtraBagInfo&
SItem::_Internal::extra_bag(const SItem* msg) {
  return *msg->_impl_.extra_bag_;
}
SItem::SItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SItem)
}
SItem::SItem(const SItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){from._impl_.params_}
    , /*decltype(_impl_._params_cached_byte_size_)*/{0}
    , decltype(_impl_.creator_){}
    , decltype(_impl_.item_guid_){nullptr}
    , decltype(_impl_.equip_info_){nullptr}
    , decltype(_impl_.medic_info_){nullptr}
    , decltype(_impl_.extra_bag_){nullptr}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.item_pos_){}
    , decltype(_impl_.item_index_){}
    , decltype(_impl_.ns_bind_){}
    , decltype(_impl_.term_endtime_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_creator().empty()) {
    _this->_impl_.creator_.Set(from._internal_creator(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_item_guid()) {
    _this->_impl_.item_guid_ = new ::base::SItemGuid(*from._impl_.item_guid_);
  }
  if (from._internal_has_equip_info()) {
    _this->_impl_.equip_info_ = new ::base::SEquipInfo(*from._impl_.equip_info_);
  }
  if (from._internal_has_medic_info()) {
    _this->_impl_.medic_info_ = new ::base::SMedicInfo(*from._impl_.medic_info_);
  }
  if (from._internal_has_extra_bag()) {
    _this->_impl_.extra_bag_ = new ::base::ExtraBagInfo(*from._impl_.extra_bag_);
  }
  ::memcpy(&_impl_.item_id_, &from._impl_.item_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.term_endtime_) -
    reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.term_endtime_));
  // @@protoc_insertion_point(copy_constructor:base.SItem)
}

inline void SItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.params_){arena}
    , /*decltype(_impl_._params_cached_byte_size_)*/{0}
    , decltype(_impl_.creator_){}
    , decltype(_impl_.item_guid_){nullptr}
    , decltype(_impl_.equip_info_){nullptr}
    , decltype(_impl_.medic_info_){nullptr}
    , decltype(_impl_.extra_bag_){nullptr}
    , decltype(_impl_.item_id_){0}
    , decltype(_impl_.item_pos_){0}
    , decltype(_impl_.item_index_){0u}
    , decltype(_impl_.ns_bind_){0}
    , decltype(_impl_.term_endtime_){0u}
  };
  _impl_.creator_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.creator_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SItem::~SItem() {
  // @@protoc_insertion_point(destructor:base.SItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.params_.~RepeatedField();
  _impl_.creator_.Destroy();
  if (this != internal_default_instance()) delete _impl_.item_guid_;
  if (this != internal_default_instance()) delete _impl_.equip_info_;
  if (this != internal_default_instance()) delete _impl_.medic_info_;
  if (this != internal_default_instance()) delete _impl_.extra_bag_;
}

void SItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SItem::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.params_.Clear();
  _impl_.creator_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.item_guid_ != nullptr) {
    delete _impl_.item_guid_;
  }
  _impl_.item_guid_ = nullptr;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.equip_info_ != nullptr);
      _impl_.equip_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.medic_info_ != nullptr);
      _impl_.medic_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.extra_bag_ != nullptr);
      _impl_.extra_bag_->Clear();
    }
  }
  ::memset(&_impl_.item_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.term_endtime_) -
      reinterpret_cast<char*>(&_impl_.item_id_)) + sizeof(_impl_.term_endtime_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 item_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 item_pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_pos_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .base.SItemGuid item_guid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_item_guid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_index = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.item_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ns_bind = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.ns_bind_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string creator = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_creator();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "base.SItem.creator"));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 params = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_params(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_params(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 term_endtime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.term_endtime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .base.SEquipInfo equip_info = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_equip_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .base.SMedicInfo medic_info = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_medic_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .base.ExtraBagInfo extra_bag = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra_bag(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_item_id(), target);
  }

  // int32 item_pos = 2;
  if (this->_internal_item_pos() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_item_pos(), target);
  }

  // .base.SItemGuid item_guid = 3;
  if (this->_internal_has_item_guid()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::item_guid(this),
        _Internal::item_guid(this).GetCachedSize(), target, stream);
  }

  // uint32 item_index = 4;
  if (this->_internal_item_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_item_index(), target);
  }

  // int32 ns_bind = 5;
  if (this->_internal_ns_bind() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_ns_bind(), target);
  }

  // string creator = 6;
  if (!this->_internal_creator().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_creator().data(), static_cast<int>(this->_internal_creator().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "base.SItem.creator");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_creator(), target);
  }

  // repeated int32 params = 7;
  {
    int byte_size = _impl_._params_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_params(), byte_size, target);
    }
  }

  // uint32 term_endtime = 8;
  if (this->_internal_term_endtime() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_term_endtime(), target);
  }

  // optional .base.SEquipInfo equip_info = 9;
  if (_internal_has_equip_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::equip_info(this),
        _Internal::equip_info(this).GetCachedSize(), target, stream);
  }

  // optional .base.SMedicInfo medic_info = 10;
  if (_internal_has_medic_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::medic_info(this),
        _Internal::medic_info(this).GetCachedSize(), target, stream);
  }

  // optional .base.ExtraBagInfo extra_bag = 11;
  if (_internal_has_extra_bag()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, _Internal::extra_bag(this),
        _Internal::extra_bag(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SItem)
  return target;
}

size_t SItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 params = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.params_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._params_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string creator = 6;
  if (!this->_internal_creator().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_creator());
  }

  // .base.SItemGuid item_guid = 3;
  if (this->_internal_has_item_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.item_guid_);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .base.SEquipInfo equip_info = 9;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.equip_info_);
    }

    // optional .base.SMedicInfo medic_info = 10;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.medic_info_);
    }

    // optional .base.ExtraBagInfo extra_bag = 11;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.extra_bag_);
    }

  }
  // int32 item_id = 1;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_id());
  }

  // int32 item_pos = 2;
  if (this->_internal_item_pos() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_item_pos());
  }

  // uint32 item_index = 4;
  if (this->_internal_item_index() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_index());
  }

  // int32 ns_bind = 5;
  if (this->_internal_ns_bind() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ns_bind());
  }

  // uint32 term_endtime = 8;
  if (this->_internal_term_endtime() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_term_endtime());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SItem::GetClassData() const { return &_class_data_; }


void SItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SItem*>(&to_msg);
  auto& from = static_cast<const SItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.params_.MergeFrom(from._impl_.params_);
  if (!from._internal_creator().empty()) {
    _this->_internal_set_creator(from._internal_creator());
  }
  if (from._internal_has_item_guid()) {
    _this->_internal_mutable_item_guid()->::base::SItemGuid::MergeFrom(
        from._internal_item_guid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_equip_info()->::base::SEquipInfo::MergeFrom(
          from._internal_equip_info());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_medic_info()->::base::SMedicInfo::MergeFrom(
          from._internal_medic_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_extra_bag()->::base::ExtraBagInfo::MergeFrom(
          from._internal_extra_bag());
    }
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_item_pos() != 0) {
    _this->_internal_set_item_pos(from._internal_item_pos());
  }
  if (from._internal_item_index() != 0) {
    _this->_internal_set_item_index(from._internal_item_index());
  }
  if (from._internal_ns_bind() != 0) {
    _this->_internal_set_ns_bind(from._internal_ns_bind());
  }
  if (from._internal_term_endtime() != 0) {
    _this->_internal_set_term_endtime(from._internal_term_endtime());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SItem::CopyFrom(const SItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SItem::IsInitialized() const {
  return true;
}

void SItem::InternalSwap(SItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.params_.InternalSwap(&other->_impl_.params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.creator_, lhs_arena,
      &other->_impl_.creator_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SItem, _impl_.term_endtime_)
      + sizeof(SItem::_impl_.term_endtime_)
      - PROTOBUF_FIELD_OFFSET(SItem, _impl_.item_guid_)>(
          reinterpret_cast<char*>(&_impl_.item_guid_),
          reinterpret_cast<char*>(&other->_impl_.item_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[16]);
}

// ===================================================================

class PlayerSpell::_Internal {
 public:
};

PlayerSpell::PlayerSpell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.PlayerSpell)
}
PlayerSpell::PlayerSpell(const PlayerSpell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PlayerSpell* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_id_){}
    , decltype(_impl_.state_){}
    , decltype(_impl_.level_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.skill_id_, &from._impl_.skill_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.level_) -
    reinterpret_cast<char*>(&_impl_.skill_id_)) + sizeof(_impl_.level_));
  // @@protoc_insertion_point(copy_constructor:base.PlayerSpell)
}

inline void PlayerSpell::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.skill_id_){0}
    , decltype(_impl_.state_){0}
    , decltype(_impl_.level_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PlayerSpell::~PlayerSpell() {
  // @@protoc_insertion_point(destructor:base.PlayerSpell)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PlayerSpell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PlayerSpell::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PlayerSpell::Clear() {
// @@protoc_insertion_point(message_clear_start:base.PlayerSpell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.skill_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.level_) -
      reinterpret_cast<char*>(&_impl_.skill_id_)) + sizeof(_impl_.level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerSpell::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 skill_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.skill_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PlayerSpell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.PlayerSpell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 skill_id = 1;
  if (this->_internal_skill_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_skill_id(), target);
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_state(), target);
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.PlayerSpell)
  return target;
}

size_t PlayerSpell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.PlayerSpell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 skill_id = 1;
  if (this->_internal_skill_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_skill_id());
  }

  // int32 state = 2;
  if (this->_internal_state() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_state());
  }

  // int32 level = 3;
  if (this->_internal_level() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PlayerSpell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PlayerSpell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PlayerSpell::GetClassData() const { return &_class_data_; }


void PlayerSpell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PlayerSpell*>(&to_msg);
  auto& from = static_cast<const PlayerSpell&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.PlayerSpell)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_skill_id() != 0) {
    _this->_internal_set_skill_id(from._internal_skill_id());
  }
  if (from._internal_state() != 0) {
    _this->_internal_set_state(from._internal_state());
  }
  if (from._internal_level() != 0) {
    _this->_internal_set_level(from._internal_level());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerSpell::CopyFrom(const PlayerSpell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.PlayerSpell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerSpell::IsInitialized() const {
  return true;
}

void PlayerSpell::InternalSwap(PlayerSpell* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerSpell, _impl_.level_)
      + sizeof(PlayerSpell::_impl_.level_)
      - PROTOBUF_FIELD_OFFSET(PlayerSpell, _impl_.skill_id_)>(
          reinterpret_cast<char*>(&_impl_.skill_id_),
          reinterpret_cast<char*>(&other->_impl_.skill_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerSpell::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[17]);
}

// ===================================================================

class Quest::_Internal {
 public:
};

Quest::Quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.Quest)
}
Quest::Quest(const Quest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Quest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a_param_){from._impl_.a_param_}
    , /*decltype(_impl_._a_param_cached_byte_size_)*/{0}
    , decltype(_impl_.af_param_){from._impl_.af_param_}
    , decltype(_impl_.an_param_){from._impl_.an_param_}
    , /*decltype(_impl_._an_param_cached_byte_size_)*/{0}
    , decltype(_impl_.ab_param_){from._impl_.ab_param_}
    , /*decltype(_impl_._ab_param_cached_byte_size_)*/{0}
    , decltype(_impl_.quest_id_){}
    , decltype(_impl_.script_id_){}
    , decltype(_impl_.y_flag_){}
    , decltype(_impl_.have_done_){}
    , decltype(_impl_.quest_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.quest_id_, &from._impl_.quest_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.quest_data_) -
    reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.quest_data_));
  // @@protoc_insertion_point(copy_constructor:base.Quest)
}

inline void Quest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a_param_){arena}
    , /*decltype(_impl_._a_param_cached_byte_size_)*/{0}
    , decltype(_impl_.af_param_){arena}
    , decltype(_impl_.an_param_){arena}
    , /*decltype(_impl_._an_param_cached_byte_size_)*/{0}
    , decltype(_impl_.ab_param_){arena}
    , /*decltype(_impl_._ab_param_cached_byte_size_)*/{0}
    , decltype(_impl_.quest_id_){0}
    , decltype(_impl_.script_id_){0}
    , decltype(_impl_.y_flag_){0}
    , decltype(_impl_.have_done_){0u}
    , decltype(_impl_.quest_data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Quest::~Quest() {
  // @@protoc_insertion_point(destructor:base.Quest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Quest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.a_param_.~RepeatedField();
  _impl_.af_param_.~RepeatedField();
  _impl_.an_param_.~RepeatedField();
  _impl_.ab_param_.~RepeatedField();
}

void Quest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Quest::Clear() {
// @@protoc_insertion_point(message_clear_start:base.Quest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a_param_.Clear();
  _impl_.af_param_.Clear();
  _impl_.an_param_.Clear();
  _impl_.ab_param_.Clear();
  ::memset(&_impl_.quest_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.quest_data_) -
      reinterpret_cast<char*>(&_impl_.quest_id_)) + sizeof(_impl_.quest_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Quest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 quest_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 script_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.script_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 y_flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.y_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 a_param = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_a_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_a_param(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated float af_param = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_af_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 45) {
          _internal_add_af_param(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 an_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_an_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_an_param(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 ab_param = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_ab_param(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_ab_param(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 have_done = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.have_done_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quest_data = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _impl_.quest_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Quest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.Quest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 quest_id = 1;
  if (this->_internal_quest_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_quest_id(), target);
  }

  // int32 script_id = 2;
  if (this->_internal_script_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_script_id(), target);
  }

  // int32 y_flag = 3;
  if (this->_internal_y_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_y_flag(), target);
  }

  // repeated uint32 a_param = 4;
  {
    int byte_size = _impl_._a_param_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_a_param(), byte_size, target);
    }
  }

  // repeated float af_param = 5;
  if (this->_internal_af_param_size() > 0) {
    target = stream->WriteFixedPacked(5, _internal_af_param(), target);
  }

  // repeated int32 an_param = 6;
  {
    int byte_size = _impl_._an_param_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_an_param(), byte_size, target);
    }
  }

  // repeated int32 ab_param = 7;
  {
    int byte_size = _impl_._ab_param_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          7, _internal_ab_param(), byte_size, target);
    }
  }

  // uint32 have_done = 8;
  if (this->_internal_have_done() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(8, this->_internal_have_done(), target);
  }

  // int32 quest_data = 9;
  if (this->_internal_quest_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_quest_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.Quest)
  return target;
}

size_t Quest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.Quest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 a_param = 4;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt32Size(this->_impl_.a_param_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._a_param_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated float af_param = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_af_param_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated int32 an_param = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.an_param_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._an_param_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated int32 ab_param = 7;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.ab_param_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._ab_param_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // int32 quest_id = 1;
  if (this->_internal_quest_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quest_id());
  }

  // int32 script_id = 2;
  if (this->_internal_script_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_script_id());
  }

  // int32 y_flag = 3;
  if (this->_internal_y_flag() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_y_flag());
  }

  // uint32 have_done = 8;
  if (this->_internal_have_done() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_have_done());
  }

  // int32 quest_data = 9;
  if (this->_internal_quest_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quest_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Quest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Quest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Quest::GetClassData() const { return &_class_data_; }


void Quest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Quest*>(&to_msg);
  auto& from = static_cast<const Quest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.Quest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.a_param_.MergeFrom(from._impl_.a_param_);
  _this->_impl_.af_param_.MergeFrom(from._impl_.af_param_);
  _this->_impl_.an_param_.MergeFrom(from._impl_.an_param_);
  _this->_impl_.ab_param_.MergeFrom(from._impl_.ab_param_);
  if (from._internal_quest_id() != 0) {
    _this->_internal_set_quest_id(from._internal_quest_id());
  }
  if (from._internal_script_id() != 0) {
    _this->_internal_set_script_id(from._internal_script_id());
  }
  if (from._internal_y_flag() != 0) {
    _this->_internal_set_y_flag(from._internal_y_flag());
  }
  if (from._internal_have_done() != 0) {
    _this->_internal_set_have_done(from._internal_have_done());
  }
  if (from._internal_quest_data() != 0) {
    _this->_internal_set_quest_data(from._internal_quest_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Quest::CopyFrom(const Quest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.Quest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quest::IsInitialized() const {
  return true;
}

void Quest::InternalSwap(Quest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.a_param_.InternalSwap(&other->_impl_.a_param_);
  _impl_.af_param_.InternalSwap(&other->_impl_.af_param_);
  _impl_.an_param_.InternalSwap(&other->_impl_.an_param_);
  _impl_.ab_param_.InternalSwap(&other->_impl_.ab_param_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Quest, _impl_.quest_data_)
      + sizeof(Quest::_impl_.quest_data_)
      - PROTOBUF_FIELD_OFFSET(Quest, _impl_.quest_id_)>(
          reinterpret_cast<char*>(&_impl_.quest_id_),
          reinterpret_cast<char*>(&other->_impl_.quest_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Quest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[18]);
}

// ===================================================================

class SArchiveLoader_Quest::_Internal {
 public:
};

SArchiveLoader_Quest::SArchiveLoader_Quest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SArchiveLoader_Quest)
}
SArchiveLoader_Quest::SArchiveLoader_Quest(const SArchiveLoader_Quest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SArchiveLoader_Quest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.quests_){from._impl_.quests_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:base.SArchiveLoader_Quest)
}

inline void SArchiveLoader_Quest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.quests_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SArchiveLoader_Quest::~SArchiveLoader_Quest() {
  // @@protoc_insertion_point(destructor:base.SArchiveLoader_Quest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SArchiveLoader_Quest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.quests_.~RepeatedPtrField();
}

void SArchiveLoader_Quest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SArchiveLoader_Quest::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SArchiveLoader_Quest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.quests_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SArchiveLoader_Quest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .base.Quest quests = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quests(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SArchiveLoader_Quest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SArchiveLoader_Quest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .base.Quest quests = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_quests_size()); i < n; i++) {
    const auto& repfield = this->_internal_quests(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SArchiveLoader_Quest)
  return target;
}

size_t SArchiveLoader_Quest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SArchiveLoader_Quest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.Quest quests = 1;
  total_size += 1UL * this->_internal_quests_size();
  for (const auto& msg : this->_impl_.quests_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SArchiveLoader_Quest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SArchiveLoader_Quest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SArchiveLoader_Quest::GetClassData() const { return &_class_data_; }


void SArchiveLoader_Quest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SArchiveLoader_Quest*>(&to_msg);
  auto& from = static_cast<const SArchiveLoader_Quest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SArchiveLoader_Quest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.quests_.MergeFrom(from._impl_.quests_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SArchiveLoader_Quest::CopyFrom(const SArchiveLoader_Quest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SArchiveLoader_Quest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SArchiveLoader_Quest::IsInitialized() const {
  return true;
}

void SArchiveLoader_Quest::InternalSwap(SArchiveLoader_Quest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.quests_.InternalSwap(&other->_impl_.quests_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SArchiveLoader_Quest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[19]);
}

// ===================================================================

class Player_Setting::_Internal {
 public:
};

Player_Setting::Player_Setting(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.Player_Setting)
}
Player_Setting::Player_Setting(const Player_Setting& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Player_Setting* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.setting_type_){}
    , decltype(_impl_.setting_data_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.setting_type_, &from._impl_.setting_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.setting_data_) -
    reinterpret_cast<char*>(&_impl_.setting_type_)) + sizeof(_impl_.setting_data_));
  // @@protoc_insertion_point(copy_constructor:base.Player_Setting)
}

inline void Player_Setting::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.setting_type_){0}
    , decltype(_impl_.setting_data_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Player_Setting::~Player_Setting() {
  // @@protoc_insertion_point(destructor:base.Player_Setting)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Player_Setting::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Player_Setting::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Player_Setting::Clear() {
// @@protoc_insertion_point(message_clear_start:base.Player_Setting)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.setting_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.setting_data_) -
      reinterpret_cast<char*>(&_impl_.setting_type_)) + sizeof(_impl_.setting_data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Player_Setting::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 setting_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.setting_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 setting_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.setting_data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Player_Setting::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.Player_Setting)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 setting_type = 1;
  if (this->_internal_setting_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_setting_type(), target);
  }

  // int32 setting_data = 2;
  if (this->_internal_setting_data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_setting_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.Player_Setting)
  return target;
}

size_t Player_Setting::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.Player_Setting)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 setting_type = 1;
  if (this->_internal_setting_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_setting_type());
  }

  // int32 setting_data = 2;
  if (this->_internal_setting_data() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_setting_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Player_Setting::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Player_Setting::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Player_Setting::GetClassData() const { return &_class_data_; }


void Player_Setting::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Player_Setting*>(&to_msg);
  auto& from = static_cast<const Player_Setting&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.Player_Setting)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_setting_type() != 0) {
    _this->_internal_set_setting_type(from._internal_setting_type());
  }
  if (from._internal_setting_data() != 0) {
    _this->_internal_set_setting_data(from._internal_setting_data());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Player_Setting::CopyFrom(const Player_Setting& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.Player_Setting)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Player_Setting::IsInitialized() const {
  return true;
}

void Player_Setting::InternalSwap(Player_Setting* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Player_Setting, _impl_.setting_data_)
      + sizeof(Player_Setting::_impl_.setting_data_)
      - PROTOBUF_FIELD_OFFSET(Player_Setting, _impl_.setting_type_)>(
          reinterpret_cast<char*>(&_impl_.setting_type_),
          reinterpret_cast<char*>(&other->_impl_.setting_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Player_Setting::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[20]);
}

// ===================================================================

class SQuestBonusItem::_Internal {
 public:
};

SQuestBonusItem::SQuestBonusItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SQuestBonusItem)
}
SQuestBonusItem::SQuestBonusItem(const SQuestBonusItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SQuestBonusItem* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ycount_){}
    , decltype(_impl_.item_id_){}
    , decltype(_impl_.yindex_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.ycount_, &from._impl_.ycount_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yindex_) -
    reinterpret_cast<char*>(&_impl_.ycount_)) + sizeof(_impl_.yindex_));
  // @@protoc_insertion_point(copy_constructor:base.SQuestBonusItem)
}

inline void SQuestBonusItem::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ycount_){0}
    , decltype(_impl_.item_id_){0u}
    , decltype(_impl_.yindex_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

SQuestBonusItem::~SQuestBonusItem() {
  // @@protoc_insertion_point(destructor:base.SQuestBonusItem)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SQuestBonusItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SQuestBonusItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SQuestBonusItem::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SQuestBonusItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.ycount_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yindex_) -
      reinterpret_cast<char*>(&_impl_.ycount_)) + sizeof(_impl_.yindex_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SQuestBonusItem::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 ycount = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.ycount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 item_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 yindex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.yindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SQuestBonusItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SQuestBonusItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 ycount = 1;
  if (this->_internal_ycount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_ycount(), target);
  }

  // uint32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_item_id(), target);
  }

  // int32 yindex = 3;
  if (this->_internal_yindex() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_yindex(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SQuestBonusItem)
  return target;
}

size_t SQuestBonusItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SQuestBonusItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 ycount = 1;
  if (this->_internal_ycount() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ycount());
  }

  // uint32 item_id = 2;
  if (this->_internal_item_id() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_item_id());
  }

  // int32 yindex = 3;
  if (this->_internal_yindex() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_yindex());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SQuestBonusItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SQuestBonusItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SQuestBonusItem::GetClassData() const { return &_class_data_; }


void SQuestBonusItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SQuestBonusItem*>(&to_msg);
  auto& from = static_cast<const SQuestBonusItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SQuestBonusItem)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ycount() != 0) {
    _this->_internal_set_ycount(from._internal_ycount());
  }
  if (from._internal_item_id() != 0) {
    _this->_internal_set_item_id(from._internal_item_id());
  }
  if (from._internal_yindex() != 0) {
    _this->_internal_set_yindex(from._internal_yindex());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SQuestBonusItem::CopyFrom(const SQuestBonusItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SQuestBonusItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SQuestBonusItem::IsInitialized() const {
  return true;
}

void SQuestBonusItem::InternalSwap(SQuestBonusItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SQuestBonusItem, _impl_.yindex_)
      + sizeof(SQuestBonusItem::_impl_.yindex_)
      - PROTOBUF_FIELD_OFFSET(SQuestBonusItem, _impl_.ycount_)>(
          reinterpret_cast<char*>(&_impl_.ycount_),
          reinterpret_cast<char*>(&other->_impl_.ycount_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SQuestBonusItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[21]);
}

// ===================================================================

class SQuestBonus::_Internal {
 public:
  using HasBits = decltype(std::declval<SQuestBonus>()._impl_._has_bits_);
  static void set_has_money(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exp(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::base::SQuestBonusItem& bonus_item(const SQuestBonus* msg);
  static void set_has_bonus_item(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::base::SQuestBonusItem&
SQuestBonus::_Internal::bonus_item(const SQuestBonus* msg) {
  return *msg->_impl_.bonus_item_;
}
SQuestBonus::SQuestBonus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.SQuestBonus)
}
SQuestBonus::SQuestBonus(const SQuestBonus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SQuestBonus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bonus_item_){nullptr}
    , decltype(_impl_.type_){}
    , decltype(_impl_.money_){}
    , decltype(_impl_.exp_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_bonus_item()) {
    _this->_impl_.bonus_item_ = new ::base::SQuestBonusItem(*from._impl_.bonus_item_);
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.exp_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.exp_));
  // @@protoc_insertion_point(copy_constructor:base.SQuestBonus)
}

inline void SQuestBonus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.bonus_item_){nullptr}
    , decltype(_impl_.type_){0}
    , decltype(_impl_.money_){0u}
    , decltype(_impl_.exp_){0u}
  };
}

SQuestBonus::~SQuestBonus() {
  // @@protoc_insertion_point(destructor:base.SQuestBonus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SQuestBonus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.bonus_item_;
}

void SQuestBonus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SQuestBonus::Clear() {
// @@protoc_insertion_point(message_clear_start:base.SQuestBonus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.bonus_item_ != nullptr);
    _impl_.bonus_item_->Clear();
  }
  _impl_.type_ = 0;
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.money_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.exp_) -
        reinterpret_cast<char*>(&_impl_.money_)) + sizeof(_impl_.exp_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SQuestBonus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 money = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_money(&has_bits);
          _impl_.money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 exp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_exp(&has_bits);
          _impl_.exp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .base.SQuestBonusItem bonus_item = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_bonus_item(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SQuestBonus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.SQuestBonus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_type(), target);
  }

  // optional uint32 money = 2;
  if (_internal_has_money()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_money(), target);
  }

  // optional uint32 exp = 3;
  if (_internal_has_exp()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_exp(), target);
  }

  // optional .base.SQuestBonusItem bonus_item = 4;
  if (_internal_has_bonus_item()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::bonus_item(this),
        _Internal::bonus_item(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.SQuestBonus)
  return target;
}

size_t SQuestBonus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.SQuestBonus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .base.SQuestBonusItem bonus_item = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.bonus_item_);
  }

  // int32 type = 1;
  if (this->_internal_type() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  if (cached_has_bits & 0x00000006u) {
    // optional uint32 money = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_money());
    }

    // optional uint32 exp = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_exp());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SQuestBonus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SQuestBonus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SQuestBonus::GetClassData() const { return &_class_data_; }


void SQuestBonus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SQuestBonus*>(&to_msg);
  auto& from = static_cast<const SQuestBonus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.SQuestBonus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_bonus_item()) {
    _this->_internal_mutable_bonus_item()->::base::SQuestBonusItem::MergeFrom(
        from._internal_bonus_item());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.money_ = from._impl_.money_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.exp_ = from._impl_.exp_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SQuestBonus::CopyFrom(const SQuestBonus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.SQuestBonus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SQuestBonus::IsInitialized() const {
  return true;
}

void SQuestBonus::InternalSwap(SQuestBonus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SQuestBonus, _impl_.exp_)
      + sizeof(SQuestBonus::_impl_.exp_)
      - PROTOBUF_FIELD_OFFSET(SQuestBonus, _impl_.bonus_item_)>(
          reinterpret_cast<char*>(&_impl_.bonus_item_),
          reinterpret_cast<char*>(&other->_impl_.bonus_item_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SQuestBonus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[22]);
}

// ===================================================================

class ScriptParam_QuestInfo::_Internal {
 public:
};

ScriptParam_QuestInfo::ScriptParam_QuestInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:base.ScriptParam_QuestInfo)
}
ScriptParam_QuestInfo::ScriptParam_QuestInfo(const ScriptParam_QuestInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScriptParam_QuestInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.bonus_){from._impl_.bonus_}
    , decltype(_impl_.text_){}
    , decltype(_impl_.npc_id_){}
    , decltype(_impl_.script_id_){}
    , decltype(_impl_.quest_id_){}
    , decltype(_impl_.yflags_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_text().empty()) {
    _this->_impl_.text_.Set(from._internal_text(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.npc_id_, &from._impl_.npc_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.yflags_) -
    reinterpret_cast<char*>(&_impl_.npc_id_)) + sizeof(_impl_.yflags_));
  // @@protoc_insertion_point(copy_constructor:base.ScriptParam_QuestInfo)
}

inline void ScriptParam_QuestInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.bonus_){arena}
    , decltype(_impl_.text_){}
    , decltype(_impl_.npc_id_){0}
    , decltype(_impl_.script_id_){0}
    , decltype(_impl_.quest_id_){0}
    , decltype(_impl_.yflags_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.text_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.text_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScriptParam_QuestInfo::~ScriptParam_QuestInfo() {
  // @@protoc_insertion_point(destructor:base.ScriptParam_QuestInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScriptParam_QuestInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.bonus_.~RepeatedPtrField();
  _impl_.text_.Destroy();
}

void ScriptParam_QuestInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScriptParam_QuestInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:base.ScriptParam_QuestInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.bonus_.Clear();
  _impl_.text_.ClearToEmpty();
  ::memset(&_impl_.npc_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.yflags_) -
      reinterpret_cast<char*>(&_impl_.npc_id_)) + sizeof(_impl_.yflags_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScriptParam_QuestInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 npc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.npc_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 script_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.script_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 quest_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.quest_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 yflags = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.yflags_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_text();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "base.ScriptParam_QuestInfo.text"));
        } else
          goto handle_unusual;
        continue;
      // repeated .base.SQuestBonus bonus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bonus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScriptParam_QuestInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:base.ScriptParam_QuestInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 npc_id = 1;
  if (this->_internal_npc_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_npc_id(), target);
  }

  // int32 script_id = 2;
  if (this->_internal_script_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_script_id(), target);
  }

  // int32 quest_id = 3;
  if (this->_internal_quest_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_quest_id(), target);
  }

  // int32 yflags = 4;
  if (this->_internal_yflags() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_yflags(), target);
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text().data(), static_cast<int>(this->_internal_text().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "base.ScriptParam_QuestInfo.text");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_text(), target);
  }

  // repeated .base.SQuestBonus bonus = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_bonus_size()); i < n; i++) {
    const auto& repfield = this->_internal_bonus(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:base.ScriptParam_QuestInfo)
  return target;
}

size_t ScriptParam_QuestInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:base.ScriptParam_QuestInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .base.SQuestBonus bonus = 6;
  total_size += 1UL * this->_internal_bonus_size();
  for (const auto& msg : this->_impl_.bonus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string text = 5;
  if (!this->_internal_text().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_text());
  }

  // int32 npc_id = 1;
  if (this->_internal_npc_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_npc_id());
  }

  // int32 script_id = 2;
  if (this->_internal_script_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_script_id());
  }

  // int32 quest_id = 3;
  if (this->_internal_quest_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_quest_id());
  }

  // int32 yflags = 4;
  if (this->_internal_yflags() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_yflags());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScriptParam_QuestInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScriptParam_QuestInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScriptParam_QuestInfo::GetClassData() const { return &_class_data_; }


void ScriptParam_QuestInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScriptParam_QuestInfo*>(&to_msg);
  auto& from = static_cast<const ScriptParam_QuestInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:base.ScriptParam_QuestInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.bonus_.MergeFrom(from._impl_.bonus_);
  if (!from._internal_text().empty()) {
    _this->_internal_set_text(from._internal_text());
  }
  if (from._internal_npc_id() != 0) {
    _this->_internal_set_npc_id(from._internal_npc_id());
  }
  if (from._internal_script_id() != 0) {
    _this->_internal_set_script_id(from._internal_script_id());
  }
  if (from._internal_quest_id() != 0) {
    _this->_internal_set_quest_id(from._internal_quest_id());
  }
  if (from._internal_yflags() != 0) {
    _this->_internal_set_yflags(from._internal_yflags());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScriptParam_QuestInfo::CopyFrom(const ScriptParam_QuestInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:base.ScriptParam_QuestInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScriptParam_QuestInfo::IsInitialized() const {
  return true;
}

void ScriptParam_QuestInfo::InternalSwap(ScriptParam_QuestInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.bonus_.InternalSwap(&other->_impl_.bonus_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.text_, lhs_arena,
      &other->_impl_.text_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScriptParam_QuestInfo, _impl_.yflags_)
      + sizeof(ScriptParam_QuestInfo::_impl_.yflags_)
      - PROTOBUF_FIELD_OFFSET(ScriptParam_QuestInfo, _impl_.npc_id_)>(
          reinterpret_cast<char*>(&_impl_.npc_id_),
          reinterpret_cast<char*>(&other->_impl_.npc_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScriptParam_QuestInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_base_2eproto_getter, &descriptor_table_base_2eproto_once,
      file_level_metadata_base_2eproto[23]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace base
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::base::Flag64*
Arena::CreateMaybeMessage< ::base::Flag64 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::Flag64 >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SCampData*
Arena::CreateMaybeMessage< ::base::SCampData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SCampData >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SHorseGuid*
Arena::CreateMaybeMessage< ::base::SHorseGuid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SHorseGuid >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ImpactStruct*
Arena::CreateMaybeMessage< ::base::ImpactStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ImpactStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::base::GLPos*
Arena::CreateMaybeMessage< ::base::GLPos >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::GLPos >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SXParam*
Arena::CreateMaybeMessage< ::base::SXParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SXParam >(arena);
}
template<> PROTOBUF_NOINLINE ::base::PlayerAbility*
Arena::CreateMaybeMessage< ::base::PlayerAbility >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::PlayerAbility >(arena);
}
template<> PROTOBUF_NOINLINE ::base::HorseSkill*
Arena::CreateMaybeMessage< ::base::HorseSkill >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::HorseSkill >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SItemGuid*
Arena::CreateMaybeMessage< ::base::SItemGuid >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SItemGuid >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SItemGemInfo*
Arena::CreateMaybeMessage< ::base::SItemGemInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SItemGemInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SItemValue*
Arena::CreateMaybeMessage< ::base::SItemValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SItemValue >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SItemProperty*
Arena::CreateMaybeMessage< ::base::SItemProperty >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SItemProperty >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SItemConstInfo*
Arena::CreateMaybeMessage< ::base::SItemConstInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SItemConstInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SEquipInfo*
Arena::CreateMaybeMessage< ::base::SEquipInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SEquipInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SMedicInfo*
Arena::CreateMaybeMessage< ::base::SMedicInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SMedicInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ExtraBagInfo*
Arena::CreateMaybeMessage< ::base::ExtraBagInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ExtraBagInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SItem*
Arena::CreateMaybeMessage< ::base::SItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SItem >(arena);
}
template<> PROTOBUF_NOINLINE ::base::PlayerSpell*
Arena::CreateMaybeMessage< ::base::PlayerSpell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::PlayerSpell >(arena);
}
template<> PROTOBUF_NOINLINE ::base::Quest*
Arena::CreateMaybeMessage< ::base::Quest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::Quest >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SArchiveLoader_Quest*
Arena::CreateMaybeMessage< ::base::SArchiveLoader_Quest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SArchiveLoader_Quest >(arena);
}
template<> PROTOBUF_NOINLINE ::base::Player_Setting*
Arena::CreateMaybeMessage< ::base::Player_Setting >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::Player_Setting >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SQuestBonusItem*
Arena::CreateMaybeMessage< ::base::SQuestBonusItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SQuestBonusItem >(arena);
}
template<> PROTOBUF_NOINLINE ::base::SQuestBonus*
Arena::CreateMaybeMessage< ::base::SQuestBonus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::SQuestBonus >(arena);
}
template<> PROTOBUF_NOINLINE ::base::ScriptParam_QuestInfo*
Arena::CreateMaybeMessage< ::base::ScriptParam_QuestInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::base::ScriptParam_QuestInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
