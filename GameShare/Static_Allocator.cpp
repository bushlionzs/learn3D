/*$T Common/Static_Allocator.cpp GC 1.140 10/10/07 10:06:54 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#include "stdafx.h"

#include "Static_Allocator.h"

/*
 =======================================================================================================================
 =======================================================================================================================
 */

Static_Allocator::Static_Allocator() :
	m_Buffer(0),
	m_Size(0),
	m_Offset(0)
{
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
Static_Allocator::~Static_Allocator()
{
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Static_Allocator::Init(char *buff, size_t size)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	KCheck(buff);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~*/

	m_Buffer = buff;
	m_Size = size;
	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void *Static_Allocator::Malloc(size_t nSize)
{
	if(this->m_Offset + nSize > this->m_Size)
	{
		QLogSystem::SLOW_LOG(SLOW_LOG_SERVERERROR, "Malloc(): Out of memory allocating %d bytes.\n", nSize);
		KCheck(FALSE);

		return 0;
	}
	else
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		char	*ptr = &this->m_Buffer[this->m_Offset];
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		this->m_Offset += nSize;
		return (void *) ptr;
	}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void *Static_Allocator::Calloc(size_t nCount, size_t nSize)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	void	*ptr = this->Malloc(nCount * nSize);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	memset(ptr, 0, nCount * nSize);
	return (void *) ptr;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void *Static_Allocator::Realloc(void *pData, size_t nNewSize)
{
	KCheck(pData >= this->m_Buffer && pData < this->m_Buffer + this->m_Size);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	size_t	sizeOfData = m_Offset - (size_t) ((char *) pData - m_Buffer);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	KCheck(sizeOfData > 0);

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	size_t	nSize = nNewSize - sizeOfData;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(this->m_Offset + nSize > this->m_Size)
	{
		QLogSystem::SLOW_LOG(SLOW_LOG_SERVERERROR, "Realloc(): Out of memory allocating %d bytes.\n", nSize);
		KCheck(FALSE);

		return 0;
	}
	else
	{
		this->m_Offset += nSize;
		return pData;
	}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Static_Allocator::Free(void *pData)
{
	KCheck(pData >= this->m_Buffer && pData < this->m_Buffer + this->m_Size);
}
