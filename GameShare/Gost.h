/*$T Common/EncryptAriths/Gost.h GC 1.140 10/10/07 10:06:29 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __GOST_H__
#define __GOST_H__

#include "CryptDef.h"

class GOST :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey, CipherDir dir);

	enum { KEYLENGTH = 32, BLOCKSIZE = 8 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	static void		PrecalculateSTable();

	static const byte	sBox[8][16];
	static bool		sTableCalculated;
	static uint32		sTable[4][256];

	SecBlock<uint32, 8>	key;
};

class GOSTEncryption :
	public GOST
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(byte *inoutBlock) const
	{
		GOSTEncryption::ProcessBlock(inoutBlock, inoutBlock);
	}
};

class GOSTDecryption :
	public GOST
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(byte *inoutBlock) const
	{
		GOSTDecryption::ProcessBlock(inoutBlock, inoutBlock);
	}
};
#endif
