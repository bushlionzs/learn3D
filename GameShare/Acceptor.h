/*$T Common/Acceptor.h GC 1.140 10/10/07 10:06:26 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __SERVER_SOCKET__
#define __SERVER_SOCKET__

#include "Basics.h"
#include "Socket.h"

class	Acceptor
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	Acceptor(uint32 port, const char *addr, uint32 backlog = 5);
	~	Acceptor();

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void setNonBlocking(BOOL on = TRUE)
	{
		m_Socket->setNonBlocking(on);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 getReceiveBufferSize() const
	{
		return m_Socket->getReceiveBufferSize();
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void setReceiveBufferSize(uint32 size)
	{
		m_Socket->setReceiveBufferSize(size);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 getSendBufferSize() const
	{
		return m_Socket->getSendBufferSize();
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void setSendBufferSize(uint32 size)
	{
		m_Socket->setSendBufferSize(size);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SOCKET getSOCKET()
	{
		return m_Socket->getSOCKET();
	}

	BOOL	accept(Socket *socket);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 getLinger()
	{
		return m_Socket->getLinger();
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void setLinger(uint32 lingertime)
	{
		m_Socket->setLinger(lingertime);
	}

	void	close();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL isNonBlocking() const
	{
		return m_Socket->isNonBlocking();
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	Socket	*m_Socket;
};
#endif
