/*$T MapServer/Server/Base/IntegerHashMap.cpp GC 1.140 10/10/07 10:07:20 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#include "stdafx.h"
#include "IntegerHashMap.h"

/*
 =======================================================================================================================
 =======================================================================================================================
 */

IntegerHashMap::IntegerHashMap()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	m_MaxCount = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
IntegerHashMap::~IntegerHashMap()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	m_MaxCount = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void IntegerHashMap::InitTable(uint32 MaxItem)
{
	/*~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	Clear();
	/*~~~~~~~~~~~~~~~~~~~~*/

	m_MaxCount = MaxItem;

	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
BOOL IntegerHashMap::Add(uint32 id, void *pPtr)
{
	__GUARD__ if(m_IDTableHashMap.size() >= m_MaxCount) return FALSE;

	m_IDTableHashMap.insert(IDTableHashMap::value_type(id, pPtr));

	return TRUE;
	__UNGUARD__ return FALSE;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void *IntegerHashMap::Get(uint32 id)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__ IDTableHashMap::iterator	it = m_IDTableHashMap.find(id);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(it != m_IDTableHashMap.end()) return it->second;

	return NULL;
	__UNGUARD__ return NULL;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
BOOL IntegerHashMap::Remove(uint32 id)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__ IDTableHashMap::iterator	it = m_IDTableHashMap.find(id);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(it != m_IDTableHashMap.end())
	{
		m_IDTableHashMap.erase(it);
		return TRUE;
	}

	return FALSE;

	__UNGUARD__ return FALSE;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void IntegerHashMap::Clear()
{
	__GUARD__ m_IDTableHashMap.clear();

	__UNGUARD__
}
