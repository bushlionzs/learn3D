/*$T Common/EncryptAriths/Increment.cpp GC 1.140 10/10/07 10:06:29 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#include "stdafx.h"
#include "Increment.h"

/*
 =======================================================================================================================
 =======================================================================================================================
 */

void IncreBase::SetUserKey(const uchar *key)
{
	m_BlockLen = BUFSIZE;
	memset(m_szUserKey, 0, KEYLENGTH);
	memcpy(m_szUserKey, key, KEYLENGTH);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void IncreEncryption::SetUserKey(const uchar *key)
{
	IncreBase::SetUserKey(key);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void IncreEncryption::ProcessBlock(const uchar *in, uchar *out) const
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	uint32	userKey = (uint32) atoi(m_szUserKey);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	userKey = userKey & (userKey % BUFSIZE);

	for(int32 num = 0; num < BUFSIZE; ++num)
	{
		out[num] = in[num] + userKey;
	}
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void IncreDecryption::SetUserKey(const uchar *key)
{
	IncreBase::SetUserKey(key);
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void IncreDecryption::ProcessBlock(const uchar *in, uchar *out) const
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	uint32	userKey = (uint32) atoi(m_szUserKey);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	userKey = userKey & (userKey % BUFSIZE);

	for(int32 num = 0; num < BUFSIZE; ++num)
	{
		out[num] = in[num] - userKey;
	}
}
