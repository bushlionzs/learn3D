/*$T Common/EncryptAriths/rc5.h GC 1.140 10/10/07 10:06:30 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __RC5_H__
#define __RC5_H__

#include "CryptDef.h"

class RC5Base :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	typedef uint32	RC5_WORD;

	enum { KEYLENGTH = 16, BLOCKSIZE = sizeof (RC5_WORD) *2, ROUNDS = 12 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

	void	SetUserKey(const byte *k);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	RC5Base(uint32 rounds);

	const uint32				r;
	SecBlock<RC5_WORD, 2 * (ROUNDS +1)>	sTable;
};

class RC5Encryption :
	public RC5Base
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	RC5Encryption(uint32 rounds = ROUNDS) :
	RC5Base(rounds)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(byte *inoutBlock) const
	{
		RC5Encryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
	void	SetUserKey(const byte *key);
};

class RC5Decryption :
	public RC5Base
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	RC5Decryption(uint32 rounds = ROUNDS) :
	RC5Base(rounds)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(byte *inoutBlock) const
	{
		RC5Decryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
	void	SetUserKey(const byte *key);
};
#endif
