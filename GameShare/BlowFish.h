/*$T Common/EncryptAriths/BlowFish.h GC 1.140 10/10/07 10:06:29 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __BLOWFISH_H__
#define __BLOWFISH_H__

#include "CryptDef.h"

class Blowfish :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *key_string, uint32 keylength);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	void ProcessBlock(byte *inoutBlock) const
	{
		Blowfish::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;

	enum { KEYLENGTH = 16, BLOCKSIZE = 8, ROUNDS = 16 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void				crypt_block(const uint32 in[2], uint32 out[2]) const;

	static const uint32		p_init[ROUNDS + 2];
	static const uint32		s_init[4 * 256];
	SecBlock<uint32, ROUNDS +2>	pbox;
	SecBlock<uint32, 4 *256>	sbox;
};

class BlowfishEncryption :
	public Blowfish
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *key_string);
};

class BlowfishDecryption :
	public Blowfish
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *key_string);
};
#endif
