/*$T common/SpellDataLoader.h GC 1.140 10/10/07 11:01:40 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


/*
 * SpellDataLoader.h 功能说明：技能和效果的表记录结构 祝方亮 增加注释
 * 目的在于建立文档的同时更快 更准确的掌握类功能，此次修改只限于增加注释
 * 不做任何代码修改。date: 10/30/2007 新增技能相关逻辑所需的属性，及相关的加载方法
 */
#ifndef _DATA_RECORDS_H_
#define _DATA_RECORDS_H_

#include "TypeDefine.h"
#include "TAB.h"

class		SplitStringLevelOne;

namespace	TAB
{
class	TABFile;
} const int32	MAX_SKIL_LEVEL_LIMIT = 20;
/*
 =======================================================================================================================
        是SkillInstanceData_T的子对象 ;
        条件和消耗的描述
 =======================================================================================================================
 */
class	Descriptor
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Descriptor() :
	m_szDesc(NULL)
	{
		memset(m_nValue, 0, sizeof(m_nValue));
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Descriptor(Descriptor const &rhs) :
	m_szDesc(rhs.m_szDesc)
	{
		memcpy(m_nValue, rhs.m_nValue, sizeof(m_nValue));
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~Descriptor()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Descriptor &operator=(Descriptor const &rhs)
	{
		m_szDesc = rhs.m_szDesc;
		memcpy(m_nValue, rhs.m_nValue, sizeof(m_nValue));
		return *this;
	};
	BOOL	InitFromDB(TAB::TABFile * pDB, int32 const nRow, int32 & nColumn, BOOL bNeedSplit = 0);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetDescription(void) const
	{
		return m_szDesc;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetValueBySkillLevel(int32 iSkillLevel) const
	{
		return m_nValue[iSkillLevel];
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetValueBySkillLevel(int32 const nValue, int32 iSkillLevel)
	{
		m_nValue[iSkillLevel] = nValue;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	/* 消耗的描述 */
	char const	*m_szDesc;

	/* 消耗的具体值 */
	int32		m_nValue[MAX_SKIL_LEVEL_LIMIT];
};

/*
 =======================================================================================================================
        是SkillInstanceData_T的子对象 ;
        描述条件和消耗的参数
 =======================================================================================================================
 */
class	ConditionAndDepleteTerm
{
/*
 -----------------------------------------------------------------------------------------------------------------------
        条件和消耗
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ConditionAndDepleteTerm() :
	m_szDesc(NULL),
	m_nType(INVALID_ID),
	m_nParam0(0),
	m_nParam1(0)
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ConditionAndDepleteTerm(ConditionAndDepleteTerm const &rhs) :
	m_szDesc(rhs.m_szDesc),
	m_nType(rhs.m_nType),
	m_nParam0(rhs.m_nParam0),
	m_nParam1(rhs.m_nParam1)
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~ConditionAndDepleteTerm()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ConditionAndDepleteTerm &operator=(ConditionAndDepleteTerm const &rhs)
	{
		m_szDesc = rhs.m_szDesc;
		m_nType = rhs.m_nType;
		m_nParam0 = rhs.m_nParam0;
		m_nParam1 = rhs.m_nParam1;
		return *this;
	};
	BOOL	InitFromDB
		(
			TAB::TABFile * pDB,
			int32 const nRow,
			int32 nColumn1,
			int32 nColumn2,
			int32 nColumn3,
			int32 nColumn4
		);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetDescription(void) const
	{
		return m_szDesc;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetType(void) const
	{
		return m_nType;
	};

	/*
	 ===============================================================================================================
	        void SetType(int32 nValue) {m_nType=nValue;
	        };
	 ===============================================================================================================
	 */
	int32 GetParam0(void) const
	{
		return m_nParam0;
	};

	/*
	 ===============================================================================================================
	        void SetParam0(int32 nValue) {m_nParam0=nValue;
	        };
	 ===============================================================================================================
	 */
	int32 GetParam1(void) const
	{
		return m_nParam1;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
        void SetParam1(int32 nValue) {m_nParam1=nValue;
        };
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	char const	*m_szDesc;
	int32		m_nType;
	int32		m_nParam0;
	int32		m_nParam1;
};	/* class */

/*
 =======================================================================================================================
        战斗相关模块 ;
        IDCollection_T ;
        描述技能互斥关系，对应的表格为FILE_ID_COLLECTION ;
        由g_CollectionIDMgr管理
 =======================================================================================================================
 */
class	IDCollection
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { MAX_ID = 1024, };
	enum { COLLECTION_SIZE = 30, };
	typedef enum
	{
		TYPE_BUFF_ID		= 0,
		TYPE_EFFECT_MUTEX_ID,
		TYPE_EFFECT_LOGIC_ID,
		TYPE_SPELL_ID,
		TYPE_SPELL_LOGIC_ID,
		TYPE_DIRECT_EFFECT_ID,
	} CollectionIdType_T;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	IDCollection() :
	m_bInited(FALSE),
	m_nID(INVALID_ID),
	m_szDescription(NULL),
	m_nSize(0)
	{
		memset((void *) m_aID, INVALID_ID, sizeof(m_aID));
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~IDCollection()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInited(void) const
	{
		return m_bInited;
	};
	BOOL	InitFromDB(TAB::TABFile * pDB, int32 const nRow);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetID(void) const
	{
		return m_nID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetDescription(void) const
	{
		return m_szDescription;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetType(void) const
	{
		return m_nType;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCollectionSize(void) const
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		int32	&rSize = (int32 &) m_nSize;
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		COLLECTION_SIZE < rSize ? rSize = COLLECTION_SIZE : NULL;
		return m_nSize;
	};

	/*
	 * int32 GetIDByIndex(int32 nIndex) const;
	 */
	BOOL	IsThisIDInCollection(ID_t nID) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetEndDesc(void) const
	{
		return m_szEndDesc;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL		m_bInited;
	ID_t		m_nID;
	char const	*m_szDescription;
	int32		m_nType;
	int32		m_nSize;
	int32		m_aID[COLLECTION_SIZE][MAX_SKIL_LEVEL_LIMIT];
	char const	*m_szEndDesc;
};

/*
 * 技能模块 ;
 * 技能类别
 */
typedef enum
{
	/* 非法 */
	INVALID_TYPE		= SKILL_TYPE_INVALID,

	/* 蓄气技能 */
	SKILL_NEED_CHARGING	= SKILL_TYPE_GATHER,

	/* 引导技能 */
	SKILL_NEED_CHANNELING	= SKILL_TYPE_LEAD,

	/* 直接使用技能 */
	SKILL_INSTANT_LAUNCHING = SKILL_TYPE_LAUNCH,

	/* 被动技能 */
	SKILL_PASSIVE		= SKILL_TYPE_PASSIVE,
	NUMBER_OF_SKILL_TYPE
} SkillType_T;

/*
 =======================================================================================================================
        SkillTemplate ;
        技能的全部属性，在系统启动时初始化 ;
        FILE_SKILL_TEMPLATE ;
        技能释放时的条件判断 ;
        由g_SpellTemplateDataMgr管理
 =======================================================================================================================
 */
class	SpellTemplateData
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { MAX_ID = 16384, MAX_TALENT_LEVEL = 12, MAX_SUB_SKILL = 16 };
	SpellTemplateData();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellTemplateData()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInited(void) const
	{
		return m_bInited;
	};
	BOOL	InitFromDB(TAB::TABFile * pDB, int32 const nRow);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellID_t GetSkillID(void) const
	{
		return m_nSkillID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int16 GetProfession(void) const
	{
		return m_nProfession;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetName(void) const
	{
		return m_szName;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTalentLevelRequirement(void) const
	{
		return m_nTalentLevelRequirement;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMustUseWeaponFlag(void) const
	{
		return m_bMustUseWeapon;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDisableByFlag1(void) const
	{
		return m_nDisableByFlag1;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDisableByFlag2(void) const
	{
		return m_nDisableByFlag2;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDisableByFlag3(void) const
	{
		return m_nDisableByFlag3;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDisableByFlag4(void) const
	{
		return m_nDisableByFlag4;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRangedSkillFlag(void) const
	{
		return m_nRangedSkillFlag;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL ForceBreakPreSkill(void) const
	{
		return m_bForceBreakPreSkill;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSkillType(void) const
	{
		return m_nSkillType;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CooldownID_t GetCooldownID(void) const
	{
		return m_nCooldownID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL GetTargetMustInSpecialState(void) const
	{
		return m_nTargetMustInSpecialState;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetClassByUser(void) const
	{
		return m_nClassByUser;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetPassiveFlag(void) const
	{
		return m_nPassiveFlag;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetSelectType(void) const
	{
		return m_nSelectType;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetOperateModeForPetSkill(void) const
	{
		return m_nOperateModeForPetSkill;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetPetRateOfSkill(void) const
	{
		return m_nPetRateOfSkill;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetTypeOfPetSkill(void) const
	{
		return m_nTypeOfPetSkill;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetImpactIDOfSkill(void) const
	{
		return m_nImpactIDOfSkill;
	};

	BOOL IsActionAtOnce() const
	{
		return m_bIsActionAtOnce;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int16 GetKindID() const
	{
		return m_nKindID;
	}

	/*
	===============================================================================================================
	===============================================================================================================
	*/

	ID_t GetTargetingLogic(void) const
	{
		return m_nTargetingLogic;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetPlayActionTime(void) const
	{
		return m_nPlayActionTime;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetOptimalRangeMin(int32 nLevel = 0) const
	{
		if( nLevel >=0 && nLevel < MAX_SKIL_LEVEL_LIMIT )
		{
			return m_afOptimalRangeMin[nLevel];
		}
		return 0.f;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetOptimalRangeMax(int32 nLevel = 0) const
	{
		if( nLevel >=0 && nLevel < MAX_SKIL_LEVEL_LIMIT )
		{
			return m_afOptimalRangeMax[nLevel];
		}
		return 0.f;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetStandFlag(void) const
	{
		return m_nStandFlag;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetTargetLogicByStand(void) const
	{
		return m_nTargetLogicByStand;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetTargetCheckByObjType(void) const
	{
		return m_nTargetCheckByObjType;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsPartyOnly(void) const
	{
		return m_bPartyOnly;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChargesOrInterval(void) const
	{
		return m_nChargesOrInterval;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsAutoShotSkill(void) const
	{
		return m_bAutoShot;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAccuracy(void) const
	{
		return m_nAccuracy;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCriticalRate(void) const
	{
		return m_nCriticalRate;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL UseNormalAttackRate(void) const
	{
		return m_bUseNormalAttackRate;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetActiveTime(void) const
	{
		return m_nActiveTime;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetRadius(void) const
	{
		return m_fRadius;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetAngle(void) const
	{
		return m_fAngle;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 Get_Property_MaxTargetNumber(void) const
	{
		return m_nMaxTargetNumber;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL CanInterruptAutoShot(void) const
	{
		return m_bCanInterruptAutoShot;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetDelayTime(void) const
	{
		return m_nDelayTime;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetSkillInstance(int32 const nIdx) const
	{
		if(0 > nIdx || MAX_TALENT_LEVEL <= nIdx)
		{
			KCheckEx(FALSE, "[SpellTemplateData::GetSkillInstance]:nIdx Out of range!!");
			return INVALID_ID;
		}

		return m_aSkillInstance[nIdx];
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *Description(void) const
	{
		return m_szDescription;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetHurtDelayTime() const
	{
		return m_nHurtDelayTime;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInterruptMove() const
	{
		return !m_bInterruptMove;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetBeatBackDistance() const
	{
		return m_fBeatBackDistance;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetBeatBackRate() const
	{
		return m_fBeatBackRate;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetBeatFlyDistance() const
	{
		return m_fBeatFlyDistance;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetBeatFlyRate() const
	{
		return m_fBeatFlyRate;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsUseBallSkill() const
	{
		return m_bUseBallSkill;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSkillMaxLevel() const
	{
		return m_iSkillMaxLevel;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSkillClass(void) const
	{
		return m_iSkillClass;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSubSkill(int32 iIndex) const
	{
		return m_aSubSkill[iIndex];
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSubSkillSuccessRate(int32 iIndex) const
	{
		return m_aSubSkillSuccessRate[iIndex];
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsRunSkill() const
	{
		return m_iIsRunSkill != INVALID_ID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChannelBackRate() const
	{
		return m_iChannelBackRate;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChannelBackHappanRate() const
	{
		return m_iChannelBackHappanRate;
	}

	float GetSpellRectangleWidth() const
	{
		return m_fSpellRectangleWidth;
	}
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetControlType() const
	{
		return m_nControlType;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsCanInteruptChannel()
	{
		return m_bCanInterruptChannel;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL GetSpeedOfBullet() const
	{
		return m_nSpeedOfBullet;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	ReadSplitStringToTable(SplitStringLevelOne *pSplitL1, const char *pSplitString, int32 *pArry);
	void	ReadSplitStringToTable(SplitStringLevelOne *pSplitL1, const char *pSplitString, int32 iMaxSkillLevel, float *pArry);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL		m_bInited;			/* 该记录是否已经初始化 */
	SpellID_t	m_nSkillID;			/* 技能编号 */
	int16		m_nProfession;			/* 职业编号 */
	char const	*m_szName;			/* 技能的名称 */
	int32		m_nTalentLevelRequirement;	/* 技能的天赋等级要求 */
	int32		m_nClientOnly1;			/* 客户端专用数据 */
	BOOL		m_bMustUseWeapon;		/* 此技能必须使用武器 */
	int32		m_nDisableByFlag1;		/* 受限于标记1 */
	int32		m_nDisableByFlag2;		/* 受限于标记2 */
	int32		m_nDisableByFlag3;		/* 受限于标记3 */
	int32		m_nDisableByFlag4;		/* 受限于标记4 */
	int32		m_nTalentParam;			/* 天赋修正参数 */
	int32		m_nRangedSkillFlag;		/* 是否是远程技能 */
	BOOL		m_bForceBreakPreSkill;		/* 是否强制中断上一个正在执行的技能 */
	ID_t		m_nSkillType;			/* Charge, channel or instant shot skill */
	CooldownID_t	m_nCooldownID;			/* 冷却时间的ID */
	BOOL		m_nTargetMustInSpecialState;	/* 目标必须是:
							 * 0:活的；1:死的;
							 * -1: 无效 */
	ID_t		m_nClassByUser;			/* 按使用者类型分类，0:玩家, 1:怪物, 2:宠物, 3:物品, */
	ID_t		m_nPassiveFlag;			/* 主动还是被动技能，0:主动技能,1:被动技能;
							 * */
	ID_t		m_nSelectType;			/* 鼠标点选类型 */
	ID_t		m_nOperateModeForPetSkill;	/* 宠物技能发动类型
							 * 0:主人手动点选,1:AI自动执行,2:增强自身属性的被动技能 */
	ID_t		m_nPetRateOfSkill;		/* 技能发动几率,只对宠物技能有效 */
	ID_t		m_nTypeOfPetSkill;		/* 宠物技能类型,0:物功,1:法功,2:护主,3:防御,4:复仇;
							 * */
	ID_t		m_nImpactIDOfSkill;		/* 宠物技能产生的效果ID */
	BOOL		m_bIsActionAtOnce;		/* 引导效果是否立即生效 */

	int16		m_nKindID;				/* 技能种类ID */

	int32		m_nSpeedOfBullet;		/* 子弹飞行速度 */
	ID_t		m_nTargetingLogic;		/* 目标选取逻辑 */
	Time_t		m_nPlayActionTime;		/* 技能动作播放的时间 */
	float		m_afOptimalRangeMin[MAX_SKIL_LEVEL_LIMIT];		/* 技能使用范围下界 */
	float		m_afOptimalRangeMax[MAX_SKIL_LEVEL_LIMIT];		/* 技能使用范围上界 */
	int32		m_nStandFlag;			/* 这个是技能的立场标记，-1代表技能消弱目标，0是中性，1是技能增强目标
							 * */

	/*
	 * 0: 目标和使用者应该是友好关系 ;
	 * 1:目标和使用者应该是敌对关系
	 */
	ID_t		m_nTargetLogicByStand;		/* 技能作用于什么阵营的目标 */

	/* 0: 目标必须是玩家 //1:目标必须是宠物 //2:目标必须是怪物 */
	ID_t		m_nTargetCheckByObjType;	/* 技能的消耗及相关检查 */
	BOOL		m_bPartyOnly;			/* 技能只能作用于队友 */
	int32		m_nChargesOrInterval;		/* 连续生效次数和引导中的生效次数 */
	BOOL		m_bAutoShot;			/* 自动连续释放技能 */
	int32		m_nAccuracy;			/* 命中率 */
	int32		m_nCriticalRate;		/* 会心率,或者叫暴击率 */
	BOOL		m_bUseNormalAttackRate;		/* 技能的冷却是否受人物攻击速度影响 */
	Time_t		m_nActiveTime;			/* 激活时间 */
	float		m_fRadius;			/* 作用半径 */
	float		m_fAngle;			/* 作用角度 */
	int32		m_nMaxTargetNumber;		/* 最大作用目标数 */
	BOOL		m_bCanInterruptAutoShot;	/* 本技能会中断自动射击技能的连续释放 */
	Time_t		m_nDelayTime;			/* 延迟时间 */
	ID_t		m_aSkillInstance[MAX_TALENT_LEVEL];	/* 技能受天赋影响的数据索引 */
	char const	*m_szDescription;			/* 技能的描述 */

	/*
	 * 伤害通用延迟时间,当玩家使用技能有效时,先向client广播技能使用成功消息,然后经过此延迟
	 * ;
	 * 时间后再向client广播伤害列表,以及在server端产生伤害效?
	 */
	Time_t		m_nHurtDelayTime;

	/* 是否瞬发技能,在玩家使用技能时,是否中断玩家的走、跑、跳等移动状态 */
	BOOL		m_bInterruptMove;

	/* 击退距离，每个技能会有自己的击退距离 */
	float		m_fBeatBackDistance;

	/* 击退概率，每个人都按照概率计算 */
	float		m_fBeatBackRate;

	/* 击飞距离 */
	float		m_fBeatFlyDistance;

	/* 击飞概率，每个人都按照概率计算 */
	float		m_fBeatFlyRate;

	/* 是否为先知类技能 */
	BOOL		m_bUseBallSkill;

	/* 技能所属的系别 */
	int32		m_iSkillClass;

	/* 技能的等级上限 */
	int32		m_iSkillMaxLevel;

	/* 子技能列表 */
	int32		m_aSubSkill[MAX_SUB_SKILL];
	int32		m_aSubSkillSuccessRate[MAX_SUB_SKILL];

	/* 是否是冲锋或瞬移 */
	int32		m_iIsRunSkill;

	/* 是否可以使聚气和引导回退 */
	BOOL		m_bCanInterruptChannel;

	/* 回退的百分比 */
	int32		m_iChannelBackRate;

	/* 产生回退的概率 */
	int32		m_iChannelBackHappanRate;

	/* 技能矩形攻击范围的宽度 add by wujianping */
	float		m_fSpellRectangleWidth;

	/* 控制系类型 add by wujianping */
	int32		m_nControlType;
};

/*
 =======================================================================================================================
        SkillInstance ;
        FILE_SKILL_TEMPLATE ;
        描述天赋变化后的技能参数变化 ;
        由g_SpellDataMgr管理 ;
        其中m_nLogicID对应 SkillLogic_T 族
 =======================================================================================================================
 */
class	SpellInstanceData
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { MAX_ID = 16384, };
	enum { DESCRIPTOR_NUMBER = 12, CONDITION_AND_DEPLETE_TERM_NUMBER = 3, };
	SpellInstanceData();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellInstanceData()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInited(void) const
	{
		return m_bInited;
	};
	BOOL	InitFromDB(TAB::TABFile * pDB, int32 const nRow);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetInstanceID(void) const
	{
		return m_nInstanceID;
	};

	/*
	 ===============================================================================================================
	        int32 GetIDForManagment(void) const {return m_nGUID;
	        };
	 ===============================================================================================================
	 */
	char const *GetDescription(void) const
	{
		return m_szDesc;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetLogicID(void) const
	{
		return m_nLogicID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetCooldownTimeBySkillLevel(int32 iSkillLevel) const
	{
		return m_nCooldownTime[iSkillLevel];
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetChargeTimeBySkillLevel(int32 iSkillLevel) const
	{
		return m_nChargeTime[iSkillLevel];
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetChannelTimeBySkillLevel(int32 iSkillLevel) const
	{
		return m_nChannelTime[iSkillLevel];
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ConditionAndDepleteTerm const *Get_Property_ConDepTermByIndex(int32 const nIdx) const
	{
		if(0 <= nIdx && CONDITION_AND_DEPLETE_TERM_NUMBER > nIdx) return &m_aConDepTerms[nIdx];
		return NULL;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSkillLevel(void) const
	{
		return m_nSkillLevel;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Descriptor const *GetDescriptorByIndex(int32 const nIdx) const
	{
		if(0 <= nIdx && DESCRIPTOR_NUMBER > nIdx) return &m_aDescriptors[nIdx];
		return NULL;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
        void ReadSplitStringToTable( SplitStringLevelOne* pSplitL1, const char* pSplitString, int32 iMaxSkillLevel,
        int32* pArry );
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL		m_bInited;
	int32		m_nInstanceID;

	/*
	 * int32 m_nGUID;
	 */
	char const	*m_szDesc;
	ID_t		m_nLogicID;
	Time_t		m_nCooldownTime[MAX_SKIL_LEVEL_LIMIT];
	Time_t		m_nChargeTime[MAX_SKIL_LEVEL_LIMIT];
	Time_t		m_nChannelTime[MAX_SKIL_LEVEL_LIMIT];
	ConditionAndDepleteTerm	m_aConDepTerms[CONDITION_AND_DEPLETE_TERM_NUMBER];
	int32		m_nSkillLevel;
	Descriptor	m_aDescriptors[DESCRIPTOR_NUMBER];
	char const	*m_szDescDetail;
};

/*
 =======================================================================================================================
        ImpactSEData_T ;
        FILE_IMPACT_SEDATA ;
        描述持续状态 ;
        比如不同ID的buff分类ID相同,说明这些buff属于同一个互斥组，不能并存 ;
        死后是否保留 ;
        是否可以被技能驱散 ;
        是否是负面效果 ;
        是否可以被手动取消 ;
        由g_EffectSEDataMgr管理
 =======================================================================================================================
 */
class	ImpactSEData_T
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { MAX_ID = 40960, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ImpactSEData_T() :
	m_bInited(FALSE),
	m_nID(-1),
	m_nMutexID(-1)
	,
	m_nPriParam(0),
	m_bCanBeDispeled(FALSE)
	,
	m_bHostileFlag(FALSE),
	m_bCanBeManualCancel(FALSE)
	,
	m_szDescription(NULL),
	m_szActiveEffect(NULL)
	,
	m_szContinuousEffect(NULL),
	m_bIsBullet(FALSE)
	,
	m_bIsHaveEffect(FALSE)
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~ImpactSEData_T()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInited(void) const
	{
		return m_bInited;
	};
	BOOL	InitFromDB(TAB::TABFile * pDB, int32 const nRow);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetID(void) const
	{
		return m_nID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetMutexID(void) const
	{
		return m_nMutexID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPriParam(void) const
	{
		return m_nPriParam;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsStillOnWhenOwnerDead(void) const
	{
		return m_bStillOnWhenOwnerDead;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL CanBeDispeled(void) const
	{
		return m_bCanBeDispeled;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsHosttileImpact(void) const
	{
		return m_bHostileFlag;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL CanBeManualCancel(void) const
	{
		return m_bCanBeManualCancel;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetDescription(void) const
	{
		return m_szDescription;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsHaveEfect() const
	{
		return m_bIsHaveEffect;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL		m_bInited;
	ID_t		m_nID;
	ID_t		m_nMutexID;
	int32		m_nPriParam;
	char const	*m_szActiveEffect;
	char const	*m_szContinuousEffect;
	BOOL		m_bStillOnWhenOwnerDead;
	BOOL		m_bCanBeDispeled;
	BOOL		m_bHostileFlag;
	BOOL		m_bCanBeManualCancel;
	char const	*m_szDescription;
	BOOL		m_bIsBullet;
	BOOL		m_bIsHaveEffect;
};

/*
 =======================================================================================================================
        SkillObjData //暂时不用
 =======================================================================================================================
 */
class	SkillObjData_T
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { MAX_ID = 255, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInited(void) const
	{
		return m_bInited;
	};
	BOOL	InitFromDB(TAB::TABFile * pDB, int32 const nRow);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 DoLogic(void) const
	{
		return m_nDoLogic;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 Action(void) const
	{
		return m_nAction;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 SpecialEffect(void) const
	{
		return m_nSpecialEffect;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 BindPosition(void) const
	{
		return m_nSEBind;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 Model(void) const
	{
		return m_nModel;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 Icon(void) const
	{
		return m_nIcon;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 Friendliness(void) const
	{
		return m_nFriendliness;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsPartyOnly(void) const
	{
		return m_bPartyOnly;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *Description(void) const
	{
		return m_szDescription;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SkillObjData_T(void)
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SkillObjData_T(void)
	{
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL		m_bInited;
	int32		m_nDoLogic;
	int32		m_nAction;
	int32		m_nSpecialEffect;
	int32		m_nSEBind;
	int32		m_nModel;
	int32		m_nIcon;
	int32		m_nFriendliness;
	int32		m_nTargetTypeRequirement;
	BOOL		m_bPartyOnly;
	char const	*m_szDescription;
};

/*
 =======================================================================================================================
        EffectData ;
        FILE_STANDARD_IMPACT_DATA ;
        描述技能的原子效果表 ;
        可被某技能组合使用，就是一个技能可能包含若干效果原子 ;
        有对应的逻辑ID,对应ImpactLogic_T ;
        之后的参数描述是相应的ImpactLogic_T所需的参数 ;
        由g_STDEffectMgr管理
 =======================================================================================================================
 */
class	EffectData	/* 标准化的效果数据 */
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { NUMBER_OF_PARAMS = 16, MAX_ID = 40960, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	EffectData() :
	m_bInited(FALSE),
	m_nDataIndex(INVALID_ID),
	m_szName(NULL),
	m_nLogicID(INVALID_ID),
	m_szLogicDesc(NULL),
	m_bIsOverTimed(FALSE),
	m_nImpactID(INVALID_ID),
	m_nMutexID(INVALID_ID),
	m_nLevel(0),
	m_nStandFlag(INVALID_ID),
	m_bRemainOnCorpse(FALSE),
	m_bCanBeDispeled(FALSE),
	m_bCanBeCanceled(FALSE),
	m_bNeedChannelSupport(FALSE),
	m_bIgnoreFliter(FALSE),
	m_bFadeOutWhenUnitOnDamage(FALSE),
	m_bFadeOutWhenUnitStartActions(FALSE),
	m_bFadeOutWhenUnitOffline(FALSE),
	m_bStillTimingWhenUnitOffline(FALSE),
	m_nContinuance(0),
	m_nInterval(0),
	m_bMutexByCaster(FALSE),
	m_nControlType(-1),
	m_nPKRateCtr(-1),
	m_szDescription(NULL),
	m_uBallCount(0),
	m_uBallLife(0),
	m_iEventScriptID(-1),
	m_bIsPassive(FALSE)
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~EffectData()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 GetBallCount() const
	{
		return m_uBallCount;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 GetBallLife() const
	{
		return m_uBallLife;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInited(void) const
	{
		return m_bInited;
	};
	BOOL	InitFromDB(TAB::TABFile * pDB, int32 const nRow);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetDataIndex(void) const
	{
		return m_nDataIndex;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetName(void) const
	{
		return m_szName;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetLogicID(void) const
	{
		return m_nLogicID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetLogicDescription(void) const
	{
		return m_szLogicDesc;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return m_bIsOverTimed;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetImpactID(void) const
	{
		return m_nImpactID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetMutexID(void) const
	{
		return m_nMutexID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetLevel(void) const
	{
		return m_nLevel;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetStandFlag(void) const
	{
		return m_nStandFlag;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsRemainOnCorpse(void) const
	{
		return m_bRemainOnCorpse;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL CanBeDispeled(void) const
	{
		return m_bCanBeDispeled;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL CanBeCanceled(void) const
	{
		return m_bCanBeCanceled;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL NeedChannelSupport(void) const
	{
		return m_bNeedChannelSupport;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsFadeOutWhenUnitOnDamage(void) const
	{
		return m_bFadeOutWhenUnitOnDamage;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsFadeOutWhenUnitStartActions(void) const
	{
		return m_bFadeOutWhenUnitStartActions;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsFadeOutWhenUnitOffline(void) const
	{
		return m_bFadeOutWhenUnitOffline;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsStillTimingWhenUnitOffline(void) const
	{
		return m_bStillTimingWhenUnitOffline;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IgnoreFliter(void) const
	{
		return m_bIgnoreFliter;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetContinuance(void) const
	{
		return m_nContinuance;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetInterval(void) const
	{
		return m_nInterval;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL GetMutexByCasterFlag(void) const
	{
		return m_bMutexByCaster;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetControlType(void) const
	{
		return m_nControlType;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetPKRateCtr(void) const
	{
		return m_nPKRateCtr;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Descriptor const *GetDescriptorByIndex(int32 nIdx) const
	{
		if(0 <= nIdx && NUMBER_OF_PARAMS > nIdx) return &m_aParams[nIdx];
		return NULL;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetDescription(void) const
	{
		return m_szDescription;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEventScriptID() const
	{
		return m_iEventScriptID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetEventScriptID(int32 val)
	{
		m_iEventScriptID = val;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsPassive(void) const
	{
		return m_bIsPassive;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	/* 是否初始化 */
	BOOL		m_bInited;

	/* 在表格中对应的纪录的索引 */
	ID_t		m_nDataIndex;

	/* 名字 */
	char const	*m_szName;

	/* 对应的技能ID */
	ID_t		m_nLogicID;

	/* 描述 */
	char const	*m_szLogicDesc;

	/* 是否为持续性效果 */
	BOOL		m_bIsOverTimed;

	/* 瞬发或驻留效果ID */
	ID_t		m_nImpactID;

	/* 互斥组ID */
	ID_t		m_nMutexID;

	/* 互斥优先级 */
	ID_t		m_nLevel;

	/* 影响性质 */
	ID_t		m_nStandFlag;

	/* 死后是否保留 */
	BOOL		m_bRemainOnCorpse;

	/* 是否可以被技能驱散 */
	BOOL		m_bCanBeDispeled;

	/* 是否可以被手动取消 */
	BOOL		m_bCanBeCanceled;

	/* 是否需要引导支持 */
	BOOL		m_bNeedChannelSupport;

	/* 是否是直通效果,即忽略所有影响 */
	BOOL		m_bIgnoreFliter;

	/* 受到伤害时是否消失 */
	BOOL		m_bFadeOutWhenUnitOnDamage;

	/* 开始动作时是否消失 */
	BOOL		m_bFadeOutWhenUnitStartActions;

	/* 下线就消失否 */
	BOOL		m_bFadeOutWhenUnitOffline;

	/* 下线是否仍然计时 */
	BOOL		m_bStillTimingWhenUnitOffline;

	/* 总持续时间(毫秒) */
	Time_t		m_nContinuance;

	/* 发作时间间隔(毫秒) */
	Time_t		m_nInterval;

	/* 互斥规则是否参考制造者ID */
	BOOL		m_bMutexByCaster;

	/* 是否受人物天赋影响 */
	int32		m_nControlType;

	/* 是否受PK率影响 */
	int32		m_nPKRateCtr;

	/* 子效果描述数组 */
	Descriptor	m_aParams[NUMBER_OF_PARAMS];
	char const	*m_szDescription;

	/* 先知或同类技能需要的子弹数量 */
	uint32		m_uBallCount;

	/* 子弹的生命周期 */
	uint32		m_uBallLife;
	int32		m_iEventScriptID;
	BOOL		m_bIsPassive;
};

using namespace TAB;

/*
 =======================================================================================================================
        SpecialObjData_T ;
        FILE_SPECIAL_OBJ_DATA ;
        为单独的职业（Profession9派）做的技能描述，在地上放陷阱被角色触发包括自己或敌人 ;
        在本项目中可能不用 ;
        对应逻辑为SpecialObjLogic_T ;
        由g_SpecialObjDataMgr管理
 =======================================================================================================================
 */
class		SpecialObjData_T
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { MAX_ID = 1023, DESCRIPTOR_NUMBER = 16, };
	SpecialObjData_T();

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpecialObjData_T()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInited(void) const
	{
		return m_bInited;
	};
	BOOL	InitFromDB(TABFile *pDB, int32 const nRow);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellID_t GetID(void) const
	{
		return m_nDataID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *GetName(void) const
	{
		return m_szName;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetClass(void) const
	{
		return m_nClass;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetLogicID(void) const
	{
		return m_nLogicID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetStealthLevel(void) const
	{
		return m_nStealthLevel;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTrapUsedFlags(void) const
	{
		return m_nTrapUsedFlags;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetActiveTimes(void) const
	{
		return m_nActiveTimes;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetContinuance(void) const
	{
		return m_nContinuance;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetInterval(void) const
	{
		return m_nInterval;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetTriggerRadius(void) const
	{
		return m_fTriggerRadius;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	float GetEffectRadius(void) const
	{
		return m_fEffectRadius;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEffectedObjNumber(void) const
	{
		return m_nEffectedObjNumber;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Descriptor const *GetDescriptorByIndex(int32 const nIdx) const
	{
		if(0 <= nIdx && DESCRIPTOR_NUMBER > nIdx) return &m_aDescriptors[nIdx];
		return NULL;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	char const *Description(void) const
	{
		return m_szDescription;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL		m_bInited;	/* 该记录是否已经初始化 */
	int32		m_nDataID;	/* 数据ID */
	char const	*m_szName;	/* 名称 */

	/* 。。Skip Tooltips(客户端显示用的说明性文字) */
	ID_t		m_nClass;	/* 类别 */
	ID_t		m_nLogicID;	/* 逻辑ID */
	int32		m_nStealthLevel;			/* 隐身级别 */
	int32		m_nTrapUsedFlags;			/* 陷阱专用的一些标记的集成 */
	int32		m_nActiveTimes;				/* 可以激发的次数 */

	/* 。。Skip 客户端显示用的相关数据 */
	Time_t		m_nContinuance;				/* 持续时间 */
	Time_t		m_nInterval;				/* 激活时间间隔 */
	float		m_fTriggerRadius;			/* 触发半径 */
	float		m_fEffectRadius;			/* 影响半径 */
	int32		m_nEffectedObjNumber;			/* 影响对象的数目 */
	Descriptor	m_aDescriptors[DESCRIPTOR_NUMBER];	/* 参数数组 */
	char const	*m_szDescription;			/* 内部使用的描述 */
};

/*
 =======================================================================================================================
        FILE_IMPACT_DIR
 =======================================================================================================================
 */
class	ImpactDirData_T
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { MAX_ID = 16384, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	ImpactDirData_T() :
	m_bInited(FALSE),
	m_nDataID(0)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~ImpactDirData_T()
	{
	} BOOL	InitFromDB(TAB::TABFile * pDB, int32 const nRow);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsInited(void) const
	{
		return m_bInited;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL	m_bInited;
	int32	m_nDataID;
};
#endif /* _DATA_RECORDS_H_ */
