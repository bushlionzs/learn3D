/*$T Common/EncryptAriths/Devalue.h GC 1.140 10/10/07 10:06:29 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __DEVALUE__H__
#define __DEVALUE__H__

#include "CryptDef.h"

class DevalueBase :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { KEYLENGTH = 16, BUFSIZE = 32 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BUFSIZE;
	}

	void	SetUserKey(const uchar *key);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	char	m_szUserKey[KEYLENGTH];
};

class DevalueEncryption :
	public DevalueBase
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(uchar *inoutBlock) const
	{
		DevalueEncryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const uchar *inBlock, uchar *outBlock) const;
	void	SetUserKey(const uchar *key);
};

class DevalueDecryption :
	public DevalueBase
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(uchar *inoutBlock) const
	{
		DevalueDecryption::ProcessBlock(inoutBlock, inoutBlock);
	}

	void	ProcessBlock(const uchar *inBlock, uchar *outBlock) const;
	void	SetUserKey(const uchar *key);
};
#endif
