
#ifndef __GAMEDEFINE_ATTR_H__
#define __GAMEDEFINE_ATTR_H__

#include "Define.h"
#include "DefineItem.h"

enum PLAYER_PROPERTY_LEVEL1
{
	CPROPERTY_LEVEL1_STR	= 0,
	CPROPERTY_LEVEL1_CON	= 1,
	CPROPERTY_LEVEL1_INT	= 2,
	CPROPERTY_LEVEL1_DEX	= 3,
	CPROPERTY_LEVEL1_NUMBER,
};

enum CHAR_PROPERTY_LEVEL
{
	CPROPERTY_LEVEL_STR		= 0, //力量
	CPROPERTY_LEVEL_CON		= 1, //体质
	CPROPERTY_LEVEL_INT		= 2, //智力
	CPROPERTY_LEVEL_DEX		= 3, //敏捷
	CPROPERTY_LEVEL_SKILL, //技能
	CPROPERTY_LEVEL_NUMBER,
};

enum PLAYER_PROPERTY_LEVEL2
{
	CPROPERTY_LEVEL2_DEFENCE_NEAR	= 0,
	CPROPERTY_LEVEL2_DEFENCE_FAR,
	CPROPERTY_LEVEL2_ATTACK_NEAR,
	CPROPERTY_LEVEL2_ATTACK_FAR,
	CPROPERTY_LEVEL2_TOUGHNESS,
	CPROPERTY_LEVEL2_ATTACKRATE_M,
	CPROPERTY_LEVEL2_DEFENCE_M,
	CPROPERTY_LEVEL2_MAXHP,
	CPROPERTY_LEVEL2_MAXMP,
	CPROPERTY_LEVEL2_RESTOREHP,
	CPROPERTY_LEVEL2_RESTOREMP,
	CPROPERTY_LEVEL2_HIT,
	CPROPERTY_LEVEL2_MISS,
	CPROPERTY_LEVEL2_CRITRATE,
	CPROPERTY_LEVEL2_SPEED,
	CPROPERTY_LEVEL2_ATTACKSPEED,
	CPROPERTY_LEVEL2_ATTACKCOLD,
	CPROPERTY_LEVEL2_DEFENCECOLD,
	CPROPERTY_LEVEL2_ATTACKFIRE,
	CPROPERTY_LEVEL2_DEFENCEFIRE,
	CPROPERTY_LEVEL2_ATTACKLIGHT,
	CPROPERTY_LEVEL2_DEFENCELIGHT,
	CPROPERTY_LEVEL2_ATTACKPOISON,
	CPROPERTY_LEVEL2_DEFENCEPOISON,
	CPROPERTY_LEVEL2_NUMBER,
};

enum PLAYER_PROPERTY_LEVEL3
{
	CPROPERTY_LEVEL3_NUQI		= 0,
	CPROPERTY_LEVEL3_SKILLPOINT		= 1,
	CPROPERTY_LEVEL3_XIANJIN		= 2,
	CPROPERTY_LEVEL3_YINSHEN		= 3,
	CPROPERTY_LEVEL3_NUMBER,
};

enum PLAYER_PROPERTY_LEVEL4_BALANCE
{
	CPROPERTY_LEVEL4_BALANCE_CRITRATE		= 0,
	CPROPERTY_LEVEL4_BALANCE_TOUGHNESS,
	CPROPERTY_LEVEL4_BALANCE_HIT,
	CPROPERTY_LEVEL4_BALANCE_MISS,
	CPROPERTY_LEVEL4_BALANCE_CRITDAMAGE,
	CPROPERTY_LEVEL4_BALANCE_CRITDAMAGEDERATE,
	CPROPERTY_LEVEL4_BALANCE_CTRLHIT,
	CPROPERTY_LEVEL4_BALANCE_CTRLMISS,
	CPROPERTY_LEVEL4_BALANCE_NUMBER,
};

enum PLAYER_PROPERTY_ARCHIVE
{
	CPROPERTY_ARCHIVE_HP				= 0,
	CPROPERTY_ARCHIVE_MP,
	CPROPERTY_ARCHIVE_STRIKEPOINT,
	CPROPERTY_ARCHIVE_VIGOR,
	CPROPERTY_ARCHIVE_MAX_VIGOR,
	CPROPERTY_ARCHIVE_VIGOR_REGENE_RATE,
	CPROPERTY_ARCHIVE_ENERGY,
	CPROPERTY_ARCHIVE_MAX_ENERGY,
	CPROPERTY_ARCHIVE_ENERGY_REGENE_RATE,
	CPROPERTY_ARCHIVE_RAGE,
	CPROPERTY_ARCHIVE_LEVEL,
	CPROPERTY_ARCHIVE_PKVALUE,
	CPROPERTY_ARCHIVE_CURRENTPET,
	CPROPERTY_ARCHIVE_EXP,
	CPROPERTY_ARCHIVE_AT_POSITION,
	CPROPERTY_ARCHIVE_BK_POSITION,
	CPROPERTY_ARCHIVE_NEXT_POSITION,
	CPROPERTY_ARCHIVE_AT_SCENE,
	CPROPERTY_ARCHIVE_BK_SCENE,
	CPROPERTY_ARCHIVE_NEXT_SCENE,
	CPROPERTY_ARCHIVE_STR,
	CPROPERTY_ARCHIVE_CON,
	CPROPERTY_ARCHIVE_INT,
	CPROPERTY_ARCHIVE_DEX,
	CPROPERTY_ARCHIVE_REMAINPOINT,
	CPROPERTY_ARCHIVE_REMAINSKILLPOINT,
	CPROPERTY_ARCHIVE_S_SKILLPOINT,
	CPROPERTY_ARCHIVE_HORSE_MATTING_FLAG,
	CPROPERTY_ARCHIVE_CAMP,
	CPROPERTY_ARCHIVE_PROFESSION,
	CPROPERTY_ARCHIVE_COUNTRY,
	CPROPERTY_ARCHIVE_GUILDID,
	CPROPERTY_ARCHIVE_FAMILYID,
	CPROPERTY_ARCHIVE_GUILDOFFICIAL,
	CPROPERTY_ARCHIVE_GUILDPOINT,
	CPROPERTY_ARCHIVE_HONOR,
	CPROPERTY_ARCHIVE_INHERENCE_EXP,
	CPROPERTY_ARCHIVE_INHERENCE_LEVEL,
	CPROPERTY_ARCHIVE_TEAMID,
	CPROPERTY_ARCHIVE_GUID,
	CPROPERTY_ARCHIVE_PORTRAITID,
	CPROPERTY_ARCHIVE_NAME,
	CPROPERTY_ARCHIVE_SEX,
	CPROPERTY_ARCHIVE_CREATETIME,
	CPROPERTY_ARCHIVE_TITLE,
	CPROPERTY_ARCHIVE_PASSWORD,
	CPROPERTY_ARCHIVE_PWD_TYPE,
	CPROPERTY_ARCHIVE_PWDDELTIME,
	CPROPERTY_ARCHIVE_LASTPROTECTIME,
	CPROPERTY_ARCHIVE_PROTECTIME,
	CPROPERTY_ARCHIVE_PROTECDELTIME,
	CPROPERTY_ARCHIVE_HAIR_COLOR,
	CPROPERTY_ARCHIVE_FACE_COLOR,
	CPROPERTY_ARCHIVE_HAIR_MODEL,
	CPROPERTY_ARCHIVE_FACE_MODEL,
	CPROPERTY_ARCHIVE_ONLINETIME,
	CPROPERTY_ARCHIVE_LASTLOGINTIME,
	CPROPERTY_ARCHIVE_LASTLOGOUTTIME,
	CPROPERTY_ARCHIVE_LASTLOGINIP,
	CPROPERTY_ARCHIVE_DBVERSION,
	CPROPERTY_ARCHIVE_WENCAI,
	CPROPERTY_ARCHIVE_RONGYU,
	CPROPERTY_ARCHIVE_SHENGWANG,
	CPROPERTY_ARCHIVE_HOTVALUE,
	CPROPERTY_ARCHIVE_SOULID,
	CPROPERTY_ARCHIVE_GEMATT,
	CPROPERTY_ARCHIVE_SETSUIT,
	CPROPERTY_ARCHIVE_LEVELATT,
	CPROPERTY_ARCHIVE_SILLER,
	CPROPERTY_ARCHIVE_GOLD,
	CPROPERTY_ARCHIVE_BINDSILLER,
	CPROPERTY_ARCHIVE_BINDGOLD,
	CPROPERTY_ARCHIVE_MONEYMODE,
	CPROPERTY_ARCHIVE_GOODBAD,
	CPROPERTY_ARCHIVE_BANK_MONEY,
	CPROPERTY_ARCHIVE_BANK_OFFSIZE,
	CPROPERTY_ARCHIVE_LEAVEGUILDTIME,
	CPROPERTY_ARCHIVE_FIRSTLOGIN,
	CPROPERTY_ARCHIVE_BUS_ID,
	CPROPERTY_ARCHIVE_LAST_FORBIDCHAT_TIME,
	CPROPERTY_ARCHIVE_LAST_ENJAIL_TIME,
	CPROPERTY_ARCHIVE_COUNTRY_OFFICIAL,
	CPROPERTY_ARCHIVE_POSTCODE,
	CPROPERTY_ARCHIVE_PLAYER_SHOP_BEGIN,   // = 83
	CPROPERTY_ARCHIVE_PLAYER_SHOP_END		= CPROPERTY_ARCHIVE_PLAYER_SHOP_BEGIN + MAX_SHOP_NUM_PER_PLAYER - 1,	// = 84
	CPROPERTY_ARCHIVE_PLAYER_SHOP_FAVORITE_BEGIN,	//85
	CPROPERTY_ARCHIVE_PLAYER_SHOP_FAVORITE_END	= CPROPERTY_ARCHIVE_PLAYER_SHOP_FAVORITE_BEGIN + MAX_FAVORITE_SHOPS, // = 95
	CPROPERTY_ARCHIVE_BAG_BEGIN,   // = 96
	CPROPERTY_ARCHIVE_BAG_END			= CPROPERTY_ARCHIVE_BAG_BEGIN + MAX_BAG_SIZE - 1, //279
	CPROPERTY_ARCHIVE_EQUIP_BEGIN,  // = 280
	CPROPERTY_ARCHIVE_EQUIP_END			= CPROPERTY_ARCHIVE_EQUIP_BEGIN + HEQUIP_NUMBER - 1, //297
	CPROPERTY_ARCHIVE_BANK_BEGIN,  // = 298
	CPROPERTY_ARCHIVE_BANK_END			= CPROPERTY_ARCHIVE_BANK_BEGIN + MAX_BANK_SIZE - 1, //405
	CPROPERTY_ARCHIVE_SKILL ,	  // = 406
	CPROPERTY_ARCHIVE_COOLDOWN,
	CPROPERTY_ARCHIVE_TALENT,
	CPROPERTY_ARCHIVE_IMPACT,
	CPROPERTY_ARCHIVE_ABILITY,
	CPROPERTY_ARCHIVE_QUEST,
	CPROPERTY_ARCHIVE_SETTING,
	CPROPERTY_ARCHIVE_PET,
	CPROPERTY_ARCHIVE_RELATION,
	CPROPERTY_ARCHIVE_PRIVATEINFO,
	CPROPERTY_ARCHIVE_TITLEINFO,
	CPROPERTY_ARCHIVE_RESERVE,
	CPROPERTY_ARCHIVE_BUS,
	CPROPERTY_ARCHIVE_SOLDLIST,
	CPROPERTY_ARCHIVE_GUILDBUILD_COUNT,
	CPROPERTY_ARCHIVE_GUILDBUILD_DAY,
	CPROPERTY_ARCHIVE_LAST_CHGPKMODE_TIME,
	CPROPERTY_ARCHIVE_IS_DEL_CHAR,
	CPROPERTY_ARCHIVE_WALLOWONLINETIME,
	CPROPERTY_ARCHIVE_WALLOWOFFLINETIME,
	CPROPERTY_ARCHIVE_TOTALONLINETIME,
	CPROPERTY_ARCHIVE_NEW_NAME,
	CPROPERTY_ARCHIVE_HONOR_RECORD,
	CPROPERTY_ARCHIVE_KILL_COUNT_TODAY,
	CPROPERTY_ARCHIVE_TIRED_TIME,
	CPROPERTY_ARCHIVE_PVP2V2_LEVEL,
	CPROPERTY_ARCHIVE_PVP2V2_MARK,
	CPROPERTY_ARCHIVE_PVP2V2_DAY,
	CPROPERTY_ARCHIVE_PVP2V2_MARK_WEEKTOTAL,
	CPROPERTY_ARCHIVE_DUEL_MARK,
	CPROPERTY_ARCHIVE_BANKPET,
	CPROPERTY_ARCHIVE_DBFLAG,
	CPROPERTY_ARCHIVE_EXPLOIT,		//功勋
	CPROPERTY_ARCHIVE_EXPLOITDAY,
	CPROPERTY_ARCHIVE_FEASTSCORE,    // 节日积分
	CPROPERTY_ARCHIVE_WORLDID,
	CPROPERTY_ARCHIVE_MOUNTMODELID,
	CPROPERTY_ARCHIVE_SHOPITEMFAVORITE,
	CPROPERTY_ARCHIVE_SHOPITEMBUYHISTORY,
	CPROPERTY_ARCHIVE_INHERENCEBALANCE,
	CPROPERTY_ARCHIVE_INHERENCEZHUANJING,
	CPROPERTY_ARCHIVE_BATTLEHONOUR,	// 2010-11-4 by rj 战场荣誉
	CPROPERTY_ARCHIVE_NUMBER,
};

#define HUMAN_DB_ATTR_FLAG_LENGTH	((CPROPERTY_ARCHIVE_NUMBER >> 3) + 1)

enum PLAYER_PROPERTY_CONSTANT1
{
	MAX_STRIKE_POINT			= 9,
	BASE_MAX_STRIKE_POINT			= 6,
	BASE_MAX_RAGE				= 1000,
	MAX_RAGE				= 1500,
	BASE_ATTACK_SPEED			= 100,
	BASE_VISION_RANGE			= 16,
	MAX_EXP_REFIX_IN_CHAR			= 400,
	MAX_EXP_REFIX_IN_SYSTEM			= 400,
	MAX_COOLDOWN_LIST_SIZE_FOR_HUMAN	= 32,
	MAX_COOLDOWN_LIST_SIZE_FOR_PET		= 8,
	MAX_COOLDOWN_LIST_SIZE_FOR_MONSTER	= 16,
};
enum PLAYER_PROPERTY_CONSTANT2
{
	MAX_EFFECTIVE_RESIST			= 100,
	LL_GENERAL_ATTACK_DEFENCE		= 0,
	LL_TRAIT_ATTACK				= 0,
	LL_RESIST				= 0,
	UL_RESIST				= 90,
};
enum PLAYER_PROPERTY_CONSTANT3
{
	LL_CRITICAL				= 0,
	LL_HIT_MISS				= 0,
	UL_CRITICAL				= 100,
	UL_HIT_MISS				= 1000,
};

enum CHAR_ATTR_DBFLAG 
{ 
	DBFLAG_AUTO_COUNTRY_PRISE = 0,		// 自动选择国家给奖励
	DBFLAG_KHAN2_FLAG = 1,				// 成2用户标记
};

/*
=======================================================================================================================
=======================================================================================================================
*/
inline int32 Property_VerifyGeneralAttack(int32 nAttr)
{
	if(LL_GENERAL_ATTACK_DEFENCE > nAttr)
	{
		nAttr = LL_GENERAL_ATTACK_DEFENCE;
	}

	return nAttr;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
inline int32 Property_VerifyTraitAttack(int32 nAttr)
{
	if(LL_TRAIT_ATTACK > nAttr)
	{
		nAttr = LL_TRAIT_ATTACK;
	}

	return nAttr;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
inline int32 Property_VerifyDefence(int32 nAttr)
{
	if(LL_GENERAL_ATTACK_DEFENCE > nAttr)
	{
		nAttr = LL_GENERAL_ATTACK_DEFENCE;
	}

	return nAttr;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
inline int32 Property_VerifyResist(int32 nAttr)
{
	if(LL_RESIST > nAttr)
	{
		nAttr = LL_RESIST;
	}

	if(UL_RESIST < nAttr)
	{
		nAttr = UL_RESIST;
	}

	return nAttr;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
inline int32 Attr_VerifyToughness(int32 nAttr)
{
	return nAttr;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
inline int32 Property_VerifyHitMiss(int32 nAttr)
{
	if(LL_HIT_MISS > nAttr)
	{
		nAttr = LL_HIT_MISS;
	}

	if(UL_HIT_MISS < nAttr)
	{
		nAttr = UL_HIT_MISS;
	}

	return nAttr;
}

/*
=======================================================================================================================
=======================================================================================================================
*/
inline int32 Property_VerifyCritical(int32 nAttr)
{
	if(LL_CRITICAL > nAttr)
	{
		nAttr = LL_CRITICAL;
	}

	return nAttr;
}

enum { STRIKE_POINT_SEGMENT_SIZE = 3, };
enum { MAX_STRIKE_POINT_SEGMENT = MAX_STRIKE_POINT / STRIKE_POINT_SEGMENT_SIZE, };
enum { MAX_IMPACT_LEVEL = 12, };

enum eHORSE_PROPERTY
{
	HORSE_PROPERTY_TAKELEVEL			= 0,
	HORSE_PROPERTY_PETTYPE,
	HORSE_PROPERTY_FOODTYPE,
	HORSE_PROPERTY_LIFE,
	HORSE_PROPERTY_STRPERCEPTION,
	HORSE_PROPERTY_CONPERCEPTION,
	HORSE_PROPERTY_DEXPERCEPTION,
	HORSE_PROPERTY_INTPERCEPTION,
	HORSE_PROPERTY_GROWRATE1,
	HORSE_PROPERTY_GROWRATE2,
	HORSE_PROPERTY_GROWRATE3,
	HORSE_PROPERTY_GROWRATE4,
	HORSE_PROPERTY_GROWRATE5,
	HORSE_PROPERTY_NUM,
};
enum PET_PROPERTY_CONSTANT1 { PET_BASE_MAX_HAPPINESS = 100, };

#define INVALID_MOOD_STATE	(-1)

enum BASEPROPERTY_REFESH_MODE
{
	REFESH_ALL				= 0,
	REFESH_FIRST,
	FEFESH_SECOND,
	SEND_TO_SELF,
	SEND_TO_OTHER,
	SEND_TO_WHO_LOCK_ME,
	REFESH_NUMS,
};
#endif
