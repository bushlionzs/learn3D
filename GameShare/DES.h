/*$T Common/EncryptAriths/DES.h GC 1.140 10/10/07 10:06:29 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __DES_H__
#define __DES_H__

#include "CryptDef.h"

class DES :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey, CipherDir dir);

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ProcessBlock(byte *inoutBlock) const
	{
		DES::ProcessBlock(inoutBlock, inoutBlock);
	}

	enum { KEYLENGTH = 8, BLOCKSIZE = 8 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	static const uint32	Spbox[8][64];

	SecBlock<uint32, 32>	k;
};

class DESEncryption :
	public DES
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);
};

class DESDecryption :
	public DES
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);
};

class DES_EDE_Encryption :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
	void	ProcessBlock(byte *inoutBlock) const;

	enum { KEYLENGTH = 16, BLOCKSIZE = 8 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	DES	e, d;
};

class DES_EDE_Decryption :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
	void	ProcessBlock(byte *inoutBlock) const;

	enum { KEYLENGTH = 16, BLOCKSIZE = 8 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	DES	d, e;
};

class TripleDES_Encryption :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);

	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
	void	ProcessBlock(byte *inoutBlock) const;

	enum { KEYLENGTH = 24, BLOCKSIZE = 8 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	DES	e1, d, e2;
};

class TripleDES_Decryption :
	public BlockTransformation
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetUserKey(const byte *userKey);
	void	ProcessBlock(const byte *inBlock, byte *outBlock) const;
	void	ProcessBlock(byte *inoutBlock) const;

	enum { KEYLENGTH = 24, BLOCKSIZE = 8 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 BlockSize() const
	{
		return BLOCKSIZE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	DES	d1, e, d2;
};
#endif
