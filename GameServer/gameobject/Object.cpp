#include "stdafx.h"
#include "map/game_map.h"
#include "map/map_info.h"
#include "ObjectList.h"
#include "ObjectManager.h"
#include "Object.h"

/*
 =======================================================================================================================
 =======================================================================================================================
 */

Object::Object()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	m_ObjID = INVALID_ID;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	m_uPoolID = UINT_MAX;
	m_uSingleMgrIndex = UINT_MAX;
	m_pObjNode = new _INIT_LIST_NODE(this);
	m_bActive = FALSE;

	m_Pos.Clear();
	m_Dir = 0.f;
	m_pMap = NULL;
	m_GridID = INVALID_ID;
	m_uLastTime = 0;
	m_uNowTime = 0;
	m_uCreateTime = 0;

	m_nLogicCount = 0;
	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
Object::~Object()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	KSafeDelete(m_pObjNode);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::OnEnterMap(void)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	m_uLastTime = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	m_uNowTime = 0;
	m_uCreateTime = 0;

	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::OnLeaveMap(void)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	m_uLastTime = 0;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	m_uNowTime = 0;
	m_uCreateTime = 0;

	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::UpdateTime(uint32 uTime)
{
	__GUARD__ if(m_uNowTime == 0)
	{
		m_uCreateTime = uTime;
		m_uLastTime = uTime;
	}
	else
	{
		m_uLastTime = m_uNowTime;
	}

	m_uNowTime = uTime;
	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::Clear()
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	m_bActive = FALSE;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/


	m_pObjNode->m_pNext = NULL;
	m_pObjNode->m_pPrev = NULL;

	m_Pos.Clear();
	m_Dir = 0.f;
	m_GridID = INVALID_ID;
	m_nMoveLogicCount = INVALID_ID;

	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
BOOL Object::Init(const _INIT_OBJECT *pInit)
{
	__GUARD__ if(pInit == NULL) return FALSE;

	m_Pos = pInit->m_Pos;
	m_Dir = pInit->m_Dir;
	UpdateGrid();
	return TRUE;

	__UNGUARD__ return FALSE;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
bool Object::HeartBeat(uint32 uTime)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	UpdateTime(uTime);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	return true;

	__UNGUARD__ return false;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
BOOL Object::HeartBeat_OutMap(uint32 uTime)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	UpdateTime(uTime);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	return TRUE;

	__UNGUARD__ return FALSE;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
BOOL Object::IsInValidRadius(float fX1, float fZ1, float fX2, float fZ2, float fRadius)
{
	/*~~~~~~~~~~~~~~~~~~~*/
	float	fDistX, fDistZ;
	/*~~~~~~~~~~~~~~~~~~~*/

	fDistX = fX1 - fX2;
	fDistZ = fZ1 - fZ2;

	return((fRadius * fRadius) > (fDistX * fDistX + fDistZ * fDistZ));
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
BOOL Object::IsInValidRadius(const Object *pOb, float fRadius)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	KCheck(pOb != NULL);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	return IsInValidRadius(m_Pos.m_fX, m_Pos.m_fZ, pOb->m_Pos.m_fX, pOb->m_Pos.m_fZ, fRadius);

	__UNGUARD__ return FALSE;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
BOOL Object::IsInValidRadius(const GLPos *pPos, float fRadius)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	KCheck(pPos != NULL);
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	return IsInValidRadius(m_Pos.m_fX, m_Pos.m_fZ, pPos->m_fX, pPos->m_fZ, fRadius);

	__UNGUARD__ return FALSE;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetActiveFlag(BOOL bFlag)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	__GUARD__	UpdateGrid();
	uchar		bNewActive = (uchar) bFlag;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(m_bActive != bNewActive)
	{
		m_bActive = bNewActive;

		if(m_GridID != INVALID_ID)
		{
			if(m_bActive)
			{
				/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
				BOOL	bRet = GetMap()->ObjGrid_Register(this, m_GridID);
				/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

				if(!bRet)
				{
					KCheck(bRet && "Object::SetActiveFlag ObjGrid_Register return FALSE");
				}

				OnRegisterToGrid();
			}
			else
			{
				OnUnregisterFromGrid();

				/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
				BOOL	bRet = GetMap()->ObjGrid_Unregister(this, m_GridID);
				/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

				if(!bRet)
				{
					KCheck(bRet && "Object::SetActiveFlag ObjGrid_Unregister return FALSE");
				}

				m_GridID = -1;
			}
		}
	}

	__UNGUARD__
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
uchar Object::GetLogicCount(void) const
{
	return m_nLogicCount;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::AddLogicCount(void)
{
	m_nLogicCount++;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetMoveLogicCount(int32 nLogicCount)
{
	m_nMoveLogicCount = nLogicCount;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
int32 Object::GetMoveLogicCount(void)
{
	return m_nMoveLogicCount;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::AddMoveLogicCount(void)
{
	++m_nMoveLogicCount;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
BOOL Object::UpdateGrid(void)
{
	__GUARD__ if(GetMap() == NULL) return FALSE;

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	GridID_t	idNew = GetMap()->CalcGridID(GetGLPos());
	GridID_t	idOld = m_GridID;
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(idNew != idOld)
	{
		if (this->GetObjType() == Object::OBJECT_CLASS_PLAYER)
		{
			int kk = 0;
		}
		m_GridID = idNew;
		if(IsActiveObj())
		{
			if(idOld != INVALID_ID)
			{
				/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
				BOOL	bRet = GetMap()->ObjGrid_Changed(this, idNew, idOld);
				/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

				if(!bRet)
				{
					KCheck(bRet && "Object::UpdateZone ObjGrid_Changed return FALSE");
				}
			}
			else
			{
				/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
				BOOL	bRet = GetMap()->ObjGrid_Register(this, m_GridID);
				/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

				if(!bRet)
				{
					KCheck(bRet && "Object::UpdateZone ObjGrid_Register return FALSE");
				}

				OnRegisterToGrid();
			}
		}
	}

	return TRUE;

	__UNGUARD__ return FALSE;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::Teleport(const GLPos *pos,uchar bShowChangeState)
{
	
}

void Object::SetDir(float dir)
{
	m_Dir = dir;
}

void Object::SetObjectDir(float dir)
{
	m_Dir = dir;
}
/*
 =======================================================================================================================
 =======================================================================================================================
 */
NetPacket *Object::CreateDeleteObjPacket(void)
{
	return nullptr;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::DestroyDeleteObjPacket(NetPacket*pPacket)
{
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
Object *Object::GetSpecificObjInSameSceneByID(ObjID_t nID)
{
	__GUARD__ if(NULL == m_pMap)
	{
		KCheckEx(FALSE, "[Object::GetSpecificObjInSameSceneByID]: m_pMap is NULL!!!");
		return NULL;
	}

	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	ObjectManager	*pObjManager = m_pMap->GetObjManager();
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	if(NULL == pObjManager)
	{
		KCheckEx(FALSE, "[Object::GetSpecificObjInSameSceneByID]: m_pObjManager is NULL!!!");
		return NULL;
	}

	return pObjManager->GetObj(nID);
	__UNGUARD__ return NULL;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
Object *Object::GetSpecificHumanInSameSceneByGUID(GUID_t nID)
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	//__GUARD__ Object	*pObj = NULL;
	///*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	//if(NULL != g_pGUIDMgr)
	//{
	//	pObj = static_cast<Object *>(g_pGUIDMgr->Get(nID));
	//}

	//if(pObj && pObj->GetMapID_i() == GetMapID_i())
	//{
	//	return pObj;
	//}

	return NULL;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
uint32 Object::GetUniqueID(void) const
{
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/
	uint32	nValue = GetMapID_i();
	/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/

	nValue = nValue << 16;
	nValue += GetID() & 0x0000FFFF;
	return nValue;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
const MapID_t Object::GetMapID_i() const
{
	if(m_pMap) return m_pMap->MapID();

	return INVALID_ID;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
GameMap*Object::GetMap_i()
{
	return m_pMap;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetMap_i(GameMap*scene)
{
	m_pMap = scene;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
const GridID_t Object::GetGridID_i() const
{
	return m_GridID;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetGridID_i(const GridID_t zoneid)
{
	m_GridID = zoneid;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
const ScriptID_t Object::GetScriptID_i() const
{
	return INVALID_ID;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetScriptID_i(const ScriptID_t scriptid)
{
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
const GLPos *Object::GetGLPos_i() const
{
	return &m_Pos;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetGLPos_i(const GLPos *worldpos)
{
	m_Pos = *worldpos;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
const float Object::GetDir_i() const
{
	return m_Dir;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetDir_i(const float dir)
{
	m_Dir = dir;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
const ObjID_t Object::GetID_i() const
{
	return m_ObjID;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetID_i(const ObjID_t id)
{
	m_ObjID = id;
}

/*
 =======================================================================================================================
 =======================================================================================================================
 */
void Object::SetGLPos(const GLPos *pos)
{
	__GUARD__
	if( pos==NULL )
	{
		char msg[64] = {0};
		MapID_t mapid = INVALID_ID;
		if( GetMap() != NULL )
			mapid = GetMap()->MapID();
		sprintf( msg, "mapid=%d", mapid );
		KCheckEx(FALSE,msg);
	}
	if( pos->m_fX >= 0.f && pos->m_fZ >= 0.f )
	{
		m_Pos = *pos;
	}
	else
	{
		char msg[64] = {0};
		MapID_t mapid = INVALID_ID;
		if( GetMap() != NULL )
			mapid = GetMap()->MapID();
		sprintf( msg, "mapid=%d, xpos=%.2f, zpos=%.2f", mapid, pos->m_fX, pos->m_fZ );
		KCheckEx(FALSE,msg);
	}
	__UNGUARD__
}
