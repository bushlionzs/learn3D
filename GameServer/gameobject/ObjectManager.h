/*$T MapServer/Server/Obj/ObjectManager.h GC 1.140 10/10/07 10:07:32 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __OBJMANAGER_H__
#define __OBJMANAGER_H__

#include "TypeDefine.h"

enum eOBJ_ID_TYPE { OBJ_ID_TYPE_INVALID = -1, OBJ_ID_TYPE_NORMAL, OBJ_ID_TYPE_HUMAN, OBJ_ID_TYPE_NUMBERS };

struct _INIT_OBJECT_MAGAGER
{
	uint32	m_aInitCount[OBJ_ID_TYPE_NUMBERS];
	_INIT_OBJECT_MAGAGER (void)
	{
		memset(m_aInitCount, 0, sizeof(m_aInitCount));
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Clear(void)
	{
		memset(m_aInitCount, 0, sizeof(m_aInitCount));
	}
};

#define MAX_OBJID_SIZE	30000
#define HUMAN_OBJ_START 15000

class	Object;
class	ObjectManager
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	eOBJ_ID_TYPE GetObjIDType(ObjID_t idObj) const
	{
		if(idObj >= HUMAN_OBJ_START)
			return OBJ_ID_TYPE_HUMAN;
		else
			return OBJ_ID_TYPE_NORMAL;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	ObjectManager(void);
	~	ObjectManager(void);

	BOOL	Init(const _INIT_OBJECT_MAGAGER *pInit);
	void	Term(void);

	BOOL	AddObj(Object *pObj, eOBJ_ID_TYPE eIDType = OBJ_ID_TYPE_NORMAL);
	BOOL	RemoveObj(ObjID_t idObj);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	Object *GetObj(ObjID_t idObj)
	{
		if(idObj == INVALID_ID || idObj >= MAX_OBJID_SIZE) return NULL;

		return m_pObj[idObj];
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetNormalObjCount()
	{
		/*~~~~~~~~~~~~~~~*/
		int32	iCount = 0;
		/*~~~~~~~~~~~~~~~*/

		for(int32 i = 0; i < HUMAN_OBJ_START; i++)
		{
			if(m_pObj[i] != NULL)
			{
				iCount++;
			}
		}

		return iCount;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetHumanObjCount()
	{
		/*~~~~~~~~~~~~~~~*/
		int32	iCount = 0;
		/*~~~~~~~~~~~~~~~*/

		for(int32 i = HUMAN_OBJ_START; i < MAX_OBJID_SIZE; i++)
		{
			if(m_pObj[i] != NULL)
			{
				iCount++;
			}
		}

		return iCount;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	Object	*m_pObj[MAX_OBJID_SIZE];
	int32	m_NormalPos;
	int32	m_HumanPos;
};
#endif
