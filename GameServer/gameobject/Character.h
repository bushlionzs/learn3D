/*********************************************************************************************
modified:	2009/12/30
modified:	30:12:2009   11:52
filename: 	Character.h
			file path:	F:\khan2\src\MapServer\Server\Object
			file base:
			file ext:	h

purpose:	去掉不是必须的纯虚函数 下放一些函数到Player中 抽象公共函数 简化相似函数
**********************************************************************************************/


#ifndef __CHARACTER_H__
#define __CHARACTER_H__

#include "StructDB.h"
#include "CharacterStateDef.h"
#include "Util.h"
#include "Creature.h"
#include "skill/Spell_Helper.h"
#include "CharActionCallBack.h"
#include "CharActionLogic.h"
#include "CharacterStateManager.h"
#include "gameobject/CharAttributes.h"

//延迟效果数量上限
const int32	MAX_DELAY_TIME_EFFECT_NUM = 30;

//延迟技能数量上限
const int32	MAX_DELAY_TIME_SKILL_MISS_NUM = 15;


const int32	MAX_HORSE_DATA_INDEX = 32;

struct SItemEffect
{
	BOOL		m_bActive;
	_ITEM_ALLVALUE	m_Attr;

	SItemEffect()
	{
		m_bActive = FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	BOOL IsActive()
	{
		return m_bActive;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActive(BOOL bActive)
	{
		m_bActive = bActive;
	}
};

struct SSpellEffect
{
	BOOL	m_bActive;

	SSpellEffect()
	{
		m_bActive = FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	BOOL IsActive()
	{
		return m_bActive;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActive(BOOL bActive)
	{
		m_bActive = bActive;
	}
};

struct _INIT_PLAYERACTER_OBJECT :
	public _INIT_DYNAMIC_OBJECT
{
	ENUM_CHARACTER_LOGIC	m_eLogic;	//角色状态

	_INIT_PLAYERACTER_OBJECT (void)
	{
		m_eLogic = CHARACTER_LOGIC_INVALID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Clear(void)
	{
		m_eLogic = CHARACTER_LOGIC_INVALID;
		_INIT_DYNAMIC_OBJECT::Clear();
	}
};

//行走逻辑参数
struct _LOGICPARAM_MOVE
{
	BOOL		m_bIgnoreSender;//是否忽略发起者		
	ObjID_t		m_nSenderID;	//发起者
	uint16		m_wNumNode;		//结点数

	//位置
	GLPos	m_aTargetPos[MAX_CHAR_PATH_NODE_NUMBER];
	GLPos	m_aNodeStartPos;

	//较正时的逻辑计数
	int32		m_nLogicIndex[MAX_CHAR_PATH_NODE_NUMBER];

	uint32		m_nLastReceiveTime;

	_LOGICPARAM_MOVE (void)
	{
		Reset();
	}

	void Reset(void)
	{
		m_wNumNode = 0;
		m_bIgnoreSender = FALSE;
		m_nSenderID = INVALID_ID;
		m_nLastReceiveTime = 0;
	}

	void SetReceiveTime(uint32 uTime)
	{
		m_nLastReceiveTime = uTime;
	}

	uint32 GetReceiveTime()
	{
		return m_nLastReceiveTime;
	}

	BOOL IsIgnoreSender()
	{
		return m_bIgnoreSender;
	}

	void SetIgnoreSender(BOOL bIngonre)
	{
		m_bIgnoreSender = bIngonre;
	}

	BOOL IsEmpty(void) const
	{
		return(0 == m_wNumNode) ? (TRUE) : (FALSE);
	}

	void AddTargetPos(const GLPos *pTargetPos, int32 nLogicCount)
	{
		if(m_wNumNode < MAX_CHAR_PATH_NODE_NUMBER)
		{
			m_aTargetPos[m_wNumNode] = *pTargetPos;
			m_nLogicIndex[m_wNumNode] = nLogicCount;
			++m_wNumNode;
		}
	}

	BOOL ModifyTargetPos(const GLPos *pTargetPos, int32 nLogicCount)
	{
		if(0 > m_wNumNode || m_wNumNode >= MAX_CHAR_PATH_NODE_NUMBER) return FALSE;

		for(int32 i = 0; i < m_wNumNode; ++i)
		{
			if(nLogicCount == m_nLogicIndex[i])
			{
				m_aTargetPos[i] = *pTargetPos;
				m_wNumNode = i + 1;

				return TRUE;
			}
		}

		return FALSE;
	}

	const GLPos *GetCurTargetPos(void) const
	{
		return &m_aTargetPos[0];
	}

	const GLPos* GetNodeStartPos() const
	{
		return &m_aNodeStartPos;
	}

	void SetNodeStartPos(const GLPos* pPos)
	{
		if (pPos)
		{
			m_aNodeStartPos = *pPos;
		}		
	}

	int32 GetCurLogicCount()
	{
		return m_nLogicIndex[0];
	}

	int32 GetNodeNum()
	{
		return m_wNumNode;
	}

	const GLPos *GetFinalTarPos(void) const
	{
		if(0 < m_wNumNode && m_wNumNode <= MAX_CHAR_PATH_NODE_NUMBER)
		{
			return &m_aTargetPos[m_wNumNode - 1];
		}

		return &m_aTargetPos[0];
	}

	BOOL NextTargetPos(void)
	{
		--m_wNumNode;

		if(0 >= m_wNumNode) return FALSE;
		if(m_wNumNode > MAX_CHAR_PATH_NODE_NUMBER) m_wNumNode = MAX_CHAR_PATH_NODE_NUMBER;

		for(uint16 i = 0; i < m_wNumNode; ++i)
		{
			if(i + 1 >= MAX_CHAR_PATH_NODE_NUMBER) break;

			m_aTargetPos[i] = m_aTargetPos[i + 1];
			m_nLogicIndex[i] = m_nLogicIndex[i + 1];
		}

		return TRUE;
	}
};
enum eREFESH_PROPERTY_TYPE
{
	REFESH_ATTR_TYPE_INVALID		= -1,
	REFESH_ATTR_TYPE_NONE,
	REFESH_ATTR_TYPE_PUBLIC,
	REFESH_ATTR_TYPE_PUBLIC_AND_LEVEL,
	REFESH_ATTR_TYPE_PROTECTED,
	REFESH_ATTR_TYPE_NUMBERS
};

#define CHECK_ATTR_VALUE(a) \
	if((a) < 0) \
	{ \
		(a) = 0; \
	}

struct _TEAM_MEMBER;
class BHVState;
class GameMap;
class Player;
class Behavior_Character;
class CharacterVisitor;
class CharMoveState;
class CharSkillState;
class CharacterStateManager;

class Character :
	public Creature
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	friend class	BHVState;
	friend class	CharMoveState;
	friend class	CharSkillState;

	friend class	ActionDelegator;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	//角色类型
	enum CharacterClass
	{
		CHARACTER_CLASS_INVALID		= -1,
		CHARACTER_CLASS_HUMAN,
		CHARACTER_CLASS_PET,
		CHARACTER_CLASS_MONSTER,
	};
	enum { RECOVER_INTERVAL = 5000, };

	typedef struct DELAY_TIME_EFFECT
	{
		uchar		m_Count;
		_OWN_EFFECT	m_aEffects[MAX_DELAY_TIME_EFFECT_NUM];

		DELAY_TIME_EFFECT()
		{
			Clear();
		};

		/*
		 =======================================================================================================
		 =======================================================================================================
		 */
		void Clear()
		{
			memset(this, 0, sizeof(DELAY_TIME_EFFECT));
		}

		/*
		 =======================================================================================================
		 =======================================================================================================
		 */
		void ReplaseArrayItem(int32 iIndex)
		{
			if(iIndex < 0 || iIndex >= m_Count) return;

			if(iIndex < m_Count - 1)
				memmove
				(
					&m_aEffects[iIndex],
					&m_aEffects[iIndex + 1],
					sizeof(_OWN_EFFECT) * (m_Count - iIndex - 1)
				);

			--m_Count;
		}
	}
	_DELAY_TIME_EFFECT_LIST;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	Character();
	~		Character();

	virtual void	Accept(CharacterVisitor *pVisitor);

	virtual void	OnRegisterToGrid(void);

	virtual void	Clear(void);
	virtual BOOL	Init(const _INIT_OBJECT *pInit);
	virtual void	OnEnterMap(void);

	virtual void	OnEnterMapSuccess(void);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual ObjectClass GetObjType(void) const
	{
		return OBJECT_CLASS_INVALID;
	}

	virtual bool	HeartBeat(uint32 uTime = 0);
	virtual BOOL	HeartBeat_OutMap(uint32 uTime = 0);
	virtual void	InitAIObj();

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void CheckArea()
	{
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void OnEvent_KillObject(ObjID_t idObj)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void OnEvent_ItemChanged(uint32 uItemDataID, int32 nChangeType = 0)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void OnEvent_EnterArea(uint32 uAreaID)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual void UpdataEquipDamagePoint(int32 nType)
	{
	} 

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL Effect_RefixPetInitPara(UNIT_EFFECT &rEffect, int32 iType)
	{
		return FALSE;
	};



/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void RefixByInherence(int32 &nDamage, Character *const pAttacker, BOOL bDOT, BOOL bPKRateCtr)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Effect_ActiveScript(UNIT_EFFECT &rEffect)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Effect_FadeOutScript(UNIT_EFFECT &rEffect)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void SaveEffectToDB(UNIT_EFFECT &rEffect, int32 iIndex)
	{
	} 



/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:

	uint32		m_nSNSeedOfEffects;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Effect_SetSNSeed(int32 const nValue)
	{
		m_nSNSeedOfEffects = nValue;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Effect_AddSNSeed(void)
	{
		++m_nSNSeedOfEffects;
	};
	virtual _EFFECT_LIST	&Effect_GetEffectList(void) = 0;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 Effect_GetSNSeed(void) const
	{
		return m_nSNSeedOfEffects;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	_DELAY_TIME_EFFECT_LIST m_DelayTimeEffectList;
	_SkillMissMSGDelayTime	m_DelayTimeSkillMissList[MAX_DELAY_TIME_SKILL_MISS_NUM];

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	Object	*GetMyShadowGuard(void);
	Object	*GetMyPet(int32 iIndex);
	Object	*GetMyMaster(void);
	

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual Time_t GetCooldownRemained(CooldownID_t const nID) const
	{
		return 0;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void SetCooldown(CooldownID_t const nID, Time_t nCooldown)
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL IsCooldowned(CooldownID_t const nID) const
	{
		return FALSE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL HeartBeat_Cooldown(uint32 uTime = 0)
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL HeartBeat_Recover(uint32 uTime = 0)
	{
		return TRUE;
	};
	BOOL	HeartBeat_Action(uint32 uTime = 0);
	BOOL	HeartBeat_AutoRepeatCooldown(uint32 uTime = 0);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ObjID_t GetLockedTarget(void) const
	{
		return m_nLockedTargetID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetLockedTarget(ObjID_t const nID)
	{
		m_nLockedTargetID = nID;
	};
	

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	Time_t GetActionTime(void) const
	{
		return m_nActionTime;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActionTime(Time_t nTime)
	{
		m_nActionTime = nTime;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetAutoRepeatCooldown(void) const
	{
		return m_nAutoRepeatCooldown;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetAutoRepeatCooldown(Time_t nCooldown)
	{
		m_nAutoRepeatCooldown = nCooldown;
	};
	BOOL	DepletingUsedItem(void);



	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetSubSkillID(int32 iIndex, int32 iSkill)
	{
		m_aSubSkill[iIndex] = iSkill;
	}



	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual void ClearRageRecoverTick()
	{
		m_nElapsedRageRevocerTick = 0;
	}

	

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	Time_t	m_nElapsedRevocerTick;
	Time_t	m_nElapsedRageRevocerTick;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:


	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual void SendCharBaseDirectForHP()
	{
	}
	

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	ObjID_t					m_nLockedTargetID;
	Time_t					m_nActionTime;
	Time_t					m_nAutoRepeatCooldown;
	int32					m_aSubSkill[SpellTemplateData::MAX_SUB_SKILL];

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL HaveSpell(SpellID_t const nID) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL ModifySpell(SpellID_t const nID, int32 const nModifyFlag)
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Spell_OnEquipItem(void)
	{
	};

	

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Character *GetGuard(void) const
	{
		return m_pGuard;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetGuard(Character *pGuard)
	{
		m_pGuard = pGuard;
	}

	
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	Character	*m_pGuard;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ActionParams_T &GetActionParams(void)
	{
		return m_ActionParams;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ActionLogic const *GetActionLogic(void)
	{
		return m_pActionLogic;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActionLogic(ActionLogic const *pLogic)
	{
		m_pActionLogic = pLogic;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	ActionParams_T		m_ActionParams;
	ActionLogic const	*m_pActionLogic;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetCharacterID(ObjID_t id)
	{
		m_CharacterID = id;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ObjID_t GetCharacterID()
	{
		return m_CharacterID;
	}



/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	const GLPos *GetCurrentTargetPos(void) const
	{
		return m_paramLogic_Move.GetCurTargetPos();
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	const GLPos *GetFinalTarPos(void) const
	{
		return m_paramLogic_Move.GetFinalTarPos();
	}

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	const _LOGICPARAM_MOVE *GetLogicMoveParam(void) const
	{
		return &m_paramLogic_Move;
	}

	void	DoAction(int32 nActionID, ObjID_t nTargetObjID = INVALID_ID) {}

protected:
	virtual void	OnCharacterLogicStopped(BOOL bAbortive);


/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void RequestNextNodePath()
	{
	} 



/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT BHV_UseAbility(void)
	{
		return OR_OK;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void SyncTeamMemberInfoToWorld()
	{
	}
	virtual void SyncTeamMemberInfoToClient()
	{
	}
	virtual void	SendMsg_RefeshAttrib(void);
	virtual void	RequestBaseProperty(Player *pTargetHuman, BASEPROPERTY_REFESH_MODE nMode = REFESH_ALL);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	UpdateViewCharacter(void);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetPrevLevel(void) const
	{
		return m_nView_PrevLevel;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPrevStealthLevel(void) const
	{
		return m_nView_PrevStealthLevel;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPrevDetectLevel(void) const
	{
		return m_nView_PrevDetectLevel;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	int32		m_nView_PrevLevel;
	int32		m_nView_PrevStealthLevel;
	int32		m_nView_PrevDetectLevel;
	CTinyTimer	m_UpdateViewCharacterTimer;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	struct _RELIVE_INFO
	{
		BOOL	m_bHPUsePercent;
		union
		{
			int32	m_nHP;
			int32	m_nHPPercent;
		};

		BOOL	m_bMPUsePercent;
		union
		{
			int32	m_nMP;
			int32	m_nMPPercent;
		};

		BOOL	m_bSPUsePercent;
		union
		{
			int32	m_nSP;
			int32	m_nSPPercent;
		};

		MapID_t		m_MapID;
		GLPos	m_Pos;

		_RELIVE_INFO (void)
		{
			m_bHPUsePercent = FALSE;
			m_nHP = 0;
			m_bMPUsePercent = FALSE;
			m_nMP = 0;
			m_bSPUsePercent = FALSE;
			m_nSP = 0;
			m_MapID = INVALID_ID;
			m_Pos = GLPos(-1.f, -1.f);
		}

		/*
		 =======================================================================================================
		 =======================================================================================================
		 */
		void Reset(void)
		{
			m_bHPUsePercent = FALSE;
			m_nHP = 0;
			m_bMPUsePercent = FALSE;
			m_nMP = 0;
			m_bSPUsePercent = FALSE;
			m_nSP = 0;
			m_MapID = INVALID_ID;
			m_Pos = GLPos(-1.f, -1.f);
		}
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	BOOL				IsCanRelive(void) const;

	virtual const _RELIVE_INFO	*GetReliveInfo(BOOL bSkillRelive) const;

	virtual void			SetReliveInfo(BOOL bSkillRelive, const _RELIVE_INFO *pReliveInfo);

	void				ResetReliveInfo(void);

	virtual BOOL			GetNearCanDropPos(GLPos &dropPos);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL		m_bCanSkillRelive;
	_RELIVE_INFO	m_SkillReliveInfo;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void		SetName(const char *pszName) = 0;
	virtual const char	*GetName(void) const = 0;

	virtual void		SetTitle(const char *pszTitle) = 0;
	virtual const char	*GetTitle(void) const = 0;

	virtual void		SetHP(int32 nHP) = 0;
	virtual int32		GetHP(void) = 0;

	virtual void		SetMP(int32 nMP) = 0;
	virtual int32		GetMP(void) = 0;

	virtual void		SetLevel(int32 nLevel) = 0;
	virtual int32		GetLevel(void) const = 0;


	virtual int32_t GetHPNoClip(void)
	{
		return GetHP();
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual uint32 GetExp(void)
	{
		return 0;
	}


	virtual int32 Get_Property_StrikePoint(void)
	{
		return 0;
	}

	virtual void Set_Property_StrikePoint(int32 nStrikePoint)
	{
	}


	virtual int32 Get_Property_Vigor(void)
	{
		return 0;
	}


	virtual void Set_Property_Vigor(int32 nVigor)
	{
	}


	virtual void Set_Property_MaxVigor(int32 nMaxVigor)
	{
	}


	virtual int32 Get_Property_Energy(void)
	{
		return 0;
	}

	virtual void Set_Property_Energy(int32 nVigor)
	{
	}


	virtual int32 Get_Property_MaxEnergy(void)
	{
		return 1;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Set_Property_MaxEnergy(int32 nMaxVigor)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 Get_Property_EnergyRegeneRate(void)
	{
		return 0;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Set_Property_EnergyRegeneRate(int32 nRate)
	{
	} 
	virtual int32 Get_Property_Rage(void) = 0;
	virtual void	Set_Property_Rage(int32 nRage) = 0;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual int32 GetMoodState(void) const
	{
		return m_nMoodState;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void SetMoodState(int32 nState)
	{
		m_nMoodState = nState;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual uint32 GetDataID(void) const
	{
		return UINT_MAX;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual float GetDropSearchRange() const
	{
		return 20.0f;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetDropTeamCount() const
	{
		return 1;
	}



/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:



/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	int32	m_nMoodState;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL IsCarrayItem(uint32 ItemType, uint32 ItemCount)
	{
		return TRUE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual _ITEM_ALLVALUE ItemValue(uchar AttrType)
	{
		/*~~~~~~~~~~~~~~*/
		_ITEM_ALLVALUE	a;
		/*~~~~~~~~~~~~~~*/

		a.Clear();
		return a;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	SetMoveMode(ENUM_MOVE_MODE eMoveMode);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ENUM_MOVE_MODE GetMoveMode(void) const
	{
		return m_eMoveMode;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	ENUM_MOVE_MODE	m_eMoveMode;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	CTinyTimer	m_AttrMsgTimer;
	uchar		m_AttrMsgToTeamIntervalCount;
	uchar		m_PublicAttrVersion;
	uchar		m_ProtectedAttrVersion;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	ObjID_t			m_CharacterID;
	CTinyTimer		m_RecoverTimer;
	_LOGICPARAM_MOVE	m_paramLogic_Move;
	Behavior_Character* m_pAI_Character = nullptr;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual ObjID_t GetOwnerID(void) const
	{
		return INVALID_ID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual Character *GetOwner(void)
	{
		return NULL;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	SCampData	m_CampDataRefix;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual int32	Get_Property_MaxStrikePoint(void){ return 0; }

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetBaseMaxStrikePoint(void)
	{
		return BASE_MAX_STRIKE_POINT;
	};

	virtual int32			Get_Property_MaxRage(void){ return 0; }
	virtual int32			GetBaseMaxRage(void){ return 0; }
	virtual void			SetBaseMaxRage(int32 const nRage){}

	virtual int32			GetRageRegenerate(void){ return 0; }
	virtual int32			GetBaseRageRegenerate(void){ return 0; }
	virtual void			SetBaseRageRegenerate(int32 const nValue){}

	virtual int32			Get_Property_Str(void){ return 0; }
	virtual int32			Get_BaseProperty_Str(void){ return 0; }
	virtual void			Set_BaseProperty_Str(int32 const nValue){}

	virtual int32			Get_Property_Con(void){ return 0; }
	virtual int32			Get_BaseProperty_Con(void){ return 0; }
	virtual void			Set_BaseProperty_Con(int32 const nValue){}

	virtual int32			Get_Property_Int(void){ return 0; }
	virtual int32			Get_BaseProperty_Int(void){ return 0; }
	virtual void			Set_BaseProperty_Int(int32 const nValue){}

	virtual int32			Get_Property_Dex(void){ return 0; }
	virtual int32			Get_BaseProperty_Dex(void){ return 0; }
	virtual void			Set_BaseProperty_Dex(int32 const nValue){}

	virtual int32			GetMaxHP(void){ return 100; }
	virtual int32			Get_BaseProperty_MaxHP(void){ return 0; }
	virtual void			Set_BaseProperty_MaxHP(int32 const nHp){}

	virtual int32			Get_Property_HPRegenerate(void){ return 0; }
	virtual int32			Get_BaseProperty_HPRegenerate(void){ return 0; }
	virtual void			Set_BaseProperty_HPRegenerate(int32 const nValue){}

	virtual int32			GetMaxMP(void){ return 0; }
	virtual int32			Get_BaseProperty_MaxMP(void){ return 0; }
	virtual void			Set_BaseProperty_MaxMp(int32 const nMp){};

	virtual int32			Get_Property_MPRegenerate(void){ return 0; }
	virtual int32			Get_BaseProperty_MPRegenerate(void){ return 0; }
	virtual void			Set_BaseProperty_MPRegenerate(int32 const nValue){}

	virtual const SCampData* GetCampData(void);
	virtual const SCampData	*GetBaseCampData(void) const = 0;
	virtual void			SetBaseCampData(const SCampData *pCampData) = 0;
	virtual int32			GetCampID(void) = 0;
	virtual int32			GetBaseCampID(void) const = 0;
	virtual void			SetBaseCampID(int32 const nID) = 0;

	virtual int32 GetPKMode(void) const{ return 0; }
	virtual void SetPKMode(int32 const nID){} 

	virtual int32	GetModelID(void) = 0;
	virtual int32	Get_BaseProperty_ModelID(void) const = 0;
	virtual void	Set_BaseProperty_ModelID(int32 const nID) = 0;



	virtual int32 GetBaseMountID(void) const{ return INVALID_ID; }

	int32	GetExpRefix(void);
	int32	GetBaseExpRefix(void) const 
	{ 
		return 100; 
	}
	virtual int32	GetStealthLevel(void);

	virtual int32	GetDetectLevel(void);
	

	virtual float	Get_Property_MoveSpeed(void) = 0;
	virtual int32	Get_BaseProperty_MoveSpeed(void) = 0;
	virtual void	Set_BaseProperty_MoveSpeed(int32 const nValue) = 0;

	virtual int32	Get_Property_AttackSpeed(void) = 0;
	virtual int32	Get_BaseProperty_AttackSpeed(void) = 0;
	virtual void	Set_BaseProperty_AttackSpeed(int32 const nValue) = 0;

	virtual int32	Get_Property_Miss(void) = 0;
	virtual int32	Get_BaseProperty_Miss(void) = 0;
	virtual void	Set_BaseProperty_Miss(int32 const nValue) = 0;

	virtual int32	Get_Property_Hit(void) = 0;
	virtual int32	Get_BaseProperty_Hit(void) = 0;
	virtual void	Set_BaseProperty_Hit(int32 const nValue) = 0;

	virtual int32	Get_Property_Critical(void) = 0;
	virtual int32	Get_BaseProperty_Critical(void) = 0;
	virtual void	Set_BaseProperty_Critical(int32 const nValue) = 0;

	virtual int32	GetDefenceNear(void) = 0;
	virtual int32	GetBaseDefenceNear(void) = 0;
	virtual void	SetBaseDefenceNear(int32 const nValue) = 0;

	virtual int32	GetDefenceFar(void) = 0;
	virtual int32	GetBaseDefenceFar(void) = 0;
	virtual void	SetBaseDefenceFar(int32 const nValue) = 0;

	virtual int32	GetAttackNear(void) = 0;
	virtual int32	GetBaseAttackNear(void) = 0;
	virtual void	SetBaseAttackNear(int32 const nValue) = 0;

	virtual int32	GetAttackFar(void) = 0;
	virtual int32	GetBaseAttackFar(void) = 0;
	virtual void	SetBaseAttackFar(int32 const nValue) = 0;

	virtual int32	GetToughness(void) = 0;
	virtual int32	GetBaseToughness(void) = 0;
	virtual void	SetBaseToughness(int32 const nValue) = 0;

	virtual int32	GetNearAttReduce(void) = 0;
	virtual int32	GetBaseNearAttReduce(void) = 0;
	virtual void	SetBaseNearAttReduce(int32 const nValue) = 0;

	virtual int32	GetFarAttReduce(void) = 0;
	virtual int32	GetBaseFarAttReduce(void) = 0;
	virtual void	SetBaseFarAttReduce(int32 const nValue) = 0;

	virtual int32	GetMagicAttReduce(void) = 0;
	virtual int32	GetBaseMagicAttReduce(void) = 0;
	virtual void	SetBaseMagicAttReduce(int32 const nValue) = 0;

	virtual int32	GetDreadAttResist(void) = 0;
	virtual int32	GetBaseDreadAttResist(void) = 0;
	virtual void	SetBaseDreadAttResist(int32 const nValue) = 0;

	virtual int32	GetComaAttResist(void) = 0;
	virtual int32	GetBaseComaAttResist(void) = 0;
	virtual void	SetBaseComaAttResist(int32 const nValue) = 0;

	virtual int32	GetHushAttResist(void) = 0;
	virtual int32	GetBaseHushAttResist(void) = 0;
	virtual void	SetBaseHushAttResist(int32 const nValue) = 0;

	virtual int32	GetUnArmyAttResist(void) = 0;
	virtual int32	GetBaseUnArmyAttResist(void) = 0;
	virtual void	SetBaseUnArmyAttResist(int32 const nValue) = 0;

	virtual int32	GetAttSpeedAttResist(void) = 0;
	virtual int32	GetBaseAttSpeedAttResist(void) = 0;
	virtual void	SetBaseAttSpeedAttResist(int32 const nValue) = 0;

	virtual int32	GetSkillSpeedAttResist(void) = 0;
	virtual int32	GetBaseSkillSpeedAttResist(void) = 0;
	virtual void	SetBaseSkillSpeedAttResist(int32 const nValue) = 0;

	virtual int32	GetMoveSpeedAttResist(void) = 0;
	virtual int32	GetBaseMoveSpeedAttResist(void) = 0;
	virtual void	SetBaseMoveSpeedAttResist(int32 const nValue) = 0;

	virtual int32	Get_Property_AttackMagic(void) = 0;
	virtual int32	Get_BaseProperty_AttackMagic(void) = 0;
	virtual void	Set_BaseProperty_AttackMagic(int32 const nValue) = 0;

	virtual int32	Get_Property_DefenceMagic(void) = 0;
	virtual int32	Get_BaseProperty_DefenceMagic(void) = 0;
	virtual void	Set_BaseProperty_DefenceMagic(int32 const nValue) = 0;

	virtual int32	Get_Property_AttackCold(void) = 0;
	virtual int32	Get_BaseProperty_AttackCold(void) = 0;
	virtual void	Set_BaseProperty_AttackCold(int32 const nValue) = 0;

	virtual int32	Get_Property_DefenceCold(void) = 0;
	virtual int32	Get_BaseProperty_DefenceCold(void) = 0;
	virtual void	Set_BaseProperty_DefenceCold(int32 const nValue) = 0;

	virtual int32	Get_Property_AttackFire(void) = 0;
	virtual int32	Get_BaseProperty_AttackFire(void) = 0;
	virtual void	Set_BaseProperty_AttackFire(int32 const nValue) = 0;

	virtual int32	Get_Property_DefenceFire(void) = 0;
	virtual int32	Get_BaseProperty_DefenceFire(void) = 0;
	virtual void	Set_BaseProperty_DefenceFire(int32 const nValue) = 0;

	virtual int32	Get_Property_AttackLight(void) = 0;
	virtual int32	Get_BaseProperty_AttackLight(void) = 0;
	virtual void	Set_BaseProperty_AttackLight(int32 const nValue) = 0;

	virtual int32	Get_Property_DefenceLight(void) = 0;
	virtual int32	Get_BaseProperty_DefenceLight(void) = 0;
	virtual void	Set_BaseProperty_DefenceLight(int32 const nValue) = 0;

	virtual int32	Get_Property_AttackPoison(void) = 0;
	virtual int32	Get_BaseProperty_AttackPoison(void){ return 0; }
	virtual void	Set_BaseProperty_AttackPoison(int32 const nValue){}

	virtual int32	Get_Property_DefencePoison(void) = 0;
	virtual int32	Get_BaseProperty_DefencePoison(void) = 0;
	virtual void	Set_BaseProperty_DefencePoison(int32 const nValue) = 0;

	virtual int32	Get_Property_ReduceSlowerDuration(void) = 0;

	virtual int32	Get_Property_ReduceWeakenDuration(void) = 0;

	virtual int32	Get_Property_ReduceFaintDuration(void) = 0;

	virtual int32	Get_Property_ReducePoisonedDuration(void) = 0;

	virtual int32	GetVisionRange(void) = 0;
	virtual int32	GetBaseVisionRange(void){ return BASE_VISION_RANGE; }

	virtual int32	GetProfessionReduce(int32 nTarProfession) { return 0; }
	virtual int32	GetProfessionIncrease (int32 nTarProfession) { return 0;}


/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:


	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	



public:

	void SetImmuneAbsForLater(BOOL bImmuneAbs)
	{
		m_bImmuneAbsForLater = bImmuneAbs;
	};


	BOOL IsImmuneAbsForLater(void) const
	{
		return m_bImmuneAbsForLater ? TRUE : FALSE;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CharacterVisitor *GetVisitor(void)
	{
		return m_pVisitor;
	}


public:
	int32		GetHorseDataIndex(int32 iIndex);
	void		SetHorseDataIndex(int32 iIndex, int32 iVal);
	virtual void	CleanupHorseBuff();

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	CharacterVisitor	*m_pVisitor;

	int32			m_aHorseDataIndex[MAX_HORSE_DATA_INDEX];
	CharaterStatePara	m_oStatePara;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL	m_bImmuneAbsForLater;

	// 怪物基本属性
	uint64		m_uBaseAttribCrc;
	uint64		m_uBaseAttribSum;



	SpellInfo m_SkillInfo;


	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	virtual int32 GetInherenceBalanceLevel(int32 eType) {return 0;};
	virtual void SetInherenceBalanceLevel(int32 eType, int32 nLevel){};


public:
	ENUM_CHARACTER_LOGIC	GetCharacterLogic(void);
	BOOL			IsCharacterLogicStopped(void);
	void			StopCharacterLogic(BOOL bAbortive = TRUE);
	void	SendArriveMSG();
	void	SendstopActionMSG();
	bool		IsAlive(void);
	bool		IsAliveInDeed(void);
	bool        IsMoving();
	bool        IsUnbreakable();
	bool        IsLimitMove();
	void	FaceTo(const GLPos* pPos);
	void	FaceTo(const Object* pObj);
	bool        IsDie();
	BOOL		CanMove(void);
	BOOL	CanUseSkillNow(SpellID_t nID = INVALID_ID);
	BOOL		IsSpellCooldowned(SpellID_t nID);
	BOOL		CanUseThisSpellInThisStatus(SpellID_t nSkillID);
	BOOL		RefixSpell(SpellInfo& rSkillInfo);

	BOOL		FillCampData(Character* pObj, _HUMAN_CAMP_DATA* pData);
	BOOL	IsEnemyCamp(Character& rTar);
	BOOL	IsFriendCamp(Character& rTar);

	virtual BOOL IsEnemy(Character* pCharacter);

	virtual BOOL IsFriend(Character* pCharacter);
	virtual BOOL IsPartner(Character* pCharacter);
	/**************************************************************************
	BEGIN 通用的标记操作
	**************************************************************************/
	virtual int32	GetIntAttr_EX(CharIntProperty::Index_T nIndex);
	BOOL			GetIntAttrDirtyFlag_EX(CharIntProperty::Index_T nIndex);
	void			ClearIntAttrDirtyFlag_EX(CharIntProperty::Index_T nIndex);
	void			MarkIntAttrDirtyFlag_EX(CharIntProperty::Index_T nIndex);

	virtual int32	GetBaseIntAttr_EX(CharIntProperty::Index_T nIndex);
	virtual void	SetBaseIntAttr_EX(CharIntProperty::Index_T nIndex, int32 const nValue);

	int32			GetIntAttrRefix_EX(CharIntAttrRefixs::Index_T nIndex);
	void			SetIntAttrRefix_EX(CharIntAttrRefixs::Index_T nIndex, int32 const nValue);
	BOOL			GetIntAttrRefixDirtyFlag_EX(CharIntAttrRefixs::Index_T nIndex);
	void			ClearIntAttrRefixDirtyFlag_EX(CharIntAttrRefixs::Index_T nIndex);
	void			MarkIntAttrRefixDirtyFlag_EX(CharIntAttrRefixs::Index_T nIndex);

	CharIntAttrRefixs::Index_T	GetIntAttrRefixIndexByIntAttrIndex(CharIntProperty::Index_T nIndex);
	ITEM_PROPERTY				GetItemIntAttrRefixIndexByIntAttrIndex(CharIntProperty::Index_T nIndex);

	void			ClearBoolAttrFlag_EX(CharBoolAttrs::Index_T nIndex);
	void			MarkBoolAttrFlag_EX(CharBoolAttrs::Index_T nIndex);
	BOOL			GetBoolAttrDirtyFlag_EX(CharBoolAttrs::Index_T nIndex);
	void			ClearBoolAttrDirtyFlag_EX(CharBoolAttrs::Index_T nIndex);
	void			MarkBoolAttrDirtyFlag_EX(CharBoolAttrs::Index_T nIndex);
	/**************************************************************************
	END 通用的标记操作
	**************************************************************************/
	void		MarkLevelOneAttrDirtyFlag(void);
	void		MarkLevelOneAttrDirtyFlagAndSendAttrMsg(void);

	int32		GetExpMultRefixDirtyFlag(void);
	void		ClearExpMultRefixDirtyFlag(void);
	void		MarkExpMultRefixDirtyFlag(void);

	void		SetBaseAttribCrcCode(uint64);
	uint64		GetBaseAttribCrcCode(void);
	void		SetBaseAttribSumCode(uint64);
	uint64		GetBaseAttribSumCode(void);

	void		SetGuildInfoCrcCode(uint64);
	uint64		GetGuildInfoCrcCode(void);
	void		SetGuildInfoSumCode(uint64);
	uint64		GetGuildInfoSumCode(void);


	/////////////////////////////////////////////////
	void	DirectMoveTo(const GLPos* pTar);
	void	DirectTo(GLPos* pTar, BOOL bMove = TRUE);
	Behavior_Character* GetAIObj(void) const;

	SpellInfo& GetSpellInfo(void);
	SpellTargetingAndDepletingParams	m_TargetingAndDepletingParams;
	SpellTargetingAndDepletingParams& GetTargetingAndDepletingParams(void);




	OPT_RESULT BHV_Idle(void);
	OPT_RESULT BHV_Jump(void);
	OPT_RESULT BHV_Move
	(
		int32		nHandleID,
		uint16		wNumTargetPos,
		const GLPos* paTargetPos,
		int32		nStopLogicCount = INVALID_ID,
		const GLPos* paCurPos = NULL,
		ObjID_t		nSenderID = INVALID_ID
	);
	OPT_RESULT	BHV_Stop(void);
	void	MoveTo(int32 nHandleID, GLPos* pTar);
	void	MoveTo(int32 nHandleID, GLPos* pCur, GLPos* pTar);

	OPT_RESULT BHV_UseSkill
	(
		SpellID_t	idSkill,
		ObjID_t		idTarget,
		const GLPos* pTargetPos,
		int32		iHurtDelayTime,
		float		fDir,
		GUID_t		guidTarget
	);

	OPT_RESULT BHV_StopSkill();
	OPT_RESULT BHV_StopMove();

	virtual int32_t	GetMountID(void);
	virtual void	SetMountID(int32_t iMountID);
	void	OnEvent_ActionStarted(void);

	BOOL		CanActionFlag1(void);

	BOOL		CanActionFlag2(void);

	BOOL		CanActionFlag3(void);
protected:
	int32_t GetIntAttr(CharIntProperty::Index_T const nIdx) const
	{
		return m_IntAttrs.GetAttr(nIdx);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetIntAttr(CharIntProperty::Index_T const nIdx, int32_t const nValue)
	{
		m_IntAttrs.SetAttr(nIdx, nValue);
	}
	void	ResetIntAttrs(void);

	int32 Get_Property_IntAttrRefix(CharIntAttrRefixs::Index_T const nIdx) const
	{
		return m_IntAttrRefixs.GetAttr(nIdx);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetIntAttrRefix(CharIntAttrRefixs::Index_T const nIdx, int32 const nValue)
	{
		m_IntAttrRefixs.SetAttr(nIdx, nValue);
	};
	void	ResetIntAttrRefixs(void);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	BOOL GetBoolAttr(CharBoolAttrs::Index_T const nIdx) const
	{
		return m_BoolAttrs.GetAttr(nIdx);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetBoolAttr(CharBoolAttrs::Index_T const nIdx, BOOL const bFlag)
	{
		m_BoolAttrs.SetAttr(nIdx, bFlag);
	}

	void	ResetBoolAttr(void);

	void ClearBoolAttrDirtyFlag(CharBoolAttrs::Index_T const nIdx)
	{
		m_BoolAttrDirtyFlags.ClearFlagByIndex(nIdx);
	};

	void MarkAllIntAttrDirtyFlags(void)
	{
		m_IntAttrDirtyFlags.MarkAllFlags();
	}

	void MarkAllBoolAttrDirtyFlags(void)
	{
		m_BoolAttrDirtyFlags.MarkAllFlags();
	};

	void MarkAllIntAttrRefixDirtyFlags(void)
	{
		m_IntAttrRefixDirtyFlags.MarkAllFlags();
	};

protected:
	CharIntProperty						m_IntAttrs;

	CharIntAttrRefixs					m_IntAttrRefixs;
	typedef BitFlags<CharIntProperty::PROPERTY_MAX_INDEX>		CharIntAttrDirtyFlags_T;
	CharIntAttrDirtyFlags_T					m_IntAttrDirtyFlags;

	CharBoolAttrs						m_BoolAttrs;

	typedef BitFlags<CharBoolAttrs::PROPERTY_MAX_INDEX>		CharBoolAttrDirtyFlags_T;
	CharBoolAttrDirtyFlags_T				m_BoolAttrDirtyFlags;

	typedef BitFlags<CharIntAttrRefixs::REFIX_PROPERTY_MAX_INDEX>	CharIntAttrRefixDirtyFlags_T;
	CharIntAttrRefixDirtyFlags_T				m_IntAttrRefixDirtyFlags;

	CharacterStateManager* mStateManager = nullptr;

public:
	void	NormalizeWorldPos(GLPos& sPos) const;
	float	WordPosLength(float fX, float fY) const;
	void	RefixSkill(SpellInfo& rSkill);
	void	ManaIncrement(int32_t nIncrement, int32_t iLogicCount = INVALID_ID, Character* pCharacter = NULL);
	void	RageIncrement(int32_t nIncrement, int32_t iLogicCount = INVALID_ID, Character* pCharacter = NULL);
	void	RefixRageRegeneration(int32_t& rRageRegeneration);

	void	Effect_OnEffectFadeOut(UNIT_EFFECT& rImp, BOOL bForceDispel = FALSE);

	void	OnEvent_Damages
	(
		int32_t const* const	pDamage,
		ObjID_t			nAttackerID,
		BOOL			bCritical = FALSE,
		SpellID_t		nSkillID = INVALID_ID,
		int32_t			iLogicCount = INVALID_ID
	);

	void	OnEvent_Damage
	(
		int32_t		nDamage,
		ObjID_t		nAttackerID,
		BOOL		bCritical = FALSE,
		SpellID_t	nSkillID = INVALID_ID,
		int32_t		iLogicCount = INVALID_ID
	);

	void	OnEvent_DamageTarget(int32 nDamage, Character& rTar, SpellID_t nSkillID = INVALID_ID);
	int32	OnEvent_FiltrateEffect(UNIT_EFFECT& rEffect);

	int32_t	HealthIncrement
	(
		int32_t		nIncrement,
		int32_t		iLogicCount = INVALID_ID,
		Character* pCharacter = NULL,
		BOOL		bCritical = FALSE,
		BOOL		bDOT = FALSE,
		BOOL		bBeatFly = FALSE,
		BOOL		bPKRateCtr = FALSE
	);

	void	OnEvent_BeSkill(Character& rAttacker, int32 nBehaviorType);

	void	OnEvent_BeHit(Character& rAttacker);

	void	OnEvent_HitTarget(Character& rTarget);

	void	OnEvent_Hit(Character& rAttacker, int32 nBehaviorType);
	void	OnEvent_CriticalHitTarget(SpellID_t const nSkill, Character& rTarget);
	void	OnEvent_BeCriticalHit(SpellID_t const nSkill, Character& rAttacker);
	void	OnEvent_HealTarget(SpellID_t const nSkill, Character& rTarget, int32 nHealedHP);
	void	OnEvent_BeHeal(SpellID_t const nSkill, Character& rCaster, int32 nHealedHP);
	void	OnEvent_UseSkillSuccessfully(SpellInfo& rSkill);
	void	OnEvent_DepleteStrikePoints(int32 nStrikePoints);


	int32			Effect_DispelEffectInSpecificCollection
	(
		int32	nCollectionID,
		int32	nDispelLevel,
		int32	nNeedDispel = -1
	);
	UNIT_EFFECT* Effect_GetFirstEffectOfSpecificEffectID(int32 nEffectID);
	UNIT_EFFECT* Effect_GetFirstEffectOfSpecificLogicID(int32 nLogicID);
	UNIT_EFFECT* Effect_GetFirstEffectOfSpecificMutexID(int32 nMutexID);
	UNIT_EFFECT* Effect_GetFirstEffectOfSpecificSkillID(int32 nSkillID);
	UNIT_EFFECT* Effect_GetFirstEffectInSpecificCollection(int32 nCollectionID);

	int32_t	Effect_GetEffectVisableType(EffectID_t nEffectID);

	void			Effect_CleanAllEffectWhenPetDead(ObjID_t idPet);

	BOOL			Effect_IsCanReciveBallEffect(UNIT_EFFECT& rImp);

	void	RefixEffect(UNIT_EFFECT& rEffectNeedRedix);

	BOOL	Effect_RegisterEffect(UNIT_EFFECT& rEffect);

	BOOL	Effect_PushToDelayTimeList(UNIT_EFFECT& oEffect);

	void	EffectDelayTimeHeartBeat();

	void	Effect_OnEffectActived(UNIT_EFFECT& rImp);
	BOOL	Effect_RegisterEffectImp(UNIT_EFFECT& rImp);

	BOOL	Effect_ReplaceMutuallyExclusiveEffect(UNIT_EFFECT& rEffect);
	void	Effect_ReplaceLastGoodEffect(UNIT_EFFECT& rEffect);
	BOOL	Effect_AddNewEffect(UNIT_EFFECT& rEffect);

	void	Effect_ReplaceEffect(UNIT_EFFECT& rDest, UNIT_EFFECT& rSrc);

	void Effect_OnDamages(int32* const pDamage, Character* const pAttacker, SpellID_t nSkillID);
	void	Effect_OnDamage(int32& nDamage, Character* const pAttacker, SpellID_t nSkillID = INVALID_ID);
	void	Effect_OnFinalDamage(int32& nDamage, Character* const pAttacker, SpellID_t nSkillID = INVALID_ID);
	void	Effect_RefixSkill(SpellInfo& rSkill);
	BOOL	Effect_GetIntAttrRefix(CharIntAttrRefixs::Index_T nIdx, int32& rIntAttrRefix);
	BOOL	Effect_GetBoolAttrRefix(CharBoolAttrs::Index_T nIdx, BOOL& rBoolAttrRefix);
	void	Effect_OnDie(void);
	void	Effect_SendEffectMsg(UNIT_EFFECT& rImp, Time_t iDelayTime);

	void	Profession_OnDamage(int32 nDamage);

	void	AddDelayTimeSkillMissList(_SkillMissMSGDelayTime& val);

	Object* Spell_CreateObjSpecial(GLPos const& rPosition, int32 nDataID);

	void	RefixInherenceBalance(InherenceBalanceRefixValue& rInherenceBalance);
	virtual int32	GetInherenceBalanceRefixForItem(PLAYER_PROPERTY_LEVEL4_BALANCE index) { return 0; }


	BOOL			Effect_HaveEffectOfSpecificEffectID(int32 const nEffectID);
	BOOL			Effect_HaveEffectOfSpecificLogicID(int32 const nLogicID);
	BOOL			Effect_HaveEffectOfSpecificMutexID(int32 const nMutexID);
	BOOL			Effect_HaveEffectOfSpecificSkillID(int32 const nSkillID);
	BOOL			Effect_HaveEffectInSpecificCollection(int32 const nCollectionID);
	void			Effect_CancelEffectInSpecificCollection(int32 nCollectionID);



	void	SendHealAndDamageMSG
	(
		int32		nIncrement,
		Character* pCharacter,
		BOOL		bCritical,
		int32		iLogicCount,
		BOOL		bBeatFly = FALSE
	);

	void	OnIncementHp(int32 nIncrement, Character* pCharacter);
	void	OnDecementHP(int32 nIncrement, BOOL bDOT, Character* pCharacter);

	virtual void	OnEvent_Die(ObjID_t idKiller);
	virtual void	OnEvent_Relive(ObjID_t idKiller);

	int32_t GetPercentHP();
};
#endif
