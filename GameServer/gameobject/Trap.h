/*$T MapServer/Server/Obj/Trap.h GC 1.140 10/10/07 10:07:35 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __OBJ_SPECIAL_H__
#define __OBJ_SPECIAL_H__

#include "Creature.h"
#include "SpellDataLoader.h"


//ÏÝ¾®Àà
struct _INIT_SPECIAL_OBJECT :
	public _INIT_DYNAMIC_OBJECT
{
	_INIT_SPECIAL_OBJECT (void)
	{
		m_nDataID = INVALID_ID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Clear(void)
	{
		_INIT_DYNAMIC_OBJECT::Clear();
		m_nDataID = INVALID_ID;
	}

	int32	m_nDataID;
	ObjID_t m_nOwnerID;
};

class SpecialCreature :
	public Creature
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { NUM_OF_PARAMS = 8, };
	SpecialCreature(void);
	virtual~SpecialCreature(void);

	virtual void Clear(void);
	virtual BOOL Init(const _INIT_OBJECT *pInit);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual ObjectClass GetObjType(void) const
	{
		return OBJECT_CLASS_SPECIAL;
	}

	virtual bool	HeartBeat(uint32 uTime = 0);
	virtual BOOL	HeartBeat_OutMap(uint32 uTime = 0);
	void		OnEvent_Tick(void);
	void		OnEvent_TimeOver(void);
	virtual BOOL	IsCanViewMe(const Object *pObj);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual NetPacket	*CreateNewObjMsg(void);
	virtual void		DestroyNewObjMsg(IMessage *pPacket);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetContinuance(void) const
	{
		return m_nContinuance;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetContinuance(Time_t nTime)
	{
		m_nContinuance = nTime;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetInterval(void) const
	{
		return m_nInterval;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetInterval(Time_t nInterval)
	{
		m_nInterval = nInterval;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetElapsedInterval(void) const
	{
		return m_nInterval;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetElapsedInterval(Time_t nTime)
	{
		m_nElapsedInterval = nTime;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetDelayTime(void) const
	{
		return m_nDelayTime;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDelayTime(Time_t nTime)
	{
		m_nDelayTime = nTime;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ObjID_t GetOwnerID(void) const
	{
		return m_nOwner;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetOwnerID(ObjID_t nID)
	{
		m_nOwner = nID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPowerRefixByValue(void) const
	{
		return m_nPowerRefixByValue;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetPowerRefixByValue(int32 nValue)
	{
		m_nPowerRefixByValue = nValue;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPowerRefixByRate(void) const
	{
		return m_nPowerRefixByRate;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetPowerRefixByRate(int32 nRate)
	{
		m_nPowerRefixByRate = nRate;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsFadeOut(void) const
	{
		return m_bFadeOut;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void MarkFadeOutFlag(void)
	{
		m_bFadeOut = TRUE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ClearFadeOutFlag(void)
	{
		m_bFadeOut = FALSE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDataID(void) const
	{
		return m_nDataID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDataID(int32 nID)
	{
		m_nDataID = nID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetStealthLevel(void) const
	{
		return m_nStealthLevel;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetStealthLevel(int32 nLevel)
	{
		m_nStealthLevel = nLevel;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ID_t GetClass(void) const
	{
		return m_nClass;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetClass(ID_t nClass)
	{
		m_nClass = nClass;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetActiveTimes(void)
	{
		return m_nActiveTimes;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActiveTimes(int32 nTimes)
	{
		m_nActiveTimes = nTimes;
	}

	SpecialObjData_T const	*GetDataRecord(void) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Trigger(ObjID_List const &rTargetList);
	void	OnEvent_FadeOut(void);
	int32	GetParamByIndex(int32 nIdx) const;
	void	SetParamByIndex(int32 nIdx, int32 nParam);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	InitFromData();

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	Time_t	m_nContinuance;
	Time_t	m_nInterval;
	Time_t	m_nElapsedInterval;
	Time_t	m_nDelayTime;
	ObjID_t m_nOwner;
	int32	m_nPowerRefixByValue;
	int32	m_nPowerRefixByRate;

	int32	m_nDataID;
	int32	m_nStealthLevel;
	ID_t	m_nClass;
	BOOL	m_bActived;
	BOOL	m_bFadeOut;
	int32	m_nActiveTimes;
	int32	m_aParams[NUM_OF_PARAMS];
};
typedef struct SSpecialObjList
{
	enum { LIST_SIZE = 128, };
	SpecialCreature *m_aObj[LIST_SIZE];
	uchar m_Count;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Clear(void)
	{
		memset((void *) m_aObj, NULL, sizeof(m_aObj));
		m_Count = 0;
	}

	SSpecialObjList()
	{
		Clear();
	};
}
SPECIAL_OBJ_LIST;
#endif
