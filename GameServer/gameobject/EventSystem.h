/*********************************************************************************************
created:	10/10/07 10:07:26
filename: 	EventSystem.h
file path:	F:\khan2\src\MapServer\Server\GameLogic
file base:
file ext:	h
author:		
modified:	wujianping
purpose:	并不是真正的事件处理机制 而是事件的集中处理类
**********************************************************************************************/


#ifndef EVENTCORE_H
#define EVENTCORE_H

#include "TypeDefine.h"
#include "Define.h"
#include "Enum.h"
#include "Struct.h"
#include "Util.h"
#include "StructSpell.h"
#include "StructEffect.h"

class	GameMap;

class	Event_T
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	typedef enum
	{
		TYPE_INVALID		= -1,
		TYPE_IMPACT		= 0,
		TYPE_ACTIVE_SPECIAL_OBJ,
		TYPE_BESKILL,
	} ParamType_T;
	enum { NUM_OF_PARAMS = 2, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Event_T() :
	m_nSender(INVALID_ID),
	m_nReceiver(INVALID_ID),
	m_nDelayTime(0),
	m_nType(TYPE_INVALID),
	m_nParam(INVALID_ID)
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~Event_T()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Reset(void)
	{
		m_nSender = INVALID_ID;
		m_nReceiver = INVALID_ID;
		m_nDelayTime = 0;
		m_nType = TYPE_INVALID;
		m_nParam = INVALID_ID;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsUsed(void) const
	{
		return(TYPE_INVALID != m_nType);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsAvailable(void) const
	{
		return(TYPE_INVALID == m_nType);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ObjID_t GetSender(void) const
	{
		return m_nSender;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetSender(ObjID_t nID)
	{
		m_nSender = nID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ObjID_t GetReceiver(void) const
	{
		return m_nReceiver;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetReceiver(ObjID_t nID)
	{
		m_nReceiver = nID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Time_t GetDelayTime(void) const
	{
		return m_nDelayTime;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDelayTime(Time_t nTime)
	{
		m_nDelayTime = nTime;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ParamType_T GetType(void) const
	{
		return m_nType;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetType(ParamType_T nType)
	{
		m_nType = nType;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetParam(void) const
	{
		return m_nParam;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetParam(int32 nIdx, int32 nValue)
	{
		m_nParam = nValue;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	ObjID_t		m_nSender;
	ObjID_t		m_nReceiver;
	Time_t		m_nDelayTime;
	ParamType_T	m_nType;
	int32		m_nParam;
};

class	EventSystem
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	typedef KLVector<Event_T, 4096>	EventVector_T;
	typedef KLVector<UNIT_EFFECT, 2048>	ImpactVector_T;
	enum { EVENT_QUEUE_SIZE = 2048, IMPACT_LIST_SIZE = 1024 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	EventSystem() :
	m_pMap(0),
	m_nCountOfEvents(0),
	m_nCountOfImpacts(0),
	m_nMaxCountOfEvent(0),
	m_nMaxCountOfImpacts(0)
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~EventSystem()
	{
	} 
	
	BOOL	Init(GameMap *pMap);
	void	Clear(void);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Reset(void)
	{
	};
	void	HeartBeat(Time_t nDeltaTime);

	//添加buff到目标
	BOOL	RegisterImpactEvent
		(
			ObjID_t		nReceiver,
			ObjID_t		nSender,
			UNIT_EFFECT	&rImp,
			Time_t		nDelayTime,
			SpellID_t	nSkillID = INVALID_ID
		);
	//被技能打到了 空代码
	BOOL	RegisterBeSkillEvent(ObjID_t nReceiver, ObjID_t nSender, int32 nBehaviorType, Time_t nDelayTime);
	//被技能打了 但是闪避掉了
	BOOL	RegisterSkillMissEvent(ObjID_t nReceiver, ObjID_t nSender, SpellID_t nSkill, Time_t nDelayTime, int32 nFlag=CombatMissFlag::FLAG_MISS);
	//使陷阱生效
	BOOL	RegisterActiveSpecialObjEvent(ObjID_t nObj, Time_t nDelayTime);
	//使用技能打中目标
	BOOL	RegisterSkillHitEvent(ObjID_t nReceiver, ObjID_t nSender, SpellID_t nSkill, Time_t nDelayTime);
	//发送miss消息
	void	SendDelayTimeMissMSG(ObjID_t nReceiver, ObjID_t nSender, SpellID_t nSkill, int32 iLogicCount, int32 nFlag);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	int32	GetIndexOfFirstAvailableEventSlot(void);
	int32	GetIndexOfFirstAvailableImpactSlot(void);
	BOOL	ResizeAllVector(void);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	EventVector_T	m_EventQueue;
	ImpactVector_T	m_ImpactQueue;
	int32		m_nCountOfEvents;
	int32		m_nCountOfImpacts;
	int32		m_nMaxCountOfEvent;
	int32		m_nMaxCountOfImpacts;
	GameMap		*m_pMap;
};
#endif
