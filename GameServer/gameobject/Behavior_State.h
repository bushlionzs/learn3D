/*$T MapServer/Server/AI/Behavior_State.h GC 1.140 10/10/07 10:07:20 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef _STATE_H_
#define _STATE_H_

#include "StructDB.h"

enum eSTATE
{
	ESTATE_INVALID		= -1,
	ESTATE_IDLE		= 0,
	ESTATE_DEAD,
	ESTATE_TERROR,
	ESTATE_APPROACH,
	ESTATE_SERVICE,
	ESTATE_GOHOME,
	ESTATE_COMBAT,
	ESTATE_PATROL,
	ESTATE_FLEE,
	ESTATE_FOLLOW,
	ESTATE_SIT,
	ESTATE_TEAMFOLLOW,
	ESTATE_STALL,
	ESTATE_NUMBER,
};

class	Object;
class	Behavior_Character;
class	Character;

class	BHVState
{
	friend class	Behavior_Character;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BHVState()
	{
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual~BHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_INVALID;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
	} BOOL	Logic(Behavior_Character *pAI, uint32 uTime);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	OPT_RESULT BHV_Move(const Behavior_Character *pAI, int32 nHandleID, uint16 wNumTargetPos, const GLPos *paTargetPos);
	OPT_RESULT BHV_UseSpell
		(
			const Behavior_Character	*pAI,
			ObjID_t			idSkill,
			ObjID_t			idTarget,
			float			fTargetX,
			float			fTargetZ,
			int32			iHurtDelayTime,
			float			fDir = -1.f,
			GUID_t			guidTarget = INVALID_ID
		);
	OPT_RESULT BHV_UseItem
		(
			const Behavior_Character	*pAI,
			ID_t			nBagIndex,
			ObjID_t			nTargetObj,
			GLPos const		&posTarget,
			SHorseGuid const	&nTargetPetGUID,
			ID_t			nTargetItem
		);

	OPT_RESULT Stop(const Behavior_Character *pAI);
	OPT_RESULT Jump(const Behavior_Character *pAI);
	OPT_RESULT Stall(const Behavior_Character *pAI);
	OPT_RESULT Move
		(
			const Behavior_Character	*pAI,
			int32			nHandleID,
			uint16			wNumTargetPos,
			const GLPos		*paTargetPos,
			int32			nStopLogicCount = INVALID_ID,
			const GLPos		*paCurPos = NULL,
			ObjID_t			nSenderID = INVALID_ID
		);
	OPT_RESULT UseSpell
		(
			const Behavior_Character	*pAI,
			ObjID_t			idSkill,
			ObjID_t			idTarget,
			float			fTargetX,
			float			fTargetZ,
			int32			iHurtDelayTime,
			float			fDir = -1.f,
			GUID_t			guidTarget = INVALID_ID
		);
	OPT_RESULT UseAbility(const Behavior_Character *pAI);
	OPT_RESULT UseItem
		(
			const Behavior_Character	*pAI,
			ID_t			nBagIndex,
			ObjID_t			nTargetObj,
			GLPos const		&posTarget,
			SHorseGuid const	&nTargetPetGUID,
			ID_t			nTargetItem
		);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanStop(const Behavior_Character *pAI) const
	{
		return OR_OK;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanJump(const Behavior_Character *pAI) const
	{
		return OR_OK;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanStall(const Behavior_Character *pAI) const
	{
		return OR_OK;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanMove(const Behavior_Character *pAI) const
	{
		return OR_OK;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseSpell(const Behavior_Character *pAI) const
	{
		return OR_OK;
	}

	virtual OPT_RESULT CanUseAbility(const Behavior_Character *pAI) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseItem(const Behavior_Character *pAI) const
	{
		return OR_OK;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	Character	*GetCharacter(const Behavior_Character *pAI) const;
	BOOL		CheckSpecialState(Behavior_Character *pAI);

	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime) = 0;

	void		Terror_Logic(Behavior_Character *pAI, uint32 uTime);
	void		Idle_Logic(Behavior_Character *pAI, uint32 uTime);
	void		Dead_Logic(Behavior_Character *pAI, uint32 uTime);
	void		Combat_Logic(Behavior_Character *pAI, uint32 uTime);

	void		Flee_Logic(Behavior_Character *pAI, uint32 uTime);
	void		Patrol_Logic(Behavior_Character *pAI, uint32 uTime);
	void		Gohome_Logic(Behavior_Character *pAI, uint32 uTime);
	void		Service_Logic(Behavior_Character *pAI, uint32 uTime);
	void		Approach_Logic(Behavior_Character *pAI, uint32 uTime);

	void		Sit_Logic(Behavior_Character *pAI, uint32 uTime);

	void		TeamFollow_Logic(Behavior_Character *pAI, uint32 uTime);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_BeSpell(Behavior_Character *pAI, Character *pCharacter, int32 nHeal);
	virtual void	OnEvent_BeHeal(Behavior_Character *pAI, Character *pCharacter, int32 nGoodEffect);

	virtual void	OnEvent_Damage(Behavior_Character *pAI, int32 damage, Character *pAttacker);

	virtual void	OnEvent_Die(Behavior_Character *pAI, Object *pKiller);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	IsTransformState(const Behavior_Character *pAI) const;
	BOOL	IsTerrorState(const Behavior_Character *pAI) const;
	BOOL	IsMountState(const Behavior_Character *pAI) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

class IdleBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	IdleBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~IdleBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_IDLE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new IdleBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);
};

class CombatBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	CombatBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~CombatBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_COMBAT;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new CombatBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);
};

class DeadBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	DeadBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~DeadBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_DEAD;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new DeadBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanStall(const Behavior_Character *pAI) const
	{
		return OR_DIE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanStop(const Behavior_Character *pAI) const
	{
		return OR_DIE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanJump(const Behavior_Character *pAI) const
	{
		return OR_DIE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanMove(const Behavior_Character *pAI) const
	{
		return OR_DIE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseSpell(const Behavior_Character *pAI) const
	{
		return OR_DIE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseAbility(const Behavior_Character *pAI) const
	{
		return OR_DIE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseItem(const Behavior_Character *pAI) const
	{
		return OR_DIE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);
};

class ServiceBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ServiceBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~ServiceBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_SERVICE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new ServiceBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);
};
class ApproachBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ApproachBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~ApproachBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_APPROACH;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new ApproachBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);
};

class FleeBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	FleeBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~FleeBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_FLEE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new FleeBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);
};
class PatrolBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	PatrolBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~PatrolBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_PATROL;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new PatrolBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual OPT_RESULT CanStall(const Behavior_Character *pAI) const;
	virtual OPT_RESULT CanMove(const Behavior_Character *pAI) const;
	virtual OPT_RESULT CanUseSpell(const Behavior_Character *pAI) const;
	virtual OPT_RESULT CanUseAbility(const Behavior_Character *pAI) const;
	virtual OPT_RESULT CanUseItem(const Behavior_Character *pAI) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
};
class GohomeBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	GohomeBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~GohomeBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_GOHOME;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new GohomeBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void OnEvent_BeSpell(Behavior_Character *pAI, int32 nGoodEffect)
	{
		return;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void	nEvent_Damage(Behavior_Character *pAI, int32 damage, Character *pAttacker)
	{
		return;
	}
};
class TeamFollowBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	TeamFollowBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~TeamFollowBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_TEAMFOLLOW;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new TeamFollowBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual OPT_RESULT CanStall(const Behavior_Character *pAI) const;
	virtual OPT_RESULT CanMove(const Behavior_Character *pAI) const;
	virtual OPT_RESULT CanUseSpell(const Behavior_Character *pAI) const;
	virtual OPT_RESULT CanUseAbility(const Behavior_Character *pAI) const;
	virtual OPT_RESULT CanUseItem(const Behavior_Character *pAI) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_BeSpell(Behavior_Character *pAI, int32 nGoodEffect);
};

class SitBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SitBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SitBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_SIT;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new SitBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanJump(const Behavior_Character *pAI) const
	{
		return OR_BUSY;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanMove(const Behavior_Character *pAI) const
	{
		return OR_BUSY;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseSpell(const Behavior_Character *pAI) const
	{
		return OR_BUSY;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseAbility(const Behavior_Character *pAI) const
	{
		return OR_BUSY;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);
};

class TerrorBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	TerrorBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~TerrorBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_TERROR;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new TerrorBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanStall(const Behavior_Character *pAI) const
	{
		return OR_U_CANNT_DO_THIS_RIGHT_NOW;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanJump(const Behavior_Character *pAI) const
	{
		return OR_U_CANNT_DO_THIS_RIGHT_NOW;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanMove(const Behavior_Character *pAI) const
	{
		return OR_U_CANNT_DO_THIS_RIGHT_NOW;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseSpell(const Behavior_Character *pAI) const
	{
		return OR_U_CANNT_DO_THIS_RIGHT_NOW;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseAbility(const Behavior_Character *pAI) const
	{
		return OR_U_CANNT_DO_THIS_RIGHT_NOW;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseItem(const Behavior_Character *pAI) const
	{
		return OR_U_CANNT_DO_THIS_RIGHT_NOW;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	State_Logic(Behavior_Character *pAI, uint32 uTime);
};

class StallBHVState :
	public BHVState
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	StallBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~StallBHVState()
	{
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual int32 GetStateID(void) const
	{
		return ESTATE_STALL;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	static BHVState *Instance(void)
	{
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/
		BHVState	*s = new StallBHVState();
		/*~~~~~~~~~~~~~~~~~~~~~~~~~~*/

		KCheck(s);
		return s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void Destroy(void)
	{
		delete this;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanJump(const Behavior_Character *pAI) const
	{
		return OR_BUSY;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanMove(const Behavior_Character *pAI) const
	{
		return OR_BUSY;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseSpell(const Behavior_Character *pAI) const
	{
		return OR_BUSY;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseAbility(const Behavior_Character *pAI) const
	{
		return OR_BUSY;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT CanUseItem(const Behavior_Character *pA) const
	{
		return OR_BUSY;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL State_Logic(Behavior_Character *pAI, uint32 uTime)
	{
		return TRUE;
	};
};

struct SStateList;
extern SStateList g_BHVStateList;

struct SStateList
{
	BHVState	**m_pStateList;

	SStateList()
	{
		m_pStateList = new BHVState *[ESTATE_NUMBER];
		KCheck(m_pStateList);

		for(int32 i = 0; i < ESTATE_NUMBER; ++i)
		{
			m_pStateList[i] = NULL;
		}
	}
	~SStateList()
	{
		KSafeDelete_ARRAY(m_pStateList);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void InitStateList(void)
	{
		g_BHVStateList.RegisterState(IdleBHVState::Instance());
		g_BHVStateList.RegisterState(CombatBHVState::Instance());
		g_BHVStateList.RegisterState(DeadBHVState::Instance());
		g_BHVStateList.RegisterState(ApproachBHVState::Instance());
		g_BHVStateList.RegisterState(FleeBHVState::Instance());
		g_BHVStateList.RegisterState(ServiceBHVState::Instance());
		g_BHVStateList.RegisterState(GohomeBHVState::Instance());
		g_BHVStateList.RegisterState(PatrolBHVState::Instance());
		g_BHVStateList.RegisterState(TeamFollowBHVState::Instance());
		g_BHVStateList.RegisterState(SitBHVState::Instance());
		g_BHVStateList.RegisterState(TerrorBHVState::Instance());
		g_BHVStateList.RegisterState(StallBHVState::Instance());
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void RegisterState(BHVState *s)
	{
		m_pStateList[s->GetStateID()] = s;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void ReleaseState(void)
	{
		for(int32 i = 0; i < ESTATE_NUMBER; ++i)
		{
			if(g_BHVStateList.m_pStateList[i])
			{
				g_BHVStateList.m_pStateList[i]->Destroy();
			}
		}
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BHVState *InstanceState(eSTATE eState) const
	{
		return m_pStateList[eState];
	}
};
#endif
