/*$T MapServer/Server/Obj/ObjectSingleManager.h GC 1.140 10/10/07 10:07:32 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __OBJSINGLEMANAGER_H__
#define __OBJSINGLEMANAGER_H__

#include "TypeDefine.h"
#include "Util.h"

class	GameMap;
class	Object;

struct _INIT_SINGLEMANAGER_OBJECT
{
	uint32	m_uLength;
	GameMap*m_pMap;
	uint32	m_uLogicInterval;
	uint32	m_uCurrentTime;
	_INIT_SINGLEMANAGER_OBJECT (void)
	{
		m_uLength = 0;
		m_pMap = NULL;
		m_uLogicInterval = 0;
		m_uCurrentTime = 0;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Clear(void)
	{
		m_uLength = 0;
		m_pMap = NULL;
		m_uLogicInterval = 0;
		m_uCurrentTime = 0;
	}
};

class	ObjectSingleManager
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	ObjectSingleManager(void);
	virtual		~ObjectSingleManager(void);

	virtual BOOL	Init(const _INIT_SINGLEMANAGER_OBJECT *pInit);
	virtual void	Term(void);
	void		Reset();

	void		SetLoadFactor(float fFactor);
	virtual BOOL	HeartBeat(uint32 uTime = 0);

	BOOL		Add(Object *pObj);
	BOOL		Remove(Object *pObj);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	uint32 GetCount(void) const
	{
		return m_uCount;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	uint32 GetLength(void) const
	{
		return m_uLength;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetMap(GameMap *pMap)
	{
		m_pMap = pMap;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	GameMap *GetMap(void)
	{
		return m_pMap;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	Object *GetObjByIndex(uint32 uIndex)
	{
		if(uIndex < m_uCount)
		{
			return m_papObjs[uIndex];
		}
		else
		{
			return NULL;
		}
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL	Resize(uint32 uSize);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	Object		**m_papObjs;
	uint32		m_uCount;
	uint32		m_uLength;
	uint32		m_uLogicInterval;
	uint32		m_uCurrentLogicInterval;
	GameMap*    m_pMap;
	CTinyTimer	m_LogicTimer;
};
#endif
