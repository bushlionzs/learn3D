/*********************************************************************************************
created:	10/10/07 10:07:26
filename: 	RegionManager.h
file path:	F:\khan2\src\MapServer\Server\Map
file base:
file ext:	h
author:		
modified:	wujianping
purpose:	区域管理器 读取区域文件并把这些区域注册到对应的Map中
			以大都为例区域的定义在\Server\map\city_dadu\city_dadu_area.ini中
			所谓的区域就是一个矩形 由左上坐标和右下坐标确定一个矩形区域 每一个区域可以绑定一个脚本
			当Character进入区域 会调用脚本函数OnEnterArea
			当Character离开区域 会调用脚本函数OnLeaveArea
			当Character停留在区域中 区域也是有心跳的 会调用脚本函数OnOnTimer
**********************************************************************************************/


#ifndef __AREAMANGER_H__
#define __AREAMANGER_H__

#include "TypeDefine.h"

struct _FRECT
{
	float	m_fLeft;
	float	m_fTop;
	float	m_fRight;
	float	m_fBottom;

	_FRECT()
	{
		Clear();
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Clear()
	{
		m_fLeft = 0;
		m_fTop = 0;
		m_fRight = 0;
		m_fBottom = 0;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsContain(float x, float y) const
	{
		return((x >= m_fLeft) && (x < m_fRight) && (y >= m_fTop) && (y < m_fBottom));
	}
};

struct Region
{
	uint32	m_uAreaID;
	uint32	m_uScriptID;
	_FRECT	m_rcArea;

	Region()
	{
		Clear();
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void Clear()
	{
		m_uAreaID = INVALID_ID;
		m_uScriptID = INVALID_ID;
		m_rcArea.Clear();
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsContain(float x, float y) const
	{
		return m_rcArea.IsContain(x, y);
	}
};

#define MAX_AREA_SCENE	128

class	GameMap;
class MapManager;
class	RegionManager
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	RegionManager(void);
	~	RegionManager(void);

	BOOL	Init(MapManager* pMapManager, const char *pszPathName);
	void	Term(void);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	void SetScene(GameMap*pMap)
	{
		KCheck(pMap);
		m_pMap = pMap;
	}

	uint32	GetZoneID(float x, float z);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	uint32	m_uAreaCount;
	Region	*m_paArea;
	GameMap	*m_pMap;
};
#endif
