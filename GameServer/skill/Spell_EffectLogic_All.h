/*$T MapServer/Server/Spell/EffectLogic/Spell_EffectLogic_All.h GC 1.140 10/10/07 10:07:55 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __SPELLEFFECT_H__
#define __SPELLEFFECT_H__

#include "Spell_EffectLogic_Base.h"
#include "StructEffect.h"
#include "gameobject/Character.h"
#include "gameobject/Pet.h"
#include "gameobject/Monster.h"
#include "gameobject/Player.h"
#include "share/TAB/TabDefine.h"
#include "gameobject/Behavior_Character.h"
#include "gameobject/Behavior_Player.h"
#include "Spell_Interface.h"
#include "map/game_map.h"
#include "Spell_Helper.h"
#include "gameobject/CharAttributes.h"
#include "SpellDataLoader.h"


class SpecialCreature;

typedef class SpellEffect000 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_000, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect000()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect000()
	{
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_JustSpecialEffect_T;

//对目标产生一个伤害 游戏中实际用法是，本BUFF是一个DOT-BUFF的子BUFF 对目标产生一个固定伤害 add by wujianping
typedef class SpellEffect001 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_001, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_DAMAGE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_DAMAGE = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect001()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect001()
	{
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDamage(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamage(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE, nDamage);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	CriticalRefix(UNIT_EFFECT &rImp) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_DamageByValue_T;

//游戏中没有用到 而此逻辑也并不完整 也不正确 add by wujianping
typedef class SpellEffect002 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_002, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_DAMAGE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_DAMAGE = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect002()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect002()
	{
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDamage(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamage(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE, nDamage);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	CriticalRefix(UNIT_EFFECT &rImp) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_DamageByRate_T;

//修正伤害输出(近、远、魔、冰、电、火、毒) add by wujianping
typedef class SpellEffect003 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_003, };
	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_DAMAGE_NEAR		= 0,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON,
		};
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_DAMAGE_NEAR		= 0,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect003()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect003()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageNear(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_NEAR);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageNear(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_NEAR, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageFar(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FAR);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageFar(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FAR, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageMagic(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_MAGIC);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageMagic(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_MAGIC, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageCold(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_COLD);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageCold(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_COLD, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageFire(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FIRE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageFire(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FIRE, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageLight(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_LIGHT);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageLight(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_LIGHT, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamagePoison(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_POISON);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamagePoison(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_POISON, nDamage);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	CriticalRefix(UNIT_EFFECT &rImp) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_DamagesByValue_T;

//修正生命、魔法、怒气  一般是药品使用此BUFF add by wujianping
typedef class SpellEffect004 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_004, };
	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_HP			= 0,
			IDX_MP,
			IDX_RAGE,
			IDX_RAGE1,
			IDX_RAGE2,
			IDX_RAGE3,
			IDX_RAGE4,
			IDX_RAGE5,
			IDX_REFIX_RATE,
		};
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_HP			= 0,
			IDX_MP,
			IDX_RAGE,
			IDX_RAGE1,
			IDX_RAGE2,
			IDX_RAGE3,
			IDX_RAGE4,
			IDX_RAGE5,
			IDX_REFIX_RATE
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect004()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect004()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_HP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_HP, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_MP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetMpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_MP, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRageModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage1Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE1);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage1Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE1, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage2Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE2);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage2Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE2, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage3Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE3);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage3Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE3, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage4Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE4);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage4Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE4, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage5Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE5);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage5Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE5, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	int32	GetDamageRefix(Character *pImpactSender, UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
ModifyHpMpRageStrikePointByValue_T;

//修正生命、魔法、怒气  add by wujianping
typedef class SpellEffect005 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_005, };
	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_HP			= 0,
			IDX_MP,
			IDX_RAGE,
			IDX_RAGE1,
			IDX_RAGE2,
			IDX_RAGE3,
			IDX_RAGE4,
			IDX_RAGE5,
			IDX_REFIX_RATE,
		};
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_HP			= 0,
			IDX_MP,
			IDX_RAGE,
			IDX_RAGE1,
			IDX_RAGE2,
			IDX_RAGE3,
			IDX_RAGE4,
			IDX_RAGE5,
			IDX_REFIX_RATE,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect005()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect005()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_HP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_HP, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_MP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetMpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_MP, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRageModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage1Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE1);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage1Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE1, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage2Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE2);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage2Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE2, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage3Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE3);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage3Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE3, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage4Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE4);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage4Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE4, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage5Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE5);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage5Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE5, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	int32	GetDamageRefix(Character *pImpactSender, UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
ModifyHpMpRageStrikePointByRate_T;

//修正宠物的HP和快乐度 add by wujianping
typedef class SpellEffect006 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_006, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_HP = 0, IDX_HAPPINESS, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_HP = 0, IDX_HAPPINESS, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect006()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect006()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_HP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_HP, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetHappinessModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_HAPPINESS);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHappinessModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_HAPPINESS, nValue);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_ModifyPetHpHappinessByValue_T;

//修正宠物的HP和快乐度 add by wujianping
typedef class SpellEffect007 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_007, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_HP = 0, IDX_HAPPINESS, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_HP = 0, IDX_HAPPINESS, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect007()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect007()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_HP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_HP, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetHappinessModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_HAPPINESS);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHappinessModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_HAPPINESS, nValue);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_ModifyPetHpHappinessByRate_T;

//修改仇恨值 此BUFF是添加到怪物身上的 修改怪物对此BUFF释放者的仇恨值 add by wujianping
typedef class SpellEffect008 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_008, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_ModThreat = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect008()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect008()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	ObjID_t GetModThreat(UNIT_EFFECT const &rImp, int32 iLevel) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ModThreat,
			iLevel
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_ForceMonsterChangeTarget_T;

//传送到一个位置 add by wujianping
typedef class SpellEffect009 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_009, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_SCENE_ID = 0, IDX_POSITION_X, IDX_POSITION_Z, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_SCENE_ID = 0, IDX_POSITION_X, IDX_POSITION_Z, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect009()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect009()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetSceneID(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_SCENE_ID);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetSceneID(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_SCENE_ID, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPosition_X(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_POSITION_X);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetPosition_X(UNIT_EFFECT &rImp, float fValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_POSITION_X, Float2Int(fValue * 100));
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPosition_Z(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_POSITION_Z);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetPosition_Z(UNIT_EFFECT &rImp, float fValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_POSITION_Z, Float2Int(fValue * 100));
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_Teleport_T;

//DOT类型 给目标添加BUFF add by wujianping
class SpellEffect010 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_010, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect010()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect010()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetSubImpactDataIndexByIndex(UNIT_EFFECT const &rImp, int32 nIndex) const
	{
		return GetEffectDataDescriptorValueByIndex(rImp.GetDataIndex(), nIndex, rImp.GetSkillLevel());
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//修正战斗属性 近攻 近防 远攻 远防 魔攻 魔防 冰攻 冰防
//电攻 电防 火攻 火防 毒攻 毒防 add by wujianping
typedef class SpellEffect011 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_011, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_ATTACK_NEAR		= 0,
			IDX_DEFENCE_NEAR,
			IDX_ATTACK_FAR,
			IDX_DEFENCE_FAR,
			IDX_ATTACK_MAGIC,
			IDX_DEFENCE_MAGIC,
			IDX_ATTACK_COLD,
			IDX_RESIST_COLD,
			IDX_ATTACK_FIRE,
			IDX_RESIST_FIRE,
			IDX_ATTACK_LIGHT,
			IDX_RESIST_LIGHT,
			IDX_ATTACK_POISON,
			IDX_RESIST_POISON,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect011()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect011()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAttackNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_NEAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackFarRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_FAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_MAGIC,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackColdRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_COLD,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackFireRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_FIRE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackLightRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_LIGHT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackPoisonRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_POISON,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDefenceNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_NEAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceFarRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_FAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_MAGIC,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistColdRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_COLD,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistFireRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_FIRE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistLightRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_LIGHT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistPoisonRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_POISON,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
RefixAttrLevel2ByValue_AttacksDefencesAndMaxs_T;

//修正战斗属性 近攻 近防 远攻 远防 魔攻 魔防 冰攻 冰防
//电攻 电防 火攻 火防 毒攻 毒防 add by wujianping
typedef class SpellEffect012 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_012, };
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_REFIX_TYPE = 0,
			IDX_ATTACK_NEAR,
			IDX_DEFENCE_NEAR,
			IDX_ATTACK_FAR,
			IDX_DEFENCE_FAR,
			IDX_ATTACK_MAGIC,
			IDX_DEFENCE_MAGIC,
			IDX_ATTACK_COLD,
			IDX_RESIST_COLD,
			IDX_ATTACK_FIRE,
			IDX_RESIST_FIRE,
			IDX_ATTACK_LIGHT,
			IDX_RESIST_LIGHT,
			IDX_ATTACK_POISON,
			IDX_RESIST_POISON,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect012()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect012()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
			);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAttackNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_NEAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackFarRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_FAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_MAGIC,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackColdRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_COLD,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackFireRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_FIRE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackLightRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_LIGHT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackPoisonRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_POISON,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDefenceNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_NEAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceFarRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_FAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_MAGIC,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistColdRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_COLD,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistFireRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_FIRE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistLightRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_LIGHT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistPoisonRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_POISON,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
RefixAttrLevel2ByRate_AttacksDefencesAndMaxs_T;

//修正命中、闪避、暴击率、韧性、暴击伤害 add by wujianping
typedef class SpellEffect013 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_013, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_HIT = 0, IDX_MISS, IDX_CRITICAL, IDX_TOUGHNESS, IDX_CRITICAL_HURT, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect013()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect013()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHitRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_HIT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMissRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MISS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCriticalRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CRITICAL,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetToughnessRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TOUGHNESS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCriticalHurtRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CRITICAL_HURT,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_HitMissCriticalRefix_T;

//变身 定身 无敌 隐身 反隐 移动速度 骑乘变身 这个BUFF是最常用的 add by wujianping
typedef class SpellEffect014 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_014, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_CAN_ACTION1_FLAG	= 0,
			IDX_CAN_ACTION2_FLAG,
			IDX_CAN_MOVE_FLAG,
			IDX_UNBREAKABLE_FLAG,
			IDX_MOVE_SPEED,
			IDX_STEALTH_LEVEL,
			IDX_DETECT_LEVEL,
			IDX_MODEL_ID,
			IDX_MOUNT_ID,
			IDX_CAN_ACTION3_FLAG,
			IDX_DAMAGE_FIXED_FLAG,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect014()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect014()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FinalDamage( UNIT_EFFECT &rImp,Character &rMe,Character*const pAttacker,int32 &rDamage,SpellID_t nSkillID) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;
	

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetCanAction1Refix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CAN_ACTION1_FLAG,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCanAction2Refix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CAN_ACTION2_FLAG,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCanMoveRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CAN_MOVE_FLAG,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetUnbreakableRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_UNBREAKABLE_FLAG,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMoveSpeedRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MOVE_SPEED,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetStealthLevelRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_STEALTH_LEVEL,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDetectLevelRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DETECT_LEVEL,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetModelRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MODEL_ID,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMountRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MOUNT_ID,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCanAction3Refix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CAN_ACTION3_FLAG,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 最终伤害效果修正
	 ===============================================================================================================
	 */
	int32 GetDamageRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DAMAGE_FIXED_FLAG,
			rImp.GetSkillLevel()
			); 
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_BoolAttrRefix
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			CharBoolAttrs::Index_T	nIdx,
			BOOL			&rBoolAttrRefix
		) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_TransformsAndCanActions_T;

//对属性的修正 add by wujianping
typedef class SpellEffect015 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_015, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_STR = 0, IDX_CON, IDX_INT, IDX_DEX, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect015()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect015()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetStrRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_STR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetConRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CON,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetIntRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_INT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDexRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_RefixAttrLevelOneByValue_T;

//对属性的修正 add by wujianping
typedef class SpellEffect016 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_016, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_STR = 0, IDX_CON, IDX_INT, IDX_DEX, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect016()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect016()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetStrRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_STR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetConRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CON,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetIntRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_INT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDexRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_RefixAttrLevelOneByRate_T;

//免疫某些BUFF add by wujianping
typedef class SpellEffect017 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_017, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_GATHER_COUNT = EffectData::NUMBER_OF_PARAMS,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect017()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect017()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetGatherId(UNIT_EFFECT const &rImp, int32 nIndex) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			nIndex,
			rImp.GetSkillLevel()
			);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	int32	OnEvent_FiltrateImpact(UNIT_EFFECT &rImp, Character &rMe, UNIT_EFFECT &rImpactNeedCheck) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_ImmunoImpacts_T;

//驱散某些BUFF add by wujianping
typedef class SpellEffect018 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_018, };
	enum { COLLECTION_NUMBER = 14, };

	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_DISPEL_LEVEL	= 0,
			IDX_DISPEL_COUNT,
			IDX_COLLECTION0,
			IDX_COLLECTION1,
			IDX_COLLECTION2,
			IDX_COLLECTION3,
			IDX_COLLECTION4,
			IDX_COLLECTION5,
			IDX_COLLECTION6,
			IDX_COLLECTION7,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect018()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect018()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDispelLevel(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DISPEL_LEVEL,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDispelCount(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DISPEL_COUNT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCollectionByIndex(UNIT_EFFECT const &rImp, int32 nIndex) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_COLLECTION0 + nIndex,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_DispelImpacts_T;

//修正某些技能的持续时间和伤害 有次数限制 add by wujianping
typedef class SpellEffect019 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_019, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVATE_TIMES = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_ACTIVATE_TIMES		= 0,
			IDX_TARGET_IMPACT_COLLECTION,
			IDX_POWER_REFIX,
			IDX_CONTINUANCE_REFIX,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect019()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect019()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateTimes(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActivateTimes(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateTimesInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_TIMES,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTargetImpactCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TARGET_IMPACT_COLLECTION,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPowerRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_POWER_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetContinuanceRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CONTINUANCE_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixEffect(UNIT_EFFECT &rImp, Character &rMe, UNIT_EFFECT &rImpactNeedRefix) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_ImpactRefix_T;

//死亡时生效的BUFF 当角色死亡时 修正复活后的HP, MP, RANGE    add by wujianping
typedef class SpellEffect020 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_020, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_HP_RECOVER_RATE = 0, IDX_MP_RECOVER_RATE, IDX_RAGE_RECOVER_RATE, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect020()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect020()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHpRecoverRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_HP_RECOVER_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMpRecoverRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MP_RECOVER_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageRecoverRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_RECOVER_RATE,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Die(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_SelfResurrection_T;

//修正某些技能的命中、暴击、伤害、消耗、冷却、聚气时间、引导时间
//当然修正还有次数限制(IDX_ACTIVATE_TIMES) add by wujianping
class SpellEffect021 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_021, };
	enum { COLLECTION_NUMBER = 2, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVATE_TIMES, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_ACTIVATE_TIMES		= 0,
			IDX_TARGET_SKILL_COLLECTION,
			IDX_HIT_REFIX,
			IDX_CRITICAL_REFIX,
			IDX_POWER_REFIX_BY_VALUE,
			IDX_POWER_REFIX_BY_RATE,
			IDX_DEPLETE_REFIX_BY_VALUE,
			IDX_DEPLETE_REFIX_BY_RATE,
			IDX_TIME_REFIX_BY_VALUE,
			IDX_TIME_REFIX_BY_RATE,
			IDX_COOLDOWN_REFIX_BY_VALUE,
			IDX_COOLDOWN_REFIX_BY_RATE,
			IDX_CHARGE_REFIX_BY_VALUE,
			IDX_CHARGE_REFIX_BY_RATE,
			IDX_CHANNEL_REFIX_BY_VALUE,
			IDX_CHANNEL_REFIX_BY_RATE,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect021()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect021()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateTimes(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActivateTimes(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateTimesInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_TIMES,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTargetCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TARGET_SKILL_COLLECTION,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHitRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_HIT_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetCriticalRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CRITICAL_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetPowerRefixByValue(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_POWER_REFIX_BY_VALUE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPowerRefixByRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_POWER_REFIX_BY_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDepleteRefixByValue(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEPLETE_REFIX_BY_VALUE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDepleteRefixByRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEPLETE_REFIX_BY_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetTimeRefixByValue(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TIME_REFIX_BY_VALUE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTimeRefixByRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TIME_REFIX_BY_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetCooldownRefixByValue(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_COOLDOWN_REFIX_BY_VALUE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCooldownRefixByRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_COOLDOWN_REFIX_BY_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetChargeRefixByValue(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHARGE_REFIX_BY_VALUE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChargeRefixByRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHARGE_REFIX_BY_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetChannelRefixByValue(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHANNEL_REFIX_BY_VALUE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChannelRefixByRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHANNEL_REFIX_BY_RATE,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixSkill(UNIT_EFFECT &rImp, SpellInfo &rSkill) const;
	void	OnEvent_UseSkillSuccessfully(UNIT_EFFECT &rImp, Character &rMe, SpellInfo &rSkill) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//吸血 效果为可以将对目标造成的伤害转化为生命给释放者增加，参数1、计算类型（-1无效 0按点数 1按百分比）参数2、生效次数（-1为无限次 0为不生效 ）参数3、生效概//率（-1为必生效 0为不生效）参数4、转化生命比例（支持负数） add by wujianping
typedef class SpellEffect022 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_022, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVE_TIMES };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_REFIX_TYPE = 0, IDX_ACTIVE_TIMES, IDX_ACTIVATE_ODDS, IDX_ABSORB_VALUE };
	};

	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	int32 GetActivateTimes(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVE_TIMES);
	};

	void SetActivateTimes(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVE_TIMES, nValue);
	};

	int32 GetRefixTypeInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
			);
	};

	int32 GetActivateTimesInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVE_TIMES,
			rImp.GetSkillLevel()
		);
	};

	int32 GetActivateOddsInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
			);
	};

	int32 GetAbsorbValueInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ABSORB_VALUE,
			rImp.GetSkillLevel()
		);
	};

public:
	virtual void	OnEvent_DamageTarget
			(
				UNIT_EFFECT	&rImp,
				Character	&rMe,
				Character	&rTar,
				int32		&rDamage,
				SpellID_t	nSkillID
			) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_PetRevenge_T;

//游戏中没有用到 被攻击时有一定概率吸收一定比例的伤害 在攻击目标时 有一定概率加蓝加怒气 add by wujianping
typedef class SpellEffect023 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_023, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVATE_ODDS, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_ACTIVATE_ODDS		= 0,
			IDX_DAMAGE_IGNORE_RATE,
			IDX_MP_DAMAGE_RATE,
			IDX_RAGE_DAMAGE_RATE,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect023()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect023()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateOdds(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_ODDS);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActivateOdds(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_ODDS, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateOddsInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDamageIgnoreRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DAMAGE_IGNORE_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMpDamageRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MP_DAMAGE_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageDamageRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_DAMAGE_RATE,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_Damage
			(
				UNIT_EFFECT		&rImp,
				Character		&rMe,
				Character *const	pAttacker,
				int32			&nDamage,
				SpellID_t		nSkillID
			) const;
	virtual void	OnEvent_DamageTarget
			(
				UNIT_EFFECT	&rImp,
				Character	&rMe,
				Character	&rTar,
				int32		&rDamage,
				SpellID_t	nSkillID
			) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_PetDefence_T;

//游戏中没有用到 有一定概率无视某些BUFF的伤害 add by wujianping
typedef class SpellEffect024 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_024, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVATE_ODDS, };
	};
	enum { COLLECTION_NUMBERS = 4, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_ACTIVATE_ODDS = 0, IDX_IMMUNIZED_IMPACT_COLLECTION, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect024()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect024()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateOdds(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_ODDS);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActivateOdds(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_ODDS, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateOddsInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetImmunoImpactsByIndex(UNIT_EFFECT const &rImp, int32 nIndex) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IMMUNIZED_IMPACT_COLLECTION + nIndex,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	int32	OnEvent_FiltrateImpact(UNIT_EFFECT &rImp, Character &rMe, UNIT_EFFECT &rImpactNeedCheck) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_FilterDebuff_T;

//游戏中没有用到 有一定的概率 无视暴击伤害 add by wujianping
typedef class SpellEffect025 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_025, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVATE_ODDS, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_ACTIVATE_ODDS = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect025()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect025()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateOdds(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_ODDS);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActivateOdds(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_ODDS, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateOddsInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	int32	OnEvent_FiltrateImpact(UNIT_EFFECT &rImp, Character &rMe, UNIT_EFFECT &rImpactNeedCheck) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_CounteractCriticalHit_T;

//生命盾 盾有HP会吸收伤害、反弹伤害、免疫一部分伤害 add by wujianping
typedef class SpellEffect026 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_026, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_SHIELD_HP = 0};
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_SHIELD_HP			= 0,
			IDX_ABSORB_RATE,
			IDX_IGNORE_RATE,
			IDX_REFLECT_RATE,
			IDX_REFLECT_ACTIVATE_ODDS,
			IDX_ABSORB_DAMAGE_BY_RAGE,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect026()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect026()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetShieldHp(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_SHIELD_HP);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetShieldHp(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_SHIELD_HP, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetShieldHpInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SHIELD_HP,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAbsorbRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ABSORB_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetIgnoreRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IGNORE_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetReflectRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFLECT_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetReflectActivateOdds(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFLECT_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
		);
	};

	int32 IsAbsorbDamageByMP(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ABSORB_DAMAGE_BY_RAGE,
			rImp.GetSkillLevel()
			);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	void	OnEvent_Damage
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			Character *const	pAttacker,
			int32			&nDamage,
			SpellID_t		nSkillID
		) const;

	void	OnEvent_FinalDamage
		(
		UNIT_EFFECT		&rImp,
		Character		&rMe,
		Character *const	pAttacker,
		int32			&rDamage,
		SpellID_t		nSkillID
		) const;

	int32 GetIgnoreImmunityRate(Character *const pAttacker) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_AbsorbIgnoreReflect_T;

//游戏中没有用到 把伤害按照一定比例转移给自己的宠物 add by wujianping
typedef class SpellEffect027 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_027, };
	class OwnImpactParamIndex
	{
	public:
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_TRANSFER_RATE, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect027()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect027()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetTransferRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFER_RATE,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Damage
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			Character *const	pAttacker,
			int32			&nDamage,
			SpellID_t		nSkillID
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_TransferDamageToPet_T;

//游戏中没有用到 修正冰电火毒对自己的伤害 add by wujianping
typedef class SpellEffect028 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_028, };
	class OwnImpactParamIndex
	{
	public:
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_COLD_REFIX, IDX_FIRE_REFIX, IDX_LIGHT_REFIX, IDX_POISON_REFIX, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect028()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect028()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetColdRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_COLD_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetFireRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_FIRE_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetLightRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_LIGHT_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPoisonRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_POISON_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_Damages
			(
				UNIT_EFFECT		&rImp,
				Character		&rMe,
				Character *const	pAttacker,
				int32 *const		pDamageList,
				SpellID_t		nSkillID
			) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_PetTrait_T;

//修正某些技能的冷却时间、聚气时间、引导时间、消耗、连续攻击次数或引导时间间隔、暴击率、最大目标搜索个数 add by wujianping
typedef class SpellEffect029 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_029, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_SHIELD_HP, IDX_ABSORB_RATE, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_TARGET_SKILL_COLLECTION	= 0,
			IDX_REFIX_TYPE,
			IDX_COOLDOWN_TIME_REFIX,
			IDX_CHARGE_TIME_REFIX,
			IDX_CHANNEL_TIME_REFIX,
			IDX_DEPLETE_REFIX,
			IDX_ATTACK_TIMES_OR_CHANNEL_TIME,
			IDX_ACCURACY,
			IDX_CRITICALRATE,
			IDX_MAX_TARGET
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect029()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect029()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetTargetSkillCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TARGET_SKILL_COLLECTION,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCooldownTimeRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_COOLDOWN_TIME_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChargeTimeRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHARGE_TIME_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChannelTimeRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHANNEL_TIME_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDepleteRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEPLETE_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAttackTimesOrChannelTimeRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_TIMES_OR_CHANNEL_TIME,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAccuracyRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACCURACY,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCriticalrateRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CRITICALRATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMaxTargetRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MAX_TARGET,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixSkill(UNIT_EFFECT &rImp, SpellInfo &rSkill) const;

	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	RefixAllSkillAttr(SpellInfo &rSkill, UNIT_EFFECT &rImp) const;
	int32	GetRifixResult(int32 iBase, int32 iRefix, int32 iRefixType) const;
	float	GetRifixResult(float fBase, float fRefix, int32 iRefixType) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_XianZhi009_T;

//游戏中没有用到 生命盾 在受到伤害时 生命盾按照一定比例吸收伤害 当生命盾HP为0时 此BUFF消失 当然BUFF时间到了也消失
//BUFF消失时对周围角色释放一个子BUFF add by wujianping
typedef class SpellEffect030 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_030, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_SHIELD_HP, IDX_ABSORB_RATE, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_SHIELD_HP			= 0,
			IDX_ABSORB_RATE,
			IDX_TARGET_IMPACT_COLLECTION,
			IDX_IMPACT_REFIX_RATE,
			IDX_SCAN_RADIUS,
			IDX_EFFECTED_OBJ_COUNT,
			IDX_SUB_IMPACT_INDEX,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect030()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect030()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetShieldHp(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_SHIELD_HP);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetShieldHp(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_SHIELD_HP, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAbsorbRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ABSORB_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetAbsorbRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ABSORB_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetShieldHpInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SHIELD_HP,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAbsorbRateInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ABSORB_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTargetImpactCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TARGET_IMPACT_COLLECTION,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetImpactRefixRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IMPACT_REFIX_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetScanRadius(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SCAN_RADIUS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEffectedObjCount(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_OBJ_COUNT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSubImpactIndex(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT_INDEX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Damage
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			Character *const	pAttacker,
			int32			&nDamage,
			SpellID_t		nSkillID
		) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	IsScanedTargetValid(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;
	void	RefixEffect(UNIT_EFFECT &rImp, Character &rMe, UNIT_EFFECT &rImpactNeedRefix) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_XianZhi014_T;

//游戏中没有用到 在受到攻击时 有一定的概率按照比率吸收伤害 add by wujianping
typedef class SpellEffect031 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_031, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_COLLECTED_DAMAGE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_ABSORB_ODDS			= 0,
			IDX_REFLECT_RATE,
			IDX_DEFENCE_NEAR_REFIX,
			IDX_DEFENCE_MAGIC_REFIX,
			IDX_RESIST_COLD_REFIX,
			IDX_RESIST_FIRE_REFIX,
			IDX_RESIST_LIGHT_REFIX,
			IDX_RESIST_POISON_REFIX,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect031()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect031()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetCollectedDamage(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_COLLECTED_DAMAGE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetCollectedDamage(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_COLLECTED_DAMAGE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAbsorbOdds(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ABSORB_ODDS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetReflectRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFLECT_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_NEAR_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_MAGIC_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistColdRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_COLD_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistFireRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_FIRE_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistLightRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_LIGHT_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistPoisonRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_POISON_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Damage
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			Character *const	pAttacker,
			int32			&rDamage,
			SpellID_t		nSkillID
		) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	void	RefixEffect(UNIT_EFFECT &rImp, Character &rMe, UNIT_EFFECT &rImpactNeedRefix) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_HuoQiang006_T;

//游戏中没有用到 修正 近远魔冰电火毒的防御 当受到攻击时有一个概率给攻击者释放一个BUFF 
//当本BUFF消失时给周围的角色释放一个BUFF add by wujianping

typedef class SpellEffect032 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_032, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_SNARE_ACTIVATE_COOLDOWN_ELAPSED = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_SNARE_ACTIVATE_ODDS			= 0,
			IDX_SNARE_IMPACT_DATA_INDEX,
			IDX_SNARE_ACTIVATE_COOLDOWN,
			IDX_SCAN_RADIUS,
			IDX_EFFECTED_OBJ_COUNT,
			IDX_FREEZE_IMPACT_DATA_INDEX,
			IDX_DEFENCE_NEAR_REFIX,
			IDX_DEFENCE_MAGIC_REFIX,
			IDX_RESIST_COLD_REFIX,
			IDX_RESIST_FIRE_REFIX,
			IDX_RESIST_LIGHT_REFIX,
			IDX_RESIST_POISON_REFIX,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect032()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect032()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetSnareActivateCooldownElapsed(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_SNARE_ACTIVATE_COOLDOWN_ELAPSED);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetSnareActivateCooldownElapsed(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_SNARE_ACTIVATE_COOLDOWN_ELAPSED, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetSnareActivateOdds(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SNARE_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSnareImpactDataIndex(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SNARE_IMPACT_DATA_INDEX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSnareActivateCooldown(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SNARE_ACTIVATE_COOLDOWN,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetScanRadius(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SCAN_RADIUS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEffectedObjCount(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_OBJ_COUNT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetFreezeImpactDataIndex(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_FREEZE_IMPACT_DATA_INDEX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_NEAR_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_MAGIC_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistColdRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_COLD_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistFireRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_FIRE_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistLightRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_LIGHT_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistPoisonRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_POISON_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Damages
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			Character *const	pAttacker,
			int32 *const		pDamageList,
			SpellID_t		nSkillID
		) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	IsScanedTargetValid(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DS_HuoQiang010_T;

//游戏中没有用到 这个BUFF是加在怪物身上的 改变怪物的AI类型 并且把BUFF的释放者从怪物的仇恨列表中移除 add by wujianping
typedef class SpellEffect033 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_033, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_AI_TYPE_REFIX = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_AI_TYPE_REFIX = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect033()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect033()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAiTypeRefix(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_AI_TYPE_REFIX);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetAiTypeRefix(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_AI_TYPE_REFIX, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAiTypeRefixInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_AI_TYPE_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_SaMan011_T;

//游戏中没有用到 死亡时 给周围的角色添加一个BUFF
//类似炸弹人的技能 add by wujianping
typedef class SpellEffect034 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_034, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_SCAN_RADIUS = 0, IDX_EFFECTED_OBJ_COUNT, IDX_SUB_IMPACT_DATA_INDEX, };
	};
	enum { };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect034()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect034()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetScanRadius(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SCAN_RADIUS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEffectedObjCount(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_OBJ_COUNT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetSubImpactDataIndex(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT_DATA_INDEX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Die(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	IsScanedTargetValid(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_SaMan017_T;

//被恐惧了 切换到恐惧状态 add by wujianping
typedef class SpellEffect035 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_035, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect035()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect035()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_BoolAttrRefix
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			CharBoolAttrs::Index_T	nIdx,
			BOOL			&rBoolAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_Terror_T;

//游戏中没有用到 反隐 看见隐形的物体 请注意反隐和隐形也是有等级的 add by wujianping
class SpellEffect036 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_036, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_DETECT_LEVEL_REFIX = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect036()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect036()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDetectLevelRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DETECT_LEVEL_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	BOOL	CanViewSpecialObj(UNIT_EFFECT &rImp, SpecialCreature &rObj) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 生命盾 吸收某些BUFF的伤害 但是有吸收次数和生命盾HP的限制 add by wujianping
typedef class SpellEffect037 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_037, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVATE_TIMES = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_ACTIVATE_TIMES = 0, IDX_TARGET_IMPACT_COLLECTION, IDX_SHIELD_HP_REFIX, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect037()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect037()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateTimes(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActivateTimes(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateTimesInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_TIMES,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTargetImpactCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TARGET_IMPACT_COLLECTION,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetShieldHpRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SHIELD_HP_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixEffect(UNIT_EFFECT &rImp, Character &rMe, UNIT_EFFECT &rImpactNeedRefix) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_ShieldEnchance_T;

//啥也没干
class SpellEffect038 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_038, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect038()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect038()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 修正暴击和怒气 add by wujianping
typedef class SpellEffect039 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_039, };
	class OwnImpactParamIndex
	{
	public: enum { };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_CRITICAL_REFIX = 0, IDX_RAGE_REGENERATE_REFIX, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect039()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect039()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetCriticalRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CRITICAL_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageRegenerateRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_REGENERATE_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixRageRegeneration(UNIT_EFFECT const &rImp, int32 &rRageRegeneration) const;
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_WuShi007_T;

//游戏中没有用到 修正自身的速度 攻击目标时有一定概率增加怒气 add by wujianping
typedef class SpellEffect040 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_040, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVATE_TIMES = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_ACTIVATE_TIMES = 0, IDX_MOVE_SPEED_REFIX, IDX_SUB_IMPACT_DATA_INDEX, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect040()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect040()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateTimes(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetActivateTimes(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetActivateTimesInTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_TIMES,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMoveSpeedRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MOVE_SPEED_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSubImpact(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT_DATA_INDEX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	void	OnEvent_HitTarget(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_WuShi013_T;

//攻击输出的修正 add by wujianping
typedef class SpellEffect041 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_041, };
	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_ATTACK_NEAR_REFIX			= 0,
			IDX_DEFENCE_NEAR_REFIX,
			IDX_ATTACK_MAGIC_REFIX,
			IDX_DEFENCE_MAGIC_REFIX,
			IDX_RAGE_REGENERATE_REFIX,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect041()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect041()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAttackNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_NEAR_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_NEAR_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_MAGIC_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_MAGIC_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageRegenerateRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_REGENERATE_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	void	RefixRageRegeneration(UNIT_EFFECT const &rImp, int32 &rRageRegeneration) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_JianXia006_T;

//游戏中没有用到 修正攻击速度 暴击率 无视2个BUFF add by wujianping
typedef class SpellEffect042 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_042, };
	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_ATTACK_SPEED_REFIX			= 0,
			IDX_CRITICAL_RATE_REFIX,
			IDX_IMMUNO_IMPACT_COLLECTION_ONE,
			IDX_IMMUNO_IMPACT_COLLECTION_TWO,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect042()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect042()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAttackSpeedRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_SPEED_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCriticalRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CRITICAL_RATE_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetImmunoImpactCollectionOne(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IMMUNO_IMPACT_COLLECTION_ONE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetImmunoImpactCollectionTwo(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IMMUNO_IMPACT_COLLECTION_TWO,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	int32	OnEvent_FiltrateImpact(UNIT_EFFECT &rImp, Character &rMe, UNIT_EFFECT &rImpactNeedCheck) const;
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_JianXia008_T;

//游戏中没有用到 修正怒气回覆 冰防 火防 电防 毒防 add by wujianping
typedef class SpellEffect043 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_043, };
	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_RAGE_REGENERATE_REFIX		= 0,
			IDX_RESIST_COLD_REFIX,
			IDX_RESIST_FIRE_REFIX,
			IDX_RESIST_LIGHT_REFIX,
			IDX_RESIST_POISON_REFIX,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect043()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect043()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRageRegenerateRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_REGENERATE_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistColdRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_COLD_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistFireRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_FIRE_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistLightRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_LIGHT_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetResistPoisonRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RESIST_POISON_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixRageRegeneration(UNIT_EFFECT const &rImp, int32 &rRageRegeneration) const;
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_JianXia013_T;

//修正移动速度、连击点增加的触发机率、增加的连击点数 add by wujianping
typedef class SpellEffect044 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_044, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_MOVE_SPEED_REFIX = 0, IDX_ACTIVATE_ODDS, IDX_MODIFY_STRIKE_POINT, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect044()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect044()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetMoveSpeedRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MOVE_SPEED_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetActivateOdds(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetModifyStrikePoint(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MODIFY_STRIKE_POINT,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	void	OnEvent_HitTarget(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_QiShe007_T;

//游戏中没有用到 修正怒气恢复的速度 add by wujianping
typedef class SpellEffect045 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_045, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_RAGE_REGENERATION_ADDITIONAL = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect045()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect045()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRageRegenerationAdditional(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_REGENERATION_ADDITIONAL,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixRageRegeneration(UNIT_EFFECT const &rImp, int32 &rRageRegeneration) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_QiShe012_T;

//对某些技能 修正伤害输出 add by wujianping
class SpellEffect046 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_046, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_EFFECTED_SKILL_COLLECTION = 0, IDX_POWER_REFIX_RATE, IDX_RAGE_CONVERT_RATE, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect046()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect046()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetEffectedSkillCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_SKILL_COLLECTION,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetPowerRefixRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_POWER_REFIX_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageConvertRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_CONVERT_RATE,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Damages
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			Character *const	pAttacker,
			int32 *const		pDamageList,
			SpellID_t		nSkillID
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 受到某些技能的伤害的同时 有一定概率给自己添加一个BUFF add by wujianping
class SpellEffect047 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_047, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_EFFECTED_SKILL_COLLECTION = 0, IDX_ACTIVATE_ODDS, IDX_SUB_IMPACT_DATA_INDEX, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect047()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect047()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetEffectedSkillCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_SKILL_COLLECTION,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetActivateOdds(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSubImpactDataIndex(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT_DATA_INDEX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_Damage
			(
				UNIT_EFFECT		&rImp,
				Character		&rMe,
				Character *const	pAttacker,
				int32			&rDamage,
				SpellID_t		nSkillID
			) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 A Buff的消失的同时 产生一个子BUFF注册给自己 add by wujianping
class SpellEffect048 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_048, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_SUB_IMPACT = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect048()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect048()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetSubImpact(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 当攻击一个目标时 某些技能的释放会有一定概率给目标额外注册一个BUFF
//举例说明：A技能伤害目标300点HP并有15%的概率击晕目标2秒钟 add by wujianping
class SpellEffect049 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_049, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_EFFECTED_SKILL_COLLECTION = 0, IDX_ACTIVATE_ODDS, IDX_SUB_IMPACT, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect049()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect049()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetEffectedSkillCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_SKILL_COLLECTION,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetActivateOdds(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_ODDS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSubImpact(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_DamageTarget
		(
			UNIT_EFFECT	&rImp,
			Character	&rMe,
			Character	&rTar,
			int32		&rDamage,
			SpellID_t	nSkillID
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 修正怒气的恢复速度 add by wujianping
class SpellEffect050 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_050, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_RAGE_REGENERATE_REFIX = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect050()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect050()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRageRegenerateRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_REGENERATE_REFIX,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixRageRegeneration(UNIT_EFFECT const &rImp, int32 &rRageRegeneration) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 分身BUFF 检查是否需要删除分身 当主体死亡时 分身需要自己删除自己
//这个BUFF应该是主体和分身都需要加上 add by wujianping
typedef class SpellEffect051 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_051, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_SUMMONER_ID = 0, IDX_SHADOW_GUARD_ID, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_RESERVED, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect051()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect051()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetSummonerID(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_SUMMONER_ID);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetSummonerID(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_SUMMONER_ID, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetShadowGuardID(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_SHADOW_GUARD_ID);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetShadowGuardID(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_SHADOW_GUARD_ID, nValue);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	SpecialHeartBeatCheck(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_ShadowGuard_T;

//陷阱 此BUFF只是用于创建陷阱 并且检查玩家当前释放的陷阱个数是否超出上限 add by wujianping
typedef class SpellEffect052 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum
	{
		ID						= SPELL_EFFECT_052,
		MAX_TRAP_COUNT					= UNIT_EFFECT::MAX_IMPACT_PARAM_NUMBER,
	};
	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_TRAP_START				= 0,
			IDX_TRAP_END				= IDX_TRAP_START +MAX_TRAP_COUNT -1,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect052()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect052()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	ObjID_t GetTrapByIndex(UNIT_EFFECT &rImp, int32 nIdx) const;
	void	SetTrapByIndex(UNIT_EFFECT &rImp, int32 nIdx, ObjID_t nID) const;
	BOOL	AddNewTrap(UNIT_EFFECT &rImp, Character &rMe, ObjID_t nID) const;
	void	GetTrapCountOfSpecificType
		(
			UNIT_EFFECT	&rImp,
			Character	&rMe,
			int32		nType,
			int32		&rAllTypeTotal,
			int32		&rThisTypeCount
		);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual BOOL	SpecialHeartBeatCheck(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_Traps_T;

//游戏中没有用到 把某一冷却组的技能 清除冷却 add by wujianping
typedef class SpellEffect053 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_053, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_COOLDOWN_ID_EXCLUDE = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect053()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect053()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetCooldownExclude(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_COOLDOWN_ID_EXCLUDE,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_AllSkillCooldownExcept_T;

//游戏中没有用到 修正生命、魔法、怒气的恢复速度 add by wujianping
typedef class SpellEffect054 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_054, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_HP_RECOVER_RATE = 0, IDX_MP_RECOVER_RATE, IDX_RAGE_RECOVER_RATE, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect054()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect054()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHpRecoverRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_HP_RECOVER_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMpRecoverRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MP_RECOVER_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageRecoverRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RAGE_RECOVER_RATE,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_Resurrection_T;

//游戏中没有用到 把攻击玩家的某些技能 转移给玩家的分身 并且可以限制转移的次数 add by wujianping
typedef class SpellEffect055 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_055, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_TRANSFER_IMPACT_COUNT = 0, IDX_TRANSFER_COLLECTION_0, IDX_TRANSFER_COLLECTION_1 };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect055()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect055()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetTransferImpactCount(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFER_IMPACT_COUNT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTransferCollection0(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFER_COLLECTION_0,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTransferCollection1(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFER_COLLECTION_1,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_TransferImpactToGuard_T;

//修正命中、闪避、暴击、生命、近攻、近防、魔攻、魔防 add by wujianping
typedef class SpellEffect056 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_056, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_REFIX_TYPE = 0,
			IDX_HIT,
			IDX_MISS,
			IDX_CRITICAL,
			IDX_MAX_HP,
			IDX_ATTACK_NEAR,
			IDX_DEFENCE_NEAR,
			IDX_ATTACK_MAGIC,
			IDX_DEFENCE_MAGIC,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect056()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect056()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
			);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHitRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_HIT,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMissRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MISS,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCriticalRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CRITICAL,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMaxHpRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MAX_HP,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_NEAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceNearRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_NEAR,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_MAGIC,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceMagicRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEFENCE_MAGIC,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
SOT_PetOnlyAttrs_T;

//游戏中没有用到 但是很好的一个BUFF 宠物把生命和魔法转移给主人 并给主人添加一个增益BUFF add by wujianping
typedef class SpellEffect057 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_057, };
	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_DAMAGE_RATE				= 0,
			IDX_TRANSFER_RATE_FOR_HP,
			IDX_TRANSFER_RATE_FOR_MP,
			IDX_SUB_IMPACT_HEAL,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect057()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect057()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DAMAGE_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTransferRateForHp(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFER_RATE_FOR_HP,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTransferRateForMp(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFER_RATE_FOR_MP,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSubImpactHeal(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT_HEAL,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_PetHealthToOwnerHpAndMp_T;

//游戏中没有用到 修正HP, MP, RANGE add by wujianping
typedef class SpellEffect058 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_058, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_HP = 0, IDX_MP, IDX_RAGE, IDX_STRIKE_POINT, };
	};
	SpellEffect058();
	~	SpellEffect058();
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual BOOL IsOverTimed(void) const
	{
		return TRUE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL IsIntervaled(void) const
	{
		return TRUE;
	}

	virtual void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

	virtual void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetHpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_HP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_HP, nValue);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_IntervalOverHurt_T;

//游戏中没有用到 也没有任何实际的逻辑 add by wujianping
typedef class SpellEffect059 :
	public EffectLogic
{
	struct StdImpact059_Ball
	{
		uint32		m_uUniqueID;
		Character	*m_pCharacter;
		StdImpact059_Ball()
		{
			memset(this, 0, sizeof(StdImpact059_Ball));
		}
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_059, };
	SpellEffect059();
	~SpellEffect059();

	virtual BOOL InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual BOOL IsOverTimed(void) const
	{
		return TRUE;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL IsIntervaled(void) const
	{
		return TRUE;
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

	virtual void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	ScanUnitForTarget(UNIT_EFFECT &rImp, Character &rMe, float fX, float fZ, OBJLIST &rTargets) const;

	BOOL	HitThisTarget(Character &rMe, Character &rTar, SpellID_t nSkillID) const;

	BOOL	IsHit(Character &rMe, Character &rTar, int32 nAccuracy) const;
	void	BroadcastTargetListMessage
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			OBJLIST			&rTargets,
			HitFlagsForOBJLIST_T	&rHitFlagsForObjList
		) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSubImpactDataIndexByIndex(UNIT_EFFECT const &rImp, int32 nIndex) const
	{
		return GetEffectDataDescriptorValueByIndex(rImp.GetDataIndex(), nIndex, rImp.GetSkillLevel());
	}

	BOOL	IsCanSendToUnit(UNIT_EFFECT &rImp, Character &rMe, Character *pChar) const;

	void	GetAccuracy(SpellID_t nSkillID) const;

	void	DoHitTarget
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			OBJLIST			&rTargets,
			HitFlagsForOBJLIST_T	&HitFlagList,
			uint32			&nCount
		) const;

	void	SendLayerChangeMsg(UNIT_EFFECT &rImp, Character &rMe) const;

	void	ComputeLayerChange(UNIT_EFFECT &rImp, Character &rMe, int32 nCount, int32 iCurrentLayer) const;

	BOOL	LayerFadeOut(UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	StdImpact059_Ball	m_aBallUniqueID[OBJLIST::MAX_OBJ_LIST_SIZE];
	mutable int32		m_iAccuracy;
} DI_SelfIntervalOverSkill_T;

//修正近远魔冰电火毒的伤害 add by wujianping
typedef class SpellEffect061 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_061, };
	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_DAMAGE_NEAR				= 0,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON,
		};
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_DAMAGE_NEAR				= 0,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect061()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect061()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageNear(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_NEAR);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageNear(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_NEAR, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageFar(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FAR);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageFar(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FAR, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageMagic(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_MAGIC);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageMagic(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_MAGIC, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageCold(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_COLD);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageCold(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_COLD, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageFire(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FIRE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageFire(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FIRE, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageLight(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_LIGHT);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageLight(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_LIGHT, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamagePoison(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_POISON);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamagePoison(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_POISON, nDamage);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	CriticalRefix(UNIT_EFFECT &rImp) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	InitDamages(UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
}
DI_DamagesByRate_T;

//修正自身的HP(生命)和RAGE(怒气) add by wujianping
class SpellEffect062 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_062, };

	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_REFIX_HP				= 0,
			IDX_REFIX_RATE
		};
	};

	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_REFIX_TYPE				= 0,
			IDX_REFIX_HP,
			IDX_REFIX_RAGE0,
			IDX_REFIX_RAGE1,
			IDX_REFIX_RAGE2,
			IDX_REFIX_RAGE3,
			IDX_REFIX_RAGE4,
			IDX_REFIX_RAGE5,
			IDX_REFIX_RATE
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect062()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect062()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */

	//int32 GetHP(UNIT_EFFECT const &rImp) const
	//{
	//	return rImp.GetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_HP);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//void SetHP(UNIT_EFFECT &rImp, int32 const nDamage) const
	//{
	//	rImp.SetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_HP, nDamage);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//int32 GetRage0(UNIT_EFFECT const &rImp) const
	//{
	//	return rImp.GetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE0);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//void SetRage0(UNIT_EFFECT &rImp, int32 const nDamage) const
	//{
	//	rImp.SetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE0, nDamage);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//int32 GetRage1(UNIT_EFFECT const &rImp) const
	//{
	//	return rImp.GetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE1);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//void SetRage1(UNIT_EFFECT &rImp, int32 const nDamage) const
	//{
	//	rImp.SetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE1, nDamage);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//int32 GetRage2(UNIT_EFFECT const &rImp) const
	//{
	//	return rImp.GetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE2);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//void SetRage2(UNIT_EFFECT &rImp, int32 const nDamage) const
	//{
	//	rImp.SetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE2, nDamage);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//int32 GetRage3(UNIT_EFFECT const &rImp) const
	//{
	//	return rImp.GetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE3);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//void SetRage3(UNIT_EFFECT &rImp, int32 const nDamage) const
	//{
	//	rImp.SetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE3, nDamage);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//int32 GetRage4(UNIT_EFFECT const &rImp) const
	//{
	//	return rImp.GetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE4);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//void SetRage4(UNIT_EFFECT &rImp, int32 const nDamage) const
	//{
	//	rImp.SetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE4, nDamage);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//int32 GetRage5(UNIT_EFFECT const &rImp) const
	//{
	//	return rImp.GetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE5);
	//}

	///*
	// ===============================================================================================================
	// ===============================================================================================================
	// */
	//void SetRage5(UNIT_EFFECT &rImp, int32 const nDamage) const
	//{
	//	rImp.SetParamByIndex(ImpactDataDescriptorIndex::IDX_REFIX_RAGE5, nDamage);
	//}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
			);
	}

	int32 GetHP(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_HP,
			rImp.GetSkillLevel()
			);
	}

	int32 GetRage0(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE0,
			rImp.GetSkillLevel()
			);		
	}

	int32 GetRage1(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE1,
			rImp.GetSkillLevel()
			);
	}

	int32 GetRage2(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE2,
			rImp.GetSkillLevel()
			);
	}

	int32 GetRage3(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE3,
			rImp.GetSkillLevel()
			);
	}

	int32 GetRage4(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE4,
			rImp.GetSkillLevel()
			);
	}

	int32 GetRage5(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE5,
			rImp.GetSkillLevel()
			);
	}

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetOwnRefix(UNIT_EFFECT const &rImp, int32 iType) const
	{
		return rImp.GetParamByIndex(iType);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	void SetOwnRefix(UNIT_EFFECT &rImp, int32 iType, int32 const nDamage) const
	{
		rImp.SetParamByIndex(iType, nDamage);
	};


/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	//void	InitDamages(UNIT_EFFECT &rImp) const;
	int32	GetRifixResult(int32 iBase, int32 iRefix, int32 iRefixType) const;
	int32	GetRageByZhiYe(UNIT_EFFECT &rImp, int32 iZhiYe) const;
	int32	GetDamageRefix(Character *pImpactSender, UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//对攻击的修正并且是DOT类型的BUFF 实际对应的效果，如：每2秒产生18点近攻伤害，持续12秒。自身近攻伤害计算比率35%，目标近防计算比率21%
//add by wujianping
class SpellEffect063 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_063, };

	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_DAMAGE_NEAR				= 0,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON,
		};
	};

	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_REFIX_TYPE				= 0,
			IDX_REFIX_DAMAGE_TYPE,
			IDX_REFIX_PARA,
			IDX_REFIX_ATTACK_WEIGHT,
			IDX_REFIX_DEFENCE_WEIGHT,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect063()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect063()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_DAMAGE_TYPE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDamagePara(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_PARA,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackWeight(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_ATTACK_WEIGHT,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceWeight(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_DEFENCE_WEIGHT,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDamagePoint(UNIT_EFFECT const &rImp, int32 iType) const
	{
		return rImp.GetParamByIndex(iType);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamagePoint(UNIT_EFFECT &rImp, int32 iType, int32 const nDamage) const
	{
		rImp.SetParamByIndex(iType, nDamage);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	int32	GetRifixResult(int32 iBase, int32 iRefix, int32 iRefixType) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 被攻击时有一定的概率忽略某些技能 add by wujianping
class SpellEffect064 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_064, };
	enum { TargetTypeMe = 0, TargetTypeOther };
	enum { EffectTypeOnSkillSuccess = 0, EffectTypeOnBeHit };

	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_EFFECT_RATE				= 0,
			IDX_EFFECTED_SKILL_COLLECTION,
			IDX_EFFECT_TYPE,
			IDX_TARGET_TYPE,
			IDX_SKILL_ID,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect064()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect064()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetEffectRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECT_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEffectedSkillCollection(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_SKILL_COLLECTION,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEffectType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECT_TYPE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTargetType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TARGET_TYPE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSkillID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SKILL_ID,
			rImp.GetSkillLevel()
		);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_Damage
			(
				UNIT_EFFECT		&rImp,
				Character		&rMe,
				Character *const	pAttacker,
				int32			&rDamage,
				SpellID_t		nSkillID
			) const;

	virtual void	OnEvent_UseSkillSuccessfully(UNIT_EFFECT &rImp, Character &rMe, SpellInfo &rSkill) const;
	virtual void	OnEvent_BeHit(UNIT_EFFECT &rImp, Character &rMe, Character &rAttacker) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	IsHappend(Character &rMe, UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//在某一事件发生时有一定的概率在目标身上注册一个BUFF。
//add by wujianping
class SpellEffect065 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_065, };

	enum
	{
		EffectTypeOnBeCriticalHit			= 0,
		EffectTypeOnBeHeal,
		EffectTypeOnCriticalHitTarget,
		EffectTypeOnDamages,
		EffectTypeOnDamage,
		EffectTypeOnDamageTarget,
		EffectTypeOnDie,
		EffectTypeOnFadeOut,
		EffectTypeOnHealTarget,
		EffectTypeOnBeHit,
		EffectTypeOnHitTarget,
		EffectTypeOnIntervalOver,
		EffectTypeOnUseSkillSuccessfully
	};

	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_EFFECT_RATE = 0, IDX_EFFECT_TYPE, IDX_IMPACT_ID, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect065()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect065()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetEffectRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECT_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEffectType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECT_TYPE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetImpactID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IMPACT_ID,
			rImp.GetSkillLevel()
		);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_BeCriticalHit(UNIT_EFFECT &rImp, Character &rMe) const;
	virtual void	OnEvent_BeHeal(UNIT_EFFECT &rImp, Character &rMe, int32 &nHealedHP) const;
	virtual void	OnEvent_CriticalHitTarget(UNIT_EFFECT &rImp, Character &rMe) const;
	virtual void	OnEvent_Damages
			(
				UNIT_EFFECT		&rImp,
				Character		&rMe,
				Character *const	pAttacker,
				int32 *const		pDamageList,
				SpellID_t		nSkillID
			) const;
	virtual void	OnEvent_Damage
			(
				UNIT_EFFECT		&rImp,
				Character		&rMe,
				Character *const	pAttacker,
				int32			&rDamage,
				SpellID_t		nSkillID
			) const;

	virtual void	OnEvent_DamageTarget
			(
				UNIT_EFFECT	&rImp,
				Character	&rMe,
				Character	&rTar,
				int32		&rDamage,
				SpellID_t	nSkillID
			) const;
	virtual void	OnEvent_Die(UNIT_EFFECT &rImp, Character &rMe) const;
	virtual void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;
	virtual void	OnEvent_HealTarget(UNIT_EFFECT &rImp, Character &rMe, int32 &rHealedHP) const;
	virtual void	OnEvent_BeHit(UNIT_EFFECT &rImp, Character &rMe, Character &rAttacker) const;
	virtual void	OnEvent_HitTarget(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;
	virtual void	OnEvent_UseSkillSuccessfully(UNIT_EFFECT &rImp, Character &rMe, SpellInfo &rSkill) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	IsHappend(Character &rMe, UNIT_EFFECT &rImp) const;
	BOOL	IsCanHappen(UNIT_EFFECT &rImp, int32 iEffectType, SpellID_t nSkillID, Character &rMe) const;
	void	SendImpactToMe(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//在某一事件发生时有一定的概率对目标使用一个技能。
//如：玄石之盾在受到攻击时有10%的几率让攻击者受到迟缓效果，持续3秒
//add by wujianping
class SpellEffect066 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_066, };

	enum { TargetTypeMe = 0, TargetTypeOther };
	enum
	{
		EffectTypeOnBeCriticalHit			= 0,
		EffectTypeOnBeHeal,
		EffectTypeOnCriticalHitTarget,
		EffectTypeOnDamages,
		EffectTypeOnDamage,
		EffectTypeOnDamageTarget,
		EffectTypeOnDie,
		EffectTypeOnFadeOut,
		EffectTypeOnHealTarget,
		EffectTypeOnBeHit,
		EffectTypeOnHitTarget,
		EffectTypeOnIntervalOver,
		EffectTypeOnUseSkillSuccessfully
	};

	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_EFFECT_RATE = 0, IDX_EFFECT_TYPE, IDX_TARGET_TYPE, IDX_SKILL_ID, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect066()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect066()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetEffectRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECT_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetTargetType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TARGET_TYPE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetEffectType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECT_TYPE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSkillID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SKILL_ID,
			rImp.GetSkillLevel()
		);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	virtual void	OnEvent_BeCriticalHit(UNIT_EFFECT &rImp, Character &rMe) const;
	virtual void	OnEvent_BeHeal(UNIT_EFFECT &rImp, Character &rMe, int32 &nHealedHP) const;
	virtual void	OnEvent_CriticalHitTarget(UNIT_EFFECT &rImp, Character &rMe) const;
	virtual void	OnEvent_Damages
			(
				UNIT_EFFECT		&rImp,
				Character		&rMe,
				Character *const	pAttacker,
				int32 *const		pDamageList,
				SpellID_t		nSkillID
			) const;
	virtual void	OnEvent_Damage
			(
				UNIT_EFFECT		&rImp,
				Character		&rMe,
				Character *const	pAttacker,
				int32			&rDamage,
				SpellID_t		nSkillID
			) const;

	virtual void	OnEvent_DamageTarget
			(
				UNIT_EFFECT	&rImp,
				Character	&rMe,
				Character	&rTar,
				int32		&rDamage,
				SpellID_t	nSkillID
			) const;
	virtual void	OnEvent_Die(UNIT_EFFECT &rImp, Character &rMe) const;
	virtual void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;
	virtual void	OnEvent_HealTarget(UNIT_EFFECT &rImp, Character &rMe, int32 &rHealedHP) const;
	virtual void	OnEvent_BeHit(UNIT_EFFECT &rImp, Character &rMe, Character &rAttacker) const;
	virtual void	OnEvent_HitTarget(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;
	virtual void	OnEvent_UseSkillSuccessfully(UNIT_EFFECT &rImp, Character &rMe, SpellInfo &rSkill) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL		IsHappend(Character &rMe, UNIT_EFFECT &rImp) const;
	BOOL		IsCanHappen(UNIT_EFFECT &rImp, int32 iEffectType, SpellID_t nSkillID, Character &rMe) const;
	void		SendSkillToTarget(UNIT_EFFECT &rImp, Character &rMe, Character &rAttacker) const;

	Character	*GetAttackerTarget(Character &rMe, UNIT_EFFECT &rImp) const;

	Character	*GetBeHitTarget(Character &rMe, UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//马属性影响玩家的属性 比如：体制、力量、敏捷、智力 add by wujianping
class SpellEffect067 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_067, };

	class ImpactDataDescriptorIndex
	{
	public: enum { IMPACT_TYPE_ID = 0, IMPACT_PARA_ID, IMPACT_REFIX_RATE, IMPACT_MAX_REFIX };
	};
	enum { MAX_REFIX = 5 };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect067()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect067()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixType(UNIT_EFFECT const &rImp, int32 iIndex) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IMPACT_TYPE_ID +
				ImpactDataDescriptorIndex::IMPACT_MAX_REFIX *
				iIndex,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixParaID(UNIT_EFFECT const &rImp, int32 iIndex) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IMPACT_PARA_ID +
				ImpactDataDescriptorIndex::IMPACT_MAX_REFIX *
				iIndex,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixRate(UNIT_EFFECT const &rImp, int32 iIndex) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IMPACT_REFIX_RATE +
				ImpactDataDescriptorIndex::IMPACT_MAX_REFIX *
				iIndex,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;

	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	MarkDirtyFlag(UNIT_EFFECT &rImp, Character &rMe, int32 iType) const;
	int32	FindIndex(UNIT_EFFECT &rImp, Character &rMe, int32 iType) const;

	int32	GetRefixResult(UNIT_EFFECT &rImp, Character &rMe, int32 iType) const;
	int32	GetRefixPara(UNIT_EFFECT &rImp, Character &rMe, int32 iIndex) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//通过马的某一个属性修正玩家的近远魔冰火电毒的输出伤害 add by wujianping
class SpellEffect068 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_068, };
	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_PARA_ID				= 0,
			IDX_REFIX_RATE,
			IDX_DAMAGE_NEAR,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON,
		};
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_PARA_ID				= 0,
			IDX_REFIX_RATE,
			IDX_DAMAGE_NEAR,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect068()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect068()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetParaID(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_PARA_ID);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetParaID(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_PARA_ID, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageNear(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_NEAR);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	void SetDamageNear(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_NEAR, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageFar(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FAR);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageFar(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FAR, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageMagic(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_MAGIC);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageMagic(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_MAGIC, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageCold(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_COLD);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageCold(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_COLD, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageFire(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FIRE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageFire(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FIRE, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageLight(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_LIGHT);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageLight(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_LIGHT, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamagePoison(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_POISON);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamagePoison(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_POISON, nDamage);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

	void	CriticalRefix(UNIT_EFFECT &rImp) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	InitImpact(UNIT_EFFECT &rImp) const;
	int32	GetRefixPara(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 修正近远魔冰火电毒的输出伤害 add by wujianping
class SpellEffect069 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_069, };
	class OwnImpactParamIndex
	{
	public:
		enum
		{
			IDX_PARA_ID				= 0,
			IDX_REFIX_RATE,
			IDX_DAMAGE_NEAR,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON,
		};
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_PARA_ID				= 0,
			IDX_REFIX_RATE,
			IDX_DAMAGE_NEAR,
			IDX_DAMAGE_FAR,
			IDX_DAMAGE_MAGIC,
			IDX_DAMAGE_COLD,
			IDX_DAMAGE_FIRE,
			IDX_DAMAGE_LIGHT,
			IDX_DAMAGE_POISON,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect069()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect069()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetParaID(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_PARA_ID);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetParaID(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_PARA_ID, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageNear(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_NEAR);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageNear(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_NEAR, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageFar(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FAR);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageFar(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FAR, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageMagic(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_MAGIC);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageMagic(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_MAGIC, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageCold(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_COLD);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageCold(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_COLD, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageFire(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FIRE);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageFire(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_FIRE, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageLight(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_LIGHT);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamageLight(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_LIGHT, nDamage);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamagePoison(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_POISON);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamagePoison(UNIT_EFFECT &rImp, int32 const nDamage) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_DAMAGE_POISON, nDamage);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

	void	CriticalRefix(UNIT_EFFECT &rImp) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	InitDamages(UNIT_EFFECT &rImp) const;
	int32	GetRefixPara(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//游戏中没有用到 通过马的某一属性 修正玩家的伤害和防御 add by wujianping
class SpellEffect070 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_070, };

	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_REFIX_TYPE				= 0,
			IDX_REFIX_PARA_HORSE,
			IDX_REFIX_RATE,
			IDX_REFIX_DAMAGE_TYPE,
			IDX_REFIX_PARA,
			IDX_REFIX_ATTACK_WEIGHT,
			IDX_REFIX_DEFENCE_WEIGHT
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect070()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect070()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamageType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_DAMAGE_TYPE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDamagePara(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_PARA,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAttackWeight(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_ATTACK_WEIGHT,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDefenceWeight(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_DEFENCE_WEIGHT,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetParaID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_PARA_HORSE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDamagePoint(UNIT_EFFECT const &rImp, int32 iType) const
	{
		return rImp.GetParamByIndex(iType);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetDamagePoint(UNIT_EFFECT &rImp, int32 iType, int32 const nDamage) const
	{
		rImp.SetParamByIndex(iType, nDamage);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	int32	GetRifixResult(int32 iBase, int32 iRefix, int32 iRefixType) const;

	int32	GetRefixPara(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//此BUFF为马给玩家的加成BUFF 通过马的某一个属性修正玩家的生命、怒气的恢复 可以通过百分比或者数值的方式修正 add by wujianping
class SpellEffect071 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_071, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_IMPACT_DAMAGE_REFIX = 0, IDX_HORSE_REFIX, IDX_HP_BASE };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_REFIX_TYPE				= 0,
			IDX_REFIX_PARA_HORSE,
			IDX_REFIX_RATE_HORSE,
			IDX_REFIX_HP,
			IDX_REFIX_RAGE0,
			IDX_REFIX_RAGE1,
			IDX_REFIX_RAGE2,
			IDX_REFIX_RAGE3,
			IDX_REFIX_RAGE4,
			IDX_REFIX_RAGE5,
			IDX_REFIX_RATE
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect071()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect071()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHP(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_HP,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage0(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE0,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage1(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE1,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage2(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE2,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage3(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE3,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage4(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE4,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage5(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RAGE5,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetParaID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_PARA_HORSE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixRateHorse(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RATE_HORSE,
			rImp.GetSkillLevel()
		);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	InitDamageRefix(UNIT_EFFECT &rImp, Character &rMe) const;
	int32	GetDamageRefix(UNIT_EFFECT &rImp) const;
	void	InitHorseRefix(UNIT_EFFECT &rImp, Character &rMe) const;
	int32	GetHorsePara(UNIT_EFFECT &rImp) const;
	void	InitHPBase(UNIT_EFFECT &rImp, Character &rMe) const;
	int32	GetHPBase(UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	InitDamages(UNIT_EFFECT &rImp) const;
	int32	GetRifixResult(int32 iBase, int32 iRefix, int32 iRefixType) const;
	int32	GetRageByZhiYe(UNIT_EFFECT &rImp, int32 iZhiYe) const;
	int32	GetRefixPara(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//瞬移 add by wujianping
class SpellEffect072 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_072, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_DISTANCE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_DISTANCE = 0, IDX_CHANGE_POS_WITH_SENDER};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect072()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect072()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDistance(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DISTANCE,
			rImp.GetSkillLevel()
		);
	};

	BOOL IsChangePosWithEffectSender(UNIT_EFFECT const &rImp) const
	{
		return 1 == GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHANGE_POS_WITH_SENDER,
			rImp.GetSkillLevel()
			);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	GetRealPos(Character &rMe, GLPos &sFinalPos, GLPos &sPosTag, GLPos &sDir) const;
	void	GetFinalPos
		(
			UNIT_EFFECT	&rImp,
			Character	&rMe,
			GLPos	&sFinalPos,
			GLPos	&sDir,
			GLPos	&sPosTag,
			GLPos	&oTargetPos,
			float		fDistance
		) const;
	BOOL	GetTargetPos(UNIT_EFFECT &rImp, Character &rMe, GLPos &oTargetPos, float &fDistance) const;
	void	TeleportToTarget(Character &rMe, const GLPos &sPosTag) const;
	float	GetFinalDistance(Character &rMe, GLPos &oMyPos, GLPos &oTargetPos, float fMaxDistance) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//生命和怒气的恢复 add by wujianping
class SpellEffect073 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_073, };

	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_HP_RECOVER				= 0,
			IDX_REGE0_RECOVER,
			IDX_REGE1_RECOVER,
			IDX_REGE2_RECOVER,
			IDX_REGE3_RECOVER,
			IDX_REGE4_RECOVER,
			IDX_REGE5_RECOVER,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect073()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect073()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetHPRecoverRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_HP_RECOVER,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRege0RecoverRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REGE0_RECOVER,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRege1RecoverRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REGE1_RECOVER,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRege2RecoverRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REGE2_RECOVER,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRege3RecoverRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REGE3_RECOVER,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRege4RecoverRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REGE4_RECOVER,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRege5RecoverRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REGE5_RECOVER,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//此BUFF为马给玩家的加成BUFF 通过马的某一个属性修正玩家的生命、魔法、怒气的恢复 add by wujianping
class SpellEffect074 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_074, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_HP, IDX_MP, IDX_RAGE, IDX_RAGE1, IDX_RAGE2, IDX_RAGE3, IDX_RAGE4, IDX_RAGE5, IDX_REFIX_RATE, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_REFIX_TYPE				= 0,
			IDX_PARA_ID,
			IDX_REFIX_RATE_HORSE,
			IDX_HP,
			IDX_MP,
			IDX_RAGE,
			IDX_RAGE1,
			IDX_RAGE2,
			IDX_RAGE3,
			IDX_RAGE4,
			IDX_RAGE5,
			IDX_REFIX_RATE
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect074()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect074()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetRefixType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetParaID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_PARA_ID,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixRateHorse(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_RATE_HORSE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetHpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_HP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetHpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_HP, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMpModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_MP);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetMpModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_MP, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRageModification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRageModification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage1Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE1);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage1Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE1, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage2Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE2);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage2Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE2, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage3Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE3);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage3Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE3, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage4Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE4);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage4Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE4, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRage5Modification(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_RAGE5);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRage5Modification(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_RAGE5, nValue);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixRate(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	void SetRefixRate(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_RATE, nValue);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	int32	GetDamageRefix(Character *pImpactSender, UNIT_EFFECT &rImp) const;
	int32	GetRefixPara(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//修正技能的冷却时间、聚气时间、引导时间、技能的消耗、引导技能的连续攻击次数或引导时间间隔、
//命中率、暴击率、最大目标搜索个数、引导时间减少的比例、引导时间减少的概率 add by wujianping
class SpellEffect075 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_075, };

	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_TARGET_SKILL_ID			= 0,
			IDX_REFIX_TYPE,
			IDX_COOLDOWN_TIME_REFIX,
			IDX_CHARGE_TIME_REFIX,
			IDX_CHANNEL_TIME_REFIX,
			IDX_DEPLETE_REFIX,
			IDX_ATTACK_TIMES_OR_CHANNEL_TIME,
			IDX_ACCURACY,
			IDX_CRITICALRATE,
			IDX_MAX_TARGET,
			IDX_CHANNEL_BACK_RATE,
			IDX_CHANNEL_BACK_HAPPAN_RATE,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect075()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect075()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetTargetSkillID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TARGET_SKILL_ID,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetRefixType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCooldownTimeRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_COOLDOWN_TIME_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChargeTimeRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHARGE_TIME_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetChannelTimeRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHANNEL_TIME_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDepleteRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_DEPLETE_REFIX,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetAttackTimesOrChannelTimeRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ATTACK_TIMES_OR_CHANNEL_TIME,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetAccuracyRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACCURACY,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetCriticalrateRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CRITICALRATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMaxTargetRefix(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MAX_TARGET,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetChannelBackRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHANNEL_BACK_RATE,
			rImp.GetSkillLevel()
		);
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetChannelBackHappanRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CHANNEL_BACK_HAPPAN_RATE,
			rImp.GetSkillLevel()
		);
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	RefixSkill(UNIT_EFFECT &rImp, SpellInfo &rSkill) const;

	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	RefixAllSkillAttr(SpellInfo &rSkill, UNIT_EFFECT &rImp) const;
	int32	GetRifixResult(int32 iBase, int32 iRefix, int32 iRefixType) const;
	float	GetRifixResult(float fBase, float fRefix, int32 iRefixType) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//召唤兽相关 如模型ID、存活时间、召唤兽自身添加的BUFF、主人身上添加的BUFF
//召唤兽的4个技能ID、最大可召唤的个数、召唤兽的属性是按照百分比的方式继承主人的。
//add by wujianping
class SpellEffect076 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_076, };

	class ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_MONSTER_ID				= 0,
			IDX_LEFE_TIME,
			IDX_IMPACT_SELF,
			IDX_IMPACT_ONWER,
			IDX_SKILL1_ID,
			IDX_SKILL2_ID,
			IDX_SKILL3_ID,
			IDX_SKILL4_ID,
			IDX_MAX_CAN_TAKE_PET,
			IDX_ONWER_LIFE_RATE,
			IDX_ONWER_ATTACK_RATE,
			IDX_ONWER_DEFANCE_RATE,
			IDX_ONWER_MISS_RATE,
			IDX_ONWER_TOUGHNESS_RATE,
			IDX_ONWER_CRITICAL_RATE,
			IDX_ONWER_HIT_RATE,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect076()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect076()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetMonsterID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MONSTER_ID,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetLifeTime(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_LEFE_TIME,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetImpactSelf(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IMPACT_SELF,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetImpactOnwer(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IMPACT_ONWER,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSkillIDByIndex(UNIT_EFFECT const &rImp, int32 iIndex) const
	{
		return GetEffectDataDescriptorValueByIndex(rImp.GetDataIndex(), iIndex, rImp.GetSkillLevel());
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMaxCanTake(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_MAX_CAN_TAKE_PET,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetOnwerAttackRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ONWER_ATTACK_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetOnwerLifeRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ONWER_LIFE_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetOnwerDefanceRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ONWER_DEFANCE_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetOnwerMissRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ONWER_MISS_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetOnwerToughnessRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ONWER_TOUGHNESS_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetOnwerCriticalRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ONWER_CRITICAL_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetOnwerHitRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ONWER_HIT_RATE,
			rImp.GetSkillLevel()
		);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	CriticalRefix(UNIT_EFFECT &rImp) const;
	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	void	InitAttr(_MONSTER_PET_ATTR *pInit, UNIT_EFFECT &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//马变身 屠城战会用到 add by wujianping
class SpellEffect077 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_077, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDD_CHANGE_FADE_MODEL_ID = 0, IDD_SKILL_ID };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect077()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect077()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetChangeFadeModelID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_CHANGE_FADE_MODEL_ID,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetSkillID(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_SKILL_ID,
			rImp.GetSkillLevel()
		);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;

	BOOL	RefixPowerByRate(UNIT_EFFECT &rImp, int32 nRate) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	BOOL	IsCanUseThisSkill(Character &rMe) const;
};

//双倍经验 修正装备耐久 修正马的快乐度 修正摆摊税
//修正活力的恢复修正最大活力 修正马的快乐度恢复add by wujianping
class SpellEffect078 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_078, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_RATE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDD_EXT_MULT				= 0,
			IDD_ITEM_DUR,
			IDD_HORSE_HAPPINESS,
			IDD_STALL_EXCHANGE_TAX,
			IDD_VIGOR_INC_RATE,
			IDD_MAX_VIGOR,
			IDD_HORSE_HAPPINESS_PLUS,
		};
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect078()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect078()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetExpMult(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_EXT_MULT,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetItemDurability(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_ITEM_DUR,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetHorseHappiness(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_HORSE_HAPPINESS,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetHorseHappinessPlus(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_HORSE_HAPPINESS_PLUS,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetBaiTanExchangeTax(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_STALL_EXCHANGE_TAX,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetVigorIncRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_VIGOR_INC_RATE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 Get_Property_MaxVigor(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_MAX_VIGOR,
			rImp.GetSkillLevel()
		);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
			UNIT_EFFECT			&rImp,
			Character			&rMe,
			CharIntAttrRefixs::Index_T	nIdx,
			int32				&rIntAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//间歇发作的脚本BUFF add by wujianping
class SpellEffect079 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_079, };

	class ImpactDataDescriptorIndex
	{
	public: enum { IDD_SCRIPT_ID = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect079()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect079()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

	int32	GetScriptID(UNIT_EFFECT const &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	CommonCheck(Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//对一个范围的群伤BUFF add by wujianping
class SpellEffect080 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_080, };

	class ImpactDataDescriptorIndex
	{
	public: enum { IDD_DAMAGE = 0, IDD_RADIUS, IDD_MAX_TARGET };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect080()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect080()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	int32 GetDamagePoint(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_DAMAGE,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetDamageRadius(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_RADIUS,
			rImp.GetSkillLevel()
		);
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	int32 GetMaxTarget(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
		(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDD_MAX_TARGET,
			rImp.GetSkillLevel()
		);
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void		OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;

	virtual BOOL	IsScanedTargetValid(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	CommonCheck(Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//执行脚本的BUFF add by wujianping
class SpellEffect081 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_081, };

	class ImpactDataDescriptorIndex
	{
	public: enum { IDD_SCRIPT_ID = 0, };
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect081()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect081()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return FALSE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

	int32	GetScriptID(UNIT_EFFECT const &rImp) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	CommonCheck(Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//帮战 骑马相关 add by wujianping
class SpellEffect082 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_082, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect082()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect082()
	{
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

//忽视伤免 add by wujianping
class SpellEffect083 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_083, };

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	SpellEffect083()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect083()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;
	void	OnEvent_Active(UNIT_EFFECT &rImp, Character &rMe) const;
	void	OnEvent_FadeOut(UNIT_EFFECT &rImp, Character &rMe) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_BoolAttrRefix
		(
			UNIT_EFFECT		&rImp,
			Character		&rMe,
			CharBoolAttrs::Index_T	nIdx,
			BOOL			&rBoolAttrRefix
		) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	BOOL	CommonCheck(Character &rMe) const;
	void	WeddingLogic(Character &rMe) const;
};

class SpellEffect084 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_084, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_DAMAGE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public:
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SpellEffect084()
	{
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	~SpellEffect084()
	{
	};

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual BOOL IsRefixPetInit() const
	{
		return TRUE;
	}

	virtual int32	GetRefixPetInitPara(int32 iType, UNIT_EFFECT &rImp, UNIT_EFFECT &rImpOut) const;

	int32		GetParaValue(int32 iType, UNIT_EFFECT &rImp) const;;
};

class SpellEffect060 :
	public EffectLogic
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum { ID = SPELL_EFFECT_060, };

	virtual BOOL InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */

	virtual BOOL IsIntervaled(void) const
	{
		return FALSE;
	};
	virtual void	OnEvent_UseSkillSuccessfully(UNIT_EFFECT &rImp, Character &rMe, SpellInfo &rSkill) const;

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	int32	IsSubSkillCanSuccess(int32 iRate, Character &rMe) const;
};

class SpellEffect085 :
public EffectLogic
{
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	enum { ID = SPELL_EFFECT_085, };

	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_IGNORE_NEAR		= 0,
			IDX_IGNORE_FAR,
			IDX_IGNORE_MAGIC,
		};
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	SpellEffect085()
	{
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	~SpellEffect085()
	{
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	void MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	virtual BOOL Get_Property_IntAttrRefix
		(
		UNIT_EFFECT			&rImp,
		Character			&rMe,
		CharIntAttrRefixs::Index_T	nIdx,
		int32				&rIntAttrRefix
		) const;

	int32 GetIgnoreNearImmunity(UNIT_EFFECT &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IGNORE_NEAR,
			rImp.GetSkillLevel()
			);
	};

	int32 GetIgnoreFarImmunity(UNIT_EFFECT &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IGNORE_FAR,
			rImp.GetSkillLevel()
			);
	};

	int32 GetIgnoreMagicImmunity(UNIT_EFFECT &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_IGNORE_MAGIC,
			rImp.GetSkillLevel()
			);
	};
};

//实现属性按百分比转化为其他属性 add by wujianping
class SpellEffect086 :
	public EffectLogic
{
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	enum { ID = SPELL_EFFECT_086, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_REFIX_VALUE = 0, };
	};
	class	ImpactDataDescriptorIndex
	{
	public: enum { IDX_TRANSFORM_SOURCE = 0, IDX_TRANSFORM_DEST, IDX_TRANSFORM_RATE, };
	};

	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	int32 GetRefixValue(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_REFIX_VALUE);
	};

	void SetRefixValue(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_REFIX_VALUE, nValue);
	};

	int32 GetTransformSourceFromTable(UNIT_EFFECT &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFORM_SOURCE,
			rImp.GetSkillLevel()
			);
	};

	int32 GetTransformSourceAttrType(UNIT_EFFECT &rImp) const
	{
		 int32 nArg = GetTransformSourceFromTable(rImp);

		 switch(nArg)
		 {
			case -1:	return -1;
			case 1:		return CharIntAttrRefixs::REFIX_PROPERTY_ATTACK_NEAR;
			case 2:		return CharIntAttrRefixs::REFIX_PROPERTY_DEFENCE_NEAR;
			case 3:		return CharIntAttrRefixs::REFIX_PROPERTY_ATTACK_FAR;
			case 4:		return CharIntAttrRefixs::REFIX_PROPERTY_DEFENCE_FAR;
			case 5:		return CharIntAttrRefixs::REFIX_PROPERTY_ATTACK_MAGIC;
			case 6:		return CharIntAttrRefixs::REFIX_PROPERTY_DEFENCE_MAGIC;
			case 7:		return CharIntAttrRefixs::REFIX_PROPERTY_HIT;
			case 8:		return CharIntAttrRefixs::REFIX_PROPERTY_MISS;
			case 9:		return CharIntAttrRefixs::REFIX_PROPERTY_TOUGHNESS;
			case 10:	return CharIntAttrRefixs::REFIX_PROPERTY_CRITICAL;
			default:	return -1;
		 }

		 return -1;

	};

	int32 GetTransformSourceAttrValue(UNIT_EFFECT &rImp, Character &rMe) const;

	int32 GetTransformDestFromTable(UNIT_EFFECT &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFORM_DEST,
			rImp.GetSkillLevel()
			);
	};

	int32 GetTransformDestAttrType(UNIT_EFFECT &rImp) const
	{
		int32 nArg = GetTransformDestFromTable(rImp);

		switch(nArg)
		{
		case -1:	return -1;
		case 1:		return CharIntAttrRefixs::REFIX_PROPERTY_ATTACK_NEAR;
		case 2:		return CharIntAttrRefixs::REFIX_PROPERTY_DEFENCE_NEAR;
		case 3:		return CharIntAttrRefixs::REFIX_PROPERTY_ATTACK_FAR;
		case 4:		return CharIntAttrRefixs::REFIX_PROPERTY_DEFENCE_FAR;
		case 5:		return CharIntAttrRefixs::REFIX_PROPERTY_ATTACK_MAGIC;
		case 6:		return CharIntAttrRefixs::REFIX_PROPERTY_DEFENCE_MAGIC;
		case 7:		return CharIntAttrRefixs::REFIX_PROPERTY_HIT;
		case 8:		return CharIntAttrRefixs::REFIX_PROPERTY_MISS;
		case 9:		return CharIntAttrRefixs::REFIX_PROPERTY_TOUGHNESS;
		case 10:	return CharIntAttrRefixs::REFIX_PROPERTY_CRITICAL;
		default:	return -1;
		}

		return -1;

	};

	int32 GetTransformRate(UNIT_EFFECT &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_TRANSFORM_RATE,
			rImp.GetSkillLevel()
			);
	};

public:
	void	MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	Get_Property_IntAttrRefix
		(
		UNIT_EFFECT			&rImp,
		Character			&rMe,
		CharIntAttrRefixs::Index_T	nIdx,
		int32				&rIntAttrRefix
		) const;

};

//经过间隔时间，将周围Player增加一个Effect add by shangy
typedef class SpellEffect087 :
public EffectLogic
{
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	enum { ID = SPELL_EFFECT_087, };
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_REFIX_TYPE = 0, IDX_REFIX_HP, IDX_SCAN_RADIUS, IDX_EFFECTED_OBJ_COUNT, IDX_SUB_IMPACT_DATA_INDEX };
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	SpellEffect087()
	{
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	~SpellEffect087()
	{
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/	int32 GetScanRadius(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SCAN_RADIUS,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetEffectedObjCount(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_OBJ_COUNT,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/

	int32 GetSubImpactDataIndex(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT_DATA_INDEX,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixHP(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_HP,
			rImp.GetSkillLevel()
			);
	};
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	IsScanedTargetValid(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;

	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
protected:
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
private:
	int32 GetDamageValue(UNIT_EFFECT &rImp, Character &rMe) const;
}
SOT_BURNING_T;

//根据条件对指定范围内指定阵营关系的对象施放子技能（条件：1 生效概率。 2 生效次数，-1为无限次 ） add by shangy
typedef class SpellEffect088 :
public EffectLogic
{
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	enum { ID = SPELL_EFFECT_088, };
	class OwnImpactParamIndex
	{
	public: enum { IDX_ACTIVATE_TIMES = 0, };
	};
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_REFIX_TYPE = 0, IDX_REFIX_HP, IDX_SCAN_RADIUS, IDX_EFFECTED_OBJ_COUNT, IDX_SUB_IMPACT_DATA_INDEX, IDX_ACTIVATE_TIMES, IDX_RATE, IDX_CAMP_RELATION, IDX_CAN_REPEAT_FLAG};
	};
	enum ENUM_CAMP_RELATION
	{
		CAMP_RELATION_INVALID		= -1,
		CAMP_RELATION_FRIEND,
		CAMP_RELATION_PARTNER,
		CAMP_RELATION_ENEMY,
		CAMP_RELATION_PET,
		CAMP_RELATION_NUM
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	SpellEffect088()
	{
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	~SpellEffect088()
	{
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL IsIntervaled(void) const
	{
		return TRUE;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL	InitFromData(UNIT_EFFECT &rImp, EffectData const &rData) const;

	/*
	===============================================================================================================
	===============================================================================================================
	*/

	int32 GetActivateTimes(UNIT_EFFECT const &rImp) const
	{
		return rImp.GetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	void SetActivateTimes(UNIT_EFFECT &rImp, int32 nValue) const
	{
		rImp.SetParamByIndex(OwnImpactParamIndex::IDX_ACTIVATE_TIMES, nValue);
	};


	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixType(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_TYPE,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/	int32 GetScanRadius(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SCAN_RADIUS,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetEffectedObjCount(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_EFFECTED_OBJ_COUNT,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/

	int32 GetSubImpactDataIndex(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_SUB_IMPACT_DATA_INDEX,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixHP(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_REFIX_HP,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetActivateTimesFromTable(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ACTIVATE_TIMES,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_RATE,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetCampRelation(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CAMP_RELATION,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetCanRepeatFlag(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_CAN_REPEAT_FLAG,
			rImp.GetSkillLevel()
			);
	};
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	void	OnEvent_IntervalOver(UNIT_EFFECT &rImp, Character &rMe) const;
	BOOL	IsScanedTargetValid(UNIT_EFFECT &rImp, Character &rMe, Character &rTar) const;

	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
protected:
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
private:
	int32 GetDamageValue(UNIT_EFFECT &rImp, Character &rMe) const;
}
SOT_EFFECT_FOR_SPECIAL_T;

class SpellEffect089 :
	public EffectLogic
{
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	enum { ID = SPELL_EFFECT_089, };

	class	ImpactDataDescriptorIndex
	{
	public:
		enum
		{
			IDX_ZOOM_SCALE		= 0,
		};
	};

	SpellEffect089()
	{
	};

	~SpellEffect089()
	{
	};

	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	void MarkModifiedAttrDirty(UNIT_EFFECT &rImp, Character &rMe) const;

	virtual BOOL Get_Property_IntAttrRefix
		(
		UNIT_EFFECT			&rImp,
		Character			&rMe,
		CharIntAttrRefixs::Index_T	nIdx,
		int32				&rIntAttrRefix
		) const;

	int32 GetZoomScale(UNIT_EFFECT &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_ZOOM_SCALE,
			rImp.GetSkillLevel()
			);
	};
};

//修正天赋平衡效果 add by shangy
typedef class SpellEffect090 :
public EffectLogic
{
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	enum { ID = SPELL_EFFECT_090, };
	class OwnImpactParamIndex
	{
	};
	class ImpactDataDescriptorIndex
	{
	public: enum { IDX_BALANCE_CRITRATE = 0, IDX_BALANCE_TOUGHNESS, IDX_BALANCE_HIT, IDX_BALANCE_MISS, IDX_BALANCE_CRITDAMAGE, IDX_BALANCE_CRITDAMAGEDERATE, IDX_BALANCE_CTRLHIT, IDX_BALANCE_CTRLMISS};
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	SpellEffect090()
	{
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	~SpellEffect090()
	{
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL IsOverTimed(void) const
	{
		return TRUE;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	BOOL IsIntervaled(void) const
	{
		return FALSE;
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixBalanceCritrate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_BALANCE_CRITRATE,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/	
	int32 GetRefixBalanceToughness(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_BALANCE_TOUGHNESS,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixBalanceHit(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_BALANCE_HIT,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/

	int32 GetRefixBalanceMiss(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_BALANCE_MISS,
			rImp.GetSkillLevel()
			);
	};

	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixBalanceCritDamage(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_BALANCE_CRITDAMAGE,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixBalanceCritDamageDerate(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_BALANCE_CRITDAMAGEDERATE,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetRefixBalanceCtrHit(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_BALANCE_CTRLHIT,
			rImp.GetSkillLevel()
			);
	};
	/*
	===============================================================================================================
	===============================================================================================================
	*/
	int32 GetBalanceCtrMiss(UNIT_EFFECT const &rImp) const
	{
		return GetEffectDataDescriptorValueByIndex
			(
			rImp.GetDataIndex(),
			ImpactDataDescriptorIndex::IDX_BALANCE_CTRLMISS,
			rImp.GetSkillLevel()
			);
	};
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
public:
	void	RefixInherenceBalance(UNIT_EFFECT &rImp, InherenceBalanceRefixValue &rInherenceBalance) const;

	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
protected:
	/*
	-----------------------------------------------------------------------------------------------------------------------
	-----------------------------------------------------------------------------------------------------------------------
	*/
private:
}
SOT_EFFECT_FOR_INHERENCE_BALANCE;

#endif
