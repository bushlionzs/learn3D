/*$T MapServer/Server/Skill/AllSkills.h GC 1.140 10/10/07 10:07:52 */


/*$6
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 */


#ifndef __ALLSKILLS_H__
#define __ALLSKILLS_H__

#include "Skill_Base.h"

class SkillCompound :
	public BaseSkill
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SkillCompound(const BaseSkill &a) :
	BaseSkill(a)
	{
	}

	virtual OPT_RESULT CanUseSkill(Player *pPlayer);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void OnEvent_ProcInterrupt(Player *pPlayer)
	{
		BaseSkill::OnEvent_ProcInterrupt(pPlayer);
	}

	virtual OPT_RESULT OnEvent_ProcOver(Player *pPlayer);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual OPT_RESULT OnEvent_ProcSuccess(Player *pPlayer, const _SKILL_PRESCRIPTION_DATA *pPrescrData);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT OnEvent_ProcFailure(Player *pPlayer)
	{
		return OR_OK;
	}

	virtual OPT_RESULT OnEvent_ProcFailure(Player *pPlayer, const _SKILL_PRESCRIPTION_DATA *pPrescrData);
	virtual OPT_RESULT IsFitPrescr(Player *pPlayer, const _SKILL_PRESCRIPTION_DATA *pPrescrData);
	virtual OPT_RESULT SkillConsume(Player *pPlayer, const _SKILL_PRESCRIPTION_DATA *pPrescrData);
	virtual BOOL	CreateItemToPlayer(Player *pPlayer, uint32 uItemSN, int32 nCount);
};

class SkillFoundry :
	public SkillCompound
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SkillFoundry(const BaseSkill &a) :
	SkillCompound(a)
	{
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

class SkillGather :
	public BaseSkill
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	SkillGather(BaseSkill &a);
	virtual OPT_RESULT CanUseSkill(Player *pPlayer);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual void OnEvent_ProcInterrupt(Player *pPlayer)
	{
		BaseSkill::OnEvent_ProcInterrupt(pPlayer);
	}

	virtual OPT_RESULT OnEvent_ProcOver(Player *pPlayer);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual OPT_RESULT OnEvent_ProcSuccess(Player *pPlayer);

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT OnEvent_ProcFailure(Player *pPlayer);

	void	OnEvent_DefaultProcSuccess(Player *pPlayer);
	void	OnEvent_ScriptProcSuccess(Player *pPlayer);
};

class SkillGatherFish :
	public SkillGather
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SkillGatherFish(BaseSkill &a) :
	SkillGather(a)
	{
	}

	~		SkillGatherFish();
	virtual OPT_RESULT CanUseSkill(Player *pPlayer);
	virtual OPT_RESULT OnEvent_ProcOver(Player *pPlayer);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT OnEvent_ProcSuccess(Player *pPlayer)
	{
		return OR_OK;
	}

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	virtual OPT_RESULT OnEvent_ProcFailure(Player *pPlayer)
	{
		return OR_OK;
	};
};

class SkillGeneric :
	public BaseSkill
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SkillGeneric(const BaseSkill &a) :
	BaseSkill(a)
	{
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

class SkillGenericCompound :
	public SkillCompound
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SkillGenericCompound(const BaseSkill &a) :
	SkillCompound(a)
	{
	}

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
};

class SkillGenericGather :
	public SkillGather
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:

	/*
	 ===============================================================================================================
	 ===============================================================================================================
	 */
	SkillGenericGather(BaseSkill &a) :
	SkillGather(a)
	{
	}
};

class SkillMachining :
	public SkillCompound
{
/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	enum MachiningType { NORMAL_TYPE = 0, GEM_COMPOUND, GEM_EMBED, TYPE_SIZE, };

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
public:
	SkillMachining();
	SkillMachining(const BaseSkill &a);
	~		SkillMachining();

	virtual OPT_RESULT CanUseSkill(Player *pPlayer);
	virtual OPT_RESULT OnEvent_ProcOver(Player *pPlayer);
	BOOL		IsGemConflict(Player *pPlayer, uchar GemIndex, uchar EquipIndex);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
protected:
	virtual OPT_RESULT OnEvent_ProcSuccess(Player *pPlayer, const _SKILL_PRESCRIPTION_DATA *pPrescrData);

/*
 -----------------------------------------------------------------------------------------------------------------------
 -----------------------------------------------------------------------------------------------------------------------
 */
private:
	OPT_RESULT OnEvent_ProcSuccess(Player *pPlayer);
};

#endif
